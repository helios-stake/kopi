syntax = "proto3";
package kopi.denominations;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "kopi/denominations/params.proto";

option go_package = "github.com/kopi-money/kopi/x/denominations/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc DexAddDenom(MsgDexAddDenom) returns (MsgUpdateParamsResponse);
  rpc DexUpdateMinimumLiquidity(MsgDexUpdateMinimumLiquidity) returns (MsgUpdateParamsResponse);
  rpc DexUpdateMinimumOrderSize(MsgDexUpdateMinimumOrderSize) returns (MsgUpdateParamsResponse);

  rpc KCoinAddDenom(MsgKCoinAddDenom) returns (MsgUpdateParamsResponse);
  rpc KCoinUpdateSupplyLimit(MsgKCoinUpdateSupplyLimit) returns (MsgUpdateParamsResponse);
  rpc KCoinUpdateMintAmount(MsgKCoinUpdateMintAmount) returns (MsgUpdateParamsResponse);
  rpc KCoinUpdateBurnAmount(MsgKCoinUpdateBurnAmount) returns (MsgUpdateParamsResponse);
  rpc KCoinAddReferences(MsgKCoinAddReferences) returns (MsgUpdateParamsResponse);
  rpc KCoinRemoveReferences(MsgKCoinRemoveReferences) returns (MsgUpdateParamsResponse);

  rpc CollateralAddDenom(MsgCollateralAddDenom) returns (MsgUpdateParamsResponse);
  rpc CollateralUpdateLTV(MsgCollateralUpdateLTV) returns (MsgUpdateParamsResponse);
  rpc CollateralUpdateDepositLimit(MsgCollateralUpdateDepositLimit) returns (MsgUpdateParamsResponse);

  rpc CAssetAddDenom(MsgCAssetAddDenom) returns (MsgUpdateParamsResponse);
  rpc CAssetUpdateDexFeeShare(MsgCAssetUpdateDexFeeShare) returns (MsgUpdateParamsResponse);
  rpc CAssetUpdateBorrowLimit(MsgCAssetUpdateBorrowLimit) returns (MsgUpdateParamsResponse);
  rpc CAssetUpdateMinimumLoanSize(MsgCAssetUpdateMinimumLoanSize) returns (MsgUpdateParamsResponse);

  rpc ArbitrageAddDenom(MsgAddArbitrageDenom) returns (MsgUpdateParamsResponse);
  rpc ArbitrageUpdateBuyThreshold(MsgArbitrageUpdateBuyThreshold) returns (MsgUpdateParamsResponse);
  rpc ArbitrageUpdateSellThreshold(MsgArbitrageUpdateSellThreshold) returns (MsgUpdateParamsResponse);
  rpc ArbitrageUpdateBuyAmount(MsgArbitrageUpdateBuyAmount) returns (MsgUpdateParamsResponse);
  rpc ArbitrageUpdateSellAmount(MsgArbitrageUpdateSellAmount) returns (MsgUpdateParamsResponse);
  rpc ArbitrageUpdateRedemptionFee(MsgArbitrageUpdateRedemptionFee) returns (MsgUpdateParamsResponse);
  rpc ArbitrageUpdateRedemptionFeeReserveShare(MsgArbitrageUpdateRedemptionFeeReserveShare) returns (MsgUpdateParamsResponse);
}

message MsgUpdateParamsResponse {}

message MsgDexAddDenom {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgDexAddDenom";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string factor = 3;
  string min_liquidity = 4;
  string min_order_size = 5;
  uint64 exponent = 6;
}

message MsgDexUpdateMinimumLiquidity {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgDexUpdateMinimumLiquidity";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string min_liquidity = 3;
}

message MsgDexUpdateMinimumOrderSize {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgDexUpdateMinimumOrderSize";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string min_order_size = 3;
}

message MsgKCoinAddDenom {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgKCoinAddDenom";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  repeated string references = 3;
  string max_supply = 4;
  string max_mint_amount = 5;
  string max_burn_amount = 6;
  string factor = 7;
  string min_liquidity = 8;
  string min_order_size = 9;
}

message MsgKCoinUpdateSupplyLimit {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgKCoinUpdateSupplyLimit";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  string max_supply = 3;
}

message MsgKCoinUpdateBurnAmount {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgKCoinUpdateBurnAmount";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  string max_burn_amount = 3;
}

message MsgKCoinUpdateMintAmount {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgKCoinUpdateMintAmount";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  string max_mint_amount = 3;
}

message MsgKCoinAddReferences {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgKCoinAddReferences";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  repeated string references = 3;
}

message MsgKCoinRemoveReferences {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgKCoinRemoveReferences";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  repeated string references = 3;
}

message MsgCollateralAddDenom {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgCollateralAddDenom";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  string ltv = 3;
  string max_deposit = 4;
}

message MsgCollateralUpdateLTV {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgCollateralUpdateLTV";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  string ltv = 3;
}

message MsgCollateralUpdateDepositLimit {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgCollateralUpdateDepositLimit";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  string max_deposit = 3;
}

message MsgCAssetAddDenom {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgCAssetAddDenom";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string base_denom = 3;
  string dex_fee_share = 4;
  string factor = 5;
  string min_liquidity = 6;
  string min_order_size = 7;
  string borrow_limit = 8;
  string min_loan_size = 9;
}

message MsgCAssetUpdateDexFeeShare {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgCAssetUpdateDexFeeShare";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string dex_fee_share = 3;
}

message MsgCAssetUpdateBorrowLimit {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgCAssetUpdateBorrowLimit";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string borrow_limit = 3;
}

message MsgCAssetUpdateMinimumLoanSize {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgCAssetUpdateMinimumLoanSize";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string minimum_loan_size = 3;
}

message MsgAddArbitrageDenom {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgAddArbitrageDenom";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string factor = 3;
  string min_liquidity = 4;
  string min_order_size = 5;

  string kcoin = 6;
  string c_asset = 7;

  string buy_threshold = 8;
  string buy_trade_amount = 10;
  string sell_threshold = 9;
  string sell_trade_amount = 11;

  string redemption_fee = 12;
  string redemption_fee_reserve_share = 13;
}

message MsgArbitrageUpdateBuyThreshold {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgArbitrageUpdateBuyThreshold";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string buy_threshold = 3;
}

message MsgArbitrageUpdateSellThreshold {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgArbitrageUpdateSellThreshold";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string sell_threshold = 3;
}

message MsgArbitrageUpdateBuyAmount {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgArbitrageUpdateBuyAmount";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string buy_amount = 3;
}

message MsgArbitrageUpdateSellAmount {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgArbitrageUpdateSellAmount";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string sell_amount = 3;
}

message MsgArbitrageUpdateRedemptionFee {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgArbitrageUpdateRedemptionFee";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string redemption_fee = 3;
}

message MsgArbitrageUpdateRedemptionFeeReserveShare {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/denominations/MsgArbitrageUpdateRedemptionFeeReserveShare";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string redemption_fee_reserve_share = 3;
}
