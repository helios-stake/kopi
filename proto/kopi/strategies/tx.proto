syntax = "proto3";
package kopi.strategies;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "kopi/strategies/params.proto";

option go_package = "github.com/kopi-money/kopi/x/strategies/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc ArbitrageDeposit (MsgArbitrageDeposit) returns (Void);
  rpc ArbitrageRedeem  (MsgArbitrageRedeem) returns (Void);

  rpc AutomationsAdd            (MsgAutomationsAdd) returns (Void);
  rpc AutomationsUpdate         (MsgAutomationsUpdate) returns (Void);
  rpc AutomationsRemove         (MsgAutomationsRemove) returns (Void);
  rpc AutomationsRemoveMultiple (MsgAutomationsRemoveMultiple) returns (Void);
  rpc AutomationsActive         (MsgAutomationsActive) returns (Void);
  rpc AutomationsActiveMultiple (MsgAutomationsActiveMultiple) returns (Void);

  rpc AutomationsAddFunds (MsgAutomationsAddFunds) returns (Void);
  rpc AutomationsWithdrawFunds (MsgAutomationsWidthrawFunds) returns (Void);

  rpc UpdateAutomationsCosts(MsgUpdateAutomationsCosts) returns (Void);
}

message Void {}

message MsgUpdateAutomationsCosts {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "kopi/x/strategies/MsgUpdateAutomationCosts";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  uint64 condition_fee = 2;
  uint64 action_fee = 3;
}

message MsgAutomationsWidthrawFunds {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string amount = 2;
}

message MsgAutomationsAddFunds {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string amount = 2;
}

message MsgAutomationsActive {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  uint64 index = 2;
  bool active = 3;
}

message MsgAutomationsActiveMultiple {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  repeated uint64 indexes = 2;
  bool active = 3;
}

message MsgAutomationsAdd {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string title = 2;

  string interval_type = 3;
  string interval_length = 4;
  string validity_type = 5;
  string validity_value = 6;

  string conditions = 7;
  string actions = 8;
}

message MsgAutomationsUpdate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  uint64 index = 2;
  string title = 3;

  string interval_type = 4;
  string interval_length = 5;
  string validity_type = 6;
  string validity_value = 7;

  string conditions = 8;
  string actions = 9;
}

message MsgAutomationsRemove {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  uint64 index = 2;
}

message MsgAutomationsRemoveMultiple {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  repeated uint64 indexes = 2;
}

message MsgArbitrageDeposit {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string denom = 2;
  string amount = 3;
}

message MsgArbitrageRedeem {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string denom = 2;
  string amount = 3;
  bool allow_incomplete = 4;
}