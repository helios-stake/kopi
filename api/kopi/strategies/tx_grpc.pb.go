// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kopi/strategies/tx.proto

package strategies

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_ArbitrageDeposit_FullMethodName         = "/kopi.strategies.Msg/ArbitrageDeposit"
	Msg_ArbitrageRedeem_FullMethodName          = "/kopi.strategies.Msg/ArbitrageRedeem"
	Msg_AutomationsAdd_FullMethodName           = "/kopi.strategies.Msg/AutomationsAdd"
	Msg_AutomationsUpdate_FullMethodName        = "/kopi.strategies.Msg/AutomationsUpdate"
	Msg_AutomationsRemove_FullMethodName        = "/kopi.strategies.Msg/AutomationsRemove"
	Msg_AutomationsActive_FullMethodName        = "/kopi.strategies.Msg/AutomationsActive"
	Msg_AutomationsAddFunds_FullMethodName      = "/kopi.strategies.Msg/AutomationsAddFunds"
	Msg_AutomationsWithdrawFunds_FullMethodName = "/kopi.strategies.Msg/AutomationsWithdrawFunds"
	Msg_UpdateAutomationsCosts_FullMethodName   = "/kopi.strategies.Msg/UpdateAutomationsCosts"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	ArbitrageDeposit(ctx context.Context, in *MsgArbitrageDeposit, opts ...grpc.CallOption) (*Void, error)
	ArbitrageRedeem(ctx context.Context, in *MsgArbitrageRedeem, opts ...grpc.CallOption) (*Void, error)
	AutomationsAdd(ctx context.Context, in *MsgAutomationsAdd, opts ...grpc.CallOption) (*Void, error)
	AutomationsUpdate(ctx context.Context, in *MsgAutomationsUpdate, opts ...grpc.CallOption) (*Void, error)
	AutomationsRemove(ctx context.Context, in *MsgAutomationsRemove, opts ...grpc.CallOption) (*Void, error)
	AutomationsActive(ctx context.Context, in *MsgAutomationsActive, opts ...grpc.CallOption) (*Void, error)
	AutomationsAddFunds(ctx context.Context, in *MsgAutomationsAddFunds, opts ...grpc.CallOption) (*Void, error)
	AutomationsWithdrawFunds(ctx context.Context, in *MsgAutomationsWidthrawFunds, opts ...grpc.CallOption) (*Void, error)
	UpdateAutomationsCosts(ctx context.Context, in *MsgUpdateAutomationsCosts, opts ...grpc.CallOption) (*Void, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ArbitrageDeposit(ctx context.Context, in *MsgArbitrageDeposit, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_ArbitrageDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageRedeem(ctx context.Context, in *MsgArbitrageRedeem, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_ArbitrageRedeem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsAdd(ctx context.Context, in *MsgAutomationsAdd, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_AutomationsAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsUpdate(ctx context.Context, in *MsgAutomationsUpdate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_AutomationsUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsRemove(ctx context.Context, in *MsgAutomationsRemove, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_AutomationsRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsActive(ctx context.Context, in *MsgAutomationsActive, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_AutomationsActive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsAddFunds(ctx context.Context, in *MsgAutomationsAddFunds, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_AutomationsAddFunds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsWithdrawFunds(ctx context.Context, in *MsgAutomationsWidthrawFunds, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_AutomationsWithdrawFunds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAutomationsCosts(ctx context.Context, in *MsgUpdateAutomationsCosts, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateAutomationsCosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	ArbitrageDeposit(context.Context, *MsgArbitrageDeposit) (*Void, error)
	ArbitrageRedeem(context.Context, *MsgArbitrageRedeem) (*Void, error)
	AutomationsAdd(context.Context, *MsgAutomationsAdd) (*Void, error)
	AutomationsUpdate(context.Context, *MsgAutomationsUpdate) (*Void, error)
	AutomationsRemove(context.Context, *MsgAutomationsRemove) (*Void, error)
	AutomationsActive(context.Context, *MsgAutomationsActive) (*Void, error)
	AutomationsAddFunds(context.Context, *MsgAutomationsAddFunds) (*Void, error)
	AutomationsWithdrawFunds(context.Context, *MsgAutomationsWidthrawFunds) (*Void, error)
	UpdateAutomationsCosts(context.Context, *MsgUpdateAutomationsCosts) (*Void, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) ArbitrageDeposit(context.Context, *MsgArbitrageDeposit) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageDeposit not implemented")
}
func (UnimplementedMsgServer) ArbitrageRedeem(context.Context, *MsgArbitrageRedeem) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageRedeem not implemented")
}
func (UnimplementedMsgServer) AutomationsAdd(context.Context, *MsgAutomationsAdd) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsAdd not implemented")
}
func (UnimplementedMsgServer) AutomationsUpdate(context.Context, *MsgAutomationsUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsUpdate not implemented")
}
func (UnimplementedMsgServer) AutomationsRemove(context.Context, *MsgAutomationsRemove) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsRemove not implemented")
}
func (UnimplementedMsgServer) AutomationsActive(context.Context, *MsgAutomationsActive) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsActive not implemented")
}
func (UnimplementedMsgServer) AutomationsAddFunds(context.Context, *MsgAutomationsAddFunds) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsAddFunds not implemented")
}
func (UnimplementedMsgServer) AutomationsWithdrawFunds(context.Context, *MsgAutomationsWidthrawFunds) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsWithdrawFunds not implemented")
}
func (UnimplementedMsgServer) UpdateAutomationsCosts(context.Context, *MsgUpdateAutomationsCosts) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutomationsCosts not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_ArbitrageDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageDeposit(ctx, req.(*MsgArbitrageDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageRedeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageRedeem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageRedeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageRedeem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageRedeem(ctx, req.(*MsgArbitrageRedeem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AutomationsAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsAdd(ctx, req.(*MsgAutomationsAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AutomationsUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsUpdate(ctx, req.(*MsgAutomationsUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AutomationsRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsRemove(ctx, req.(*MsgAutomationsRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsActive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AutomationsActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsActive(ctx, req.(*MsgAutomationsActive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsAddFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsAddFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsAddFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AutomationsAddFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsAddFunds(ctx, req.(*MsgAutomationsAddFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsWithdrawFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsWidthrawFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsWithdrawFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AutomationsWithdrawFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsWithdrawFunds(ctx, req.(*MsgAutomationsWidthrawFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAutomationsCosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAutomationsCosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAutomationsCosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAutomationsCosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAutomationsCosts(ctx, req.(*MsgUpdateAutomationsCosts))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.strategies.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ArbitrageDeposit",
			Handler:    _Msg_ArbitrageDeposit_Handler,
		},
		{
			MethodName: "ArbitrageRedeem",
			Handler:    _Msg_ArbitrageRedeem_Handler,
		},
		{
			MethodName: "AutomationsAdd",
			Handler:    _Msg_AutomationsAdd_Handler,
		},
		{
			MethodName: "AutomationsUpdate",
			Handler:    _Msg_AutomationsUpdate_Handler,
		},
		{
			MethodName: "AutomationsRemove",
			Handler:    _Msg_AutomationsRemove_Handler,
		},
		{
			MethodName: "AutomationsActive",
			Handler:    _Msg_AutomationsActive_Handler,
		},
		{
			MethodName: "AutomationsAddFunds",
			Handler:    _Msg_AutomationsAddFunds_Handler,
		},
		{
			MethodName: "AutomationsWithdrawFunds",
			Handler:    _Msg_AutomationsWithdrawFunds_Handler,
		},
		{
			MethodName: "UpdateAutomationsCosts",
			Handler:    _Msg_UpdateAutomationsCosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/strategies/tx.proto",
}
