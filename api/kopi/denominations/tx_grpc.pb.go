// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kopi/denominations/tx.proto

package denominations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_DexAddDenom_FullMethodName                              = "/kopi.denominations.Msg/DexAddDenom"
	Msg_DexUpdateMinimumLiquidity_FullMethodName                = "/kopi.denominations.Msg/DexUpdateMinimumLiquidity"
	Msg_DexUpdateMinimumOrderSize_FullMethodName                = "/kopi.denominations.Msg/DexUpdateMinimumOrderSize"
	Msg_KCoinAddDenom_FullMethodName                            = "/kopi.denominations.Msg/KCoinAddDenom"
	Msg_KCoinUpdateSupplyLimit_FullMethodName                   = "/kopi.denominations.Msg/KCoinUpdateSupplyLimit"
	Msg_KCoinUpdateMintAmount_FullMethodName                    = "/kopi.denominations.Msg/KCoinUpdateMintAmount"
	Msg_KCoinUpdateBurnAmount_FullMethodName                    = "/kopi.denominations.Msg/KCoinUpdateBurnAmount"
	Msg_KCoinAddReferences_FullMethodName                       = "/kopi.denominations.Msg/KCoinAddReferences"
	Msg_KCoinRemoveReferences_FullMethodName                    = "/kopi.denominations.Msg/KCoinRemoveReferences"
	Msg_CollateralAddDenom_FullMethodName                       = "/kopi.denominations.Msg/CollateralAddDenom"
	Msg_CollateralUpdateLTV_FullMethodName                      = "/kopi.denominations.Msg/CollateralUpdateLTV"
	Msg_CollateralUpdateDepositLimit_FullMethodName             = "/kopi.denominations.Msg/CollateralUpdateDepositLimit"
	Msg_CAssetAddDenom_FullMethodName                           = "/kopi.denominations.Msg/CAssetAddDenom"
	Msg_CAssetUpdateDexFeeShare_FullMethodName                  = "/kopi.denominations.Msg/CAssetUpdateDexFeeShare"
	Msg_CAssetUpdateBorrowLimit_FullMethodName                  = "/kopi.denominations.Msg/CAssetUpdateBorrowLimit"
	Msg_CAssetUpdateMinimumLoanSize_FullMethodName              = "/kopi.denominations.Msg/CAssetUpdateMinimumLoanSize"
	Msg_ArbitrageAddDenom_FullMethodName                        = "/kopi.denominations.Msg/ArbitrageAddDenom"
	Msg_ArbitrageUpdateBuyThreshold_FullMethodName              = "/kopi.denominations.Msg/ArbitrageUpdateBuyThreshold"
	Msg_ArbitrageUpdateSellThreshold_FullMethodName             = "/kopi.denominations.Msg/ArbitrageUpdateSellThreshold"
	Msg_ArbitrageUpdateBuyAmount_FullMethodName                 = "/kopi.denominations.Msg/ArbitrageUpdateBuyAmount"
	Msg_ArbitrageUpdateSellAmount_FullMethodName                = "/kopi.denominations.Msg/ArbitrageUpdateSellAmount"
	Msg_ArbitrageUpdateRedemptionFee_FullMethodName             = "/kopi.denominations.Msg/ArbitrageUpdateRedemptionFee"
	Msg_ArbitrageUpdateRedemptionFeeReserveShare_FullMethodName = "/kopi.denominations.Msg/ArbitrageUpdateRedemptionFeeReserveShare"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	DexAddDenom(ctx context.Context, in *MsgDexAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	DexUpdateMinimumLiquidity(ctx context.Context, in *MsgDexUpdateMinimumLiquidity, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	DexUpdateMinimumOrderSize(ctx context.Context, in *MsgDexUpdateMinimumOrderSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinAddDenom(ctx context.Context, in *MsgKCoinAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinUpdateSupplyLimit(ctx context.Context, in *MsgKCoinUpdateSupplyLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinUpdateMintAmount(ctx context.Context, in *MsgKCoinUpdateMintAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinUpdateBurnAmount(ctx context.Context, in *MsgKCoinUpdateBurnAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinAddReferences(ctx context.Context, in *MsgKCoinAddReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinRemoveReferences(ctx context.Context, in *MsgKCoinRemoveReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CollateralAddDenom(ctx context.Context, in *MsgCollateralAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CollateralUpdateLTV(ctx context.Context, in *MsgCollateralUpdateLTV, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CollateralUpdateDepositLimit(ctx context.Context, in *MsgCollateralUpdateDepositLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CAssetAddDenom(ctx context.Context, in *MsgCAssetAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CAssetUpdateDexFeeShare(ctx context.Context, in *MsgCAssetUpdateDexFeeShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CAssetUpdateBorrowLimit(ctx context.Context, in *MsgCAssetUpdateBorrowLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CAssetUpdateMinimumLoanSize(ctx context.Context, in *MsgCAssetUpdateMinimumLoanSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageAddDenom(ctx context.Context, in *MsgAddArbitrageDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateBuyThreshold(ctx context.Context, in *MsgArbitrageUpdateBuyThreshold, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateSellThreshold(ctx context.Context, in *MsgArbitrageUpdateSellThreshold, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateBuyAmount(ctx context.Context, in *MsgArbitrageUpdateBuyAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateSellAmount(ctx context.Context, in *MsgArbitrageUpdateSellAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateRedemptionFee(ctx context.Context, in *MsgArbitrageUpdateRedemptionFee, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateRedemptionFeeReserveShare(ctx context.Context, in *MsgArbitrageUpdateRedemptionFeeReserveShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DexAddDenom(ctx context.Context, in *MsgDexAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_DexAddDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DexUpdateMinimumLiquidity(ctx context.Context, in *MsgDexUpdateMinimumLiquidity, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_DexUpdateMinimumLiquidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DexUpdateMinimumOrderSize(ctx context.Context, in *MsgDexUpdateMinimumOrderSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_DexUpdateMinimumOrderSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinAddDenom(ctx context.Context, in *MsgKCoinAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_KCoinAddDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinUpdateSupplyLimit(ctx context.Context, in *MsgKCoinUpdateSupplyLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_KCoinUpdateSupplyLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinUpdateMintAmount(ctx context.Context, in *MsgKCoinUpdateMintAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_KCoinUpdateMintAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinUpdateBurnAmount(ctx context.Context, in *MsgKCoinUpdateBurnAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_KCoinUpdateBurnAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinAddReferences(ctx context.Context, in *MsgKCoinAddReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_KCoinAddReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinRemoveReferences(ctx context.Context, in *MsgKCoinRemoveReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_KCoinRemoveReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CollateralAddDenom(ctx context.Context, in *MsgCollateralAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CollateralAddDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CollateralUpdateLTV(ctx context.Context, in *MsgCollateralUpdateLTV, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CollateralUpdateLTV_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CollateralUpdateDepositLimit(ctx context.Context, in *MsgCollateralUpdateDepositLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CollateralUpdateDepositLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CAssetAddDenom(ctx context.Context, in *MsgCAssetAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CAssetAddDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CAssetUpdateDexFeeShare(ctx context.Context, in *MsgCAssetUpdateDexFeeShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CAssetUpdateDexFeeShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CAssetUpdateBorrowLimit(ctx context.Context, in *MsgCAssetUpdateBorrowLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CAssetUpdateBorrowLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CAssetUpdateMinimumLoanSize(ctx context.Context, in *MsgCAssetUpdateMinimumLoanSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_CAssetUpdateMinimumLoanSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageAddDenom(ctx context.Context, in *MsgAddArbitrageDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_ArbitrageAddDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateBuyThreshold(ctx context.Context, in *MsgArbitrageUpdateBuyThreshold, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_ArbitrageUpdateBuyThreshold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateSellThreshold(ctx context.Context, in *MsgArbitrageUpdateSellThreshold, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_ArbitrageUpdateSellThreshold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateBuyAmount(ctx context.Context, in *MsgArbitrageUpdateBuyAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_ArbitrageUpdateBuyAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateSellAmount(ctx context.Context, in *MsgArbitrageUpdateSellAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_ArbitrageUpdateSellAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateRedemptionFee(ctx context.Context, in *MsgArbitrageUpdateRedemptionFee, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_ArbitrageUpdateRedemptionFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateRedemptionFeeReserveShare(ctx context.Context, in *MsgArbitrageUpdateRedemptionFeeReserveShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_ArbitrageUpdateRedemptionFeeReserveShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	DexAddDenom(context.Context, *MsgDexAddDenom) (*MsgUpdateParamsResponse, error)
	DexUpdateMinimumLiquidity(context.Context, *MsgDexUpdateMinimumLiquidity) (*MsgUpdateParamsResponse, error)
	DexUpdateMinimumOrderSize(context.Context, *MsgDexUpdateMinimumOrderSize) (*MsgUpdateParamsResponse, error)
	KCoinAddDenom(context.Context, *MsgKCoinAddDenom) (*MsgUpdateParamsResponse, error)
	KCoinUpdateSupplyLimit(context.Context, *MsgKCoinUpdateSupplyLimit) (*MsgUpdateParamsResponse, error)
	KCoinUpdateMintAmount(context.Context, *MsgKCoinUpdateMintAmount) (*MsgUpdateParamsResponse, error)
	KCoinUpdateBurnAmount(context.Context, *MsgKCoinUpdateBurnAmount) (*MsgUpdateParamsResponse, error)
	KCoinAddReferences(context.Context, *MsgKCoinAddReferences) (*MsgUpdateParamsResponse, error)
	KCoinRemoveReferences(context.Context, *MsgKCoinRemoveReferences) (*MsgUpdateParamsResponse, error)
	CollateralAddDenom(context.Context, *MsgCollateralAddDenom) (*MsgUpdateParamsResponse, error)
	CollateralUpdateLTV(context.Context, *MsgCollateralUpdateLTV) (*MsgUpdateParamsResponse, error)
	CollateralUpdateDepositLimit(context.Context, *MsgCollateralUpdateDepositLimit) (*MsgUpdateParamsResponse, error)
	CAssetAddDenom(context.Context, *MsgCAssetAddDenom) (*MsgUpdateParamsResponse, error)
	CAssetUpdateDexFeeShare(context.Context, *MsgCAssetUpdateDexFeeShare) (*MsgUpdateParamsResponse, error)
	CAssetUpdateBorrowLimit(context.Context, *MsgCAssetUpdateBorrowLimit) (*MsgUpdateParamsResponse, error)
	CAssetUpdateMinimumLoanSize(context.Context, *MsgCAssetUpdateMinimumLoanSize) (*MsgUpdateParamsResponse, error)
	ArbitrageAddDenom(context.Context, *MsgAddArbitrageDenom) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateBuyThreshold(context.Context, *MsgArbitrageUpdateBuyThreshold) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateSellThreshold(context.Context, *MsgArbitrageUpdateSellThreshold) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateBuyAmount(context.Context, *MsgArbitrageUpdateBuyAmount) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateSellAmount(context.Context, *MsgArbitrageUpdateSellAmount) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateRedemptionFee(context.Context, *MsgArbitrageUpdateRedemptionFee) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateRedemptionFeeReserveShare(context.Context, *MsgArbitrageUpdateRedemptionFeeReserveShare) (*MsgUpdateParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) DexAddDenom(context.Context, *MsgDexAddDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DexAddDenom not implemented")
}
func (UnimplementedMsgServer) DexUpdateMinimumLiquidity(context.Context, *MsgDexUpdateMinimumLiquidity) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DexUpdateMinimumLiquidity not implemented")
}
func (UnimplementedMsgServer) DexUpdateMinimumOrderSize(context.Context, *MsgDexUpdateMinimumOrderSize) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DexUpdateMinimumOrderSize not implemented")
}
func (UnimplementedMsgServer) KCoinAddDenom(context.Context, *MsgKCoinAddDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinAddDenom not implemented")
}
func (UnimplementedMsgServer) KCoinUpdateSupplyLimit(context.Context, *MsgKCoinUpdateSupplyLimit) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinUpdateSupplyLimit not implemented")
}
func (UnimplementedMsgServer) KCoinUpdateMintAmount(context.Context, *MsgKCoinUpdateMintAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinUpdateMintAmount not implemented")
}
func (UnimplementedMsgServer) KCoinUpdateBurnAmount(context.Context, *MsgKCoinUpdateBurnAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinUpdateBurnAmount not implemented")
}
func (UnimplementedMsgServer) KCoinAddReferences(context.Context, *MsgKCoinAddReferences) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinAddReferences not implemented")
}
func (UnimplementedMsgServer) KCoinRemoveReferences(context.Context, *MsgKCoinRemoveReferences) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinRemoveReferences not implemented")
}
func (UnimplementedMsgServer) CollateralAddDenom(context.Context, *MsgCollateralAddDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralAddDenom not implemented")
}
func (UnimplementedMsgServer) CollateralUpdateLTV(context.Context, *MsgCollateralUpdateLTV) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralUpdateLTV not implemented")
}
func (UnimplementedMsgServer) CollateralUpdateDepositLimit(context.Context, *MsgCollateralUpdateDepositLimit) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralUpdateDepositLimit not implemented")
}
func (UnimplementedMsgServer) CAssetAddDenom(context.Context, *MsgCAssetAddDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAssetAddDenom not implemented")
}
func (UnimplementedMsgServer) CAssetUpdateDexFeeShare(context.Context, *MsgCAssetUpdateDexFeeShare) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAssetUpdateDexFeeShare not implemented")
}
func (UnimplementedMsgServer) CAssetUpdateBorrowLimit(context.Context, *MsgCAssetUpdateBorrowLimit) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAssetUpdateBorrowLimit not implemented")
}
func (UnimplementedMsgServer) CAssetUpdateMinimumLoanSize(context.Context, *MsgCAssetUpdateMinimumLoanSize) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAssetUpdateMinimumLoanSize not implemented")
}
func (UnimplementedMsgServer) ArbitrageAddDenom(context.Context, *MsgAddArbitrageDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageAddDenom not implemented")
}
func (UnimplementedMsgServer) ArbitrageUpdateBuyThreshold(context.Context, *MsgArbitrageUpdateBuyThreshold) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateBuyThreshold not implemented")
}
func (UnimplementedMsgServer) ArbitrageUpdateSellThreshold(context.Context, *MsgArbitrageUpdateSellThreshold) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateSellThreshold not implemented")
}
func (UnimplementedMsgServer) ArbitrageUpdateBuyAmount(context.Context, *MsgArbitrageUpdateBuyAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateBuyAmount not implemented")
}
func (UnimplementedMsgServer) ArbitrageUpdateSellAmount(context.Context, *MsgArbitrageUpdateSellAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateSellAmount not implemented")
}
func (UnimplementedMsgServer) ArbitrageUpdateRedemptionFee(context.Context, *MsgArbitrageUpdateRedemptionFee) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateRedemptionFee not implemented")
}
func (UnimplementedMsgServer) ArbitrageUpdateRedemptionFeeReserveShare(context.Context, *MsgArbitrageUpdateRedemptionFeeReserveShare) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateRedemptionFeeReserveShare not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_DexAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDexAddDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DexAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DexAddDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DexAddDenom(ctx, req.(*MsgDexAddDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DexUpdateMinimumLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDexUpdateMinimumLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DexUpdateMinimumLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DexUpdateMinimumLiquidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DexUpdateMinimumLiquidity(ctx, req.(*MsgDexUpdateMinimumLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DexUpdateMinimumOrderSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDexUpdateMinimumOrderSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DexUpdateMinimumOrderSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DexUpdateMinimumOrderSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DexUpdateMinimumOrderSize(ctx, req.(*MsgDexUpdateMinimumOrderSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinAddDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_KCoinAddDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinAddDenom(ctx, req.(*MsgKCoinAddDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinUpdateSupplyLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinUpdateSupplyLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinUpdateSupplyLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_KCoinUpdateSupplyLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinUpdateSupplyLimit(ctx, req.(*MsgKCoinUpdateSupplyLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinUpdateMintAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinUpdateMintAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinUpdateMintAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_KCoinUpdateMintAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinUpdateMintAmount(ctx, req.(*MsgKCoinUpdateMintAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinUpdateBurnAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinUpdateBurnAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinUpdateBurnAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_KCoinUpdateBurnAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinUpdateBurnAmount(ctx, req.(*MsgKCoinUpdateBurnAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinAddReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinAddReferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinAddReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_KCoinAddReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinAddReferences(ctx, req.(*MsgKCoinAddReferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinRemoveReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinRemoveReferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinRemoveReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_KCoinRemoveReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinRemoveReferences(ctx, req.(*MsgKCoinRemoveReferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CollateralAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCollateralAddDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CollateralAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CollateralAddDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CollateralAddDenom(ctx, req.(*MsgCollateralAddDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CollateralUpdateLTV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCollateralUpdateLTV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CollateralUpdateLTV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CollateralUpdateLTV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CollateralUpdateLTV(ctx, req.(*MsgCollateralUpdateLTV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CollateralUpdateDepositLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCollateralUpdateDepositLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CollateralUpdateDepositLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CollateralUpdateDepositLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CollateralUpdateDepositLimit(ctx, req.(*MsgCollateralUpdateDepositLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CAssetAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCAssetAddDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CAssetAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CAssetAddDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CAssetAddDenom(ctx, req.(*MsgCAssetAddDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CAssetUpdateDexFeeShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCAssetUpdateDexFeeShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CAssetUpdateDexFeeShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CAssetUpdateDexFeeShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CAssetUpdateDexFeeShare(ctx, req.(*MsgCAssetUpdateDexFeeShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CAssetUpdateBorrowLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCAssetUpdateBorrowLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CAssetUpdateBorrowLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CAssetUpdateBorrowLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CAssetUpdateBorrowLimit(ctx, req.(*MsgCAssetUpdateBorrowLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CAssetUpdateMinimumLoanSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCAssetUpdateMinimumLoanSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CAssetUpdateMinimumLoanSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CAssetUpdateMinimumLoanSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CAssetUpdateMinimumLoanSize(ctx, req.(*MsgCAssetUpdateMinimumLoanSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddArbitrageDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageAddDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageAddDenom(ctx, req.(*MsgAddArbitrageDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateBuyThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateBuyThreshold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateBuyThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageUpdateBuyThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateBuyThreshold(ctx, req.(*MsgArbitrageUpdateBuyThreshold))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateSellThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateSellThreshold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateSellThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageUpdateSellThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateSellThreshold(ctx, req.(*MsgArbitrageUpdateSellThreshold))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateBuyAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateBuyAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateBuyAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageUpdateBuyAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateBuyAmount(ctx, req.(*MsgArbitrageUpdateBuyAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateSellAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateSellAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateSellAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageUpdateSellAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateSellAmount(ctx, req.(*MsgArbitrageUpdateSellAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateRedemptionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateRedemptionFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateRedemptionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageUpdateRedemptionFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateRedemptionFee(ctx, req.(*MsgArbitrageUpdateRedemptionFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateRedemptionFeeReserveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateRedemptionFeeReserveShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateRedemptionFeeReserveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArbitrageUpdateRedemptionFeeReserveShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateRedemptionFeeReserveShare(ctx, req.(*MsgArbitrageUpdateRedemptionFeeReserveShare))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.denominations.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DexAddDenom",
			Handler:    _Msg_DexAddDenom_Handler,
		},
		{
			MethodName: "DexUpdateMinimumLiquidity",
			Handler:    _Msg_DexUpdateMinimumLiquidity_Handler,
		},
		{
			MethodName: "DexUpdateMinimumOrderSize",
			Handler:    _Msg_DexUpdateMinimumOrderSize_Handler,
		},
		{
			MethodName: "KCoinAddDenom",
			Handler:    _Msg_KCoinAddDenom_Handler,
		},
		{
			MethodName: "KCoinUpdateSupplyLimit",
			Handler:    _Msg_KCoinUpdateSupplyLimit_Handler,
		},
		{
			MethodName: "KCoinUpdateMintAmount",
			Handler:    _Msg_KCoinUpdateMintAmount_Handler,
		},
		{
			MethodName: "KCoinUpdateBurnAmount",
			Handler:    _Msg_KCoinUpdateBurnAmount_Handler,
		},
		{
			MethodName: "KCoinAddReferences",
			Handler:    _Msg_KCoinAddReferences_Handler,
		},
		{
			MethodName: "KCoinRemoveReferences",
			Handler:    _Msg_KCoinRemoveReferences_Handler,
		},
		{
			MethodName: "CollateralAddDenom",
			Handler:    _Msg_CollateralAddDenom_Handler,
		},
		{
			MethodName: "CollateralUpdateLTV",
			Handler:    _Msg_CollateralUpdateLTV_Handler,
		},
		{
			MethodName: "CollateralUpdateDepositLimit",
			Handler:    _Msg_CollateralUpdateDepositLimit_Handler,
		},
		{
			MethodName: "CAssetAddDenom",
			Handler:    _Msg_CAssetAddDenom_Handler,
		},
		{
			MethodName: "CAssetUpdateDexFeeShare",
			Handler:    _Msg_CAssetUpdateDexFeeShare_Handler,
		},
		{
			MethodName: "CAssetUpdateBorrowLimit",
			Handler:    _Msg_CAssetUpdateBorrowLimit_Handler,
		},
		{
			MethodName: "CAssetUpdateMinimumLoanSize",
			Handler:    _Msg_CAssetUpdateMinimumLoanSize_Handler,
		},
		{
			MethodName: "ArbitrageAddDenom",
			Handler:    _Msg_ArbitrageAddDenom_Handler,
		},
		{
			MethodName: "ArbitrageUpdateBuyThreshold",
			Handler:    _Msg_ArbitrageUpdateBuyThreshold_Handler,
		},
		{
			MethodName: "ArbitrageUpdateSellThreshold",
			Handler:    _Msg_ArbitrageUpdateSellThreshold_Handler,
		},
		{
			MethodName: "ArbitrageUpdateBuyAmount",
			Handler:    _Msg_ArbitrageUpdateBuyAmount_Handler,
		},
		{
			MethodName: "ArbitrageUpdateSellAmount",
			Handler:    _Msg_ArbitrageUpdateSellAmount_Handler,
		},
		{
			MethodName: "ArbitrageUpdateRedemptionFee",
			Handler:    _Msg_ArbitrageUpdateRedemptionFee_Handler,
		},
		{
			MethodName: "ArbitrageUpdateRedemptionFeeReserveShare",
			Handler:    _Msg_ArbitrageUpdateRedemptionFeeReserveShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/denominations/tx.proto",
}
