// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kopi/dex/query.proto

package dex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_ValueKCoins_FullMethodName          = "/kopi.dex.Query/ValueKCoins"
	Query_LiquidityAll_FullMethodName         = "/kopi.dex.Query/LiquidityAll"
	Query_LiquidityForAddress_FullMethodName  = "/kopi.dex.Query/LiquidityForAddress"
	Query_Liquidity_FullMethodName            = "/kopi.dex.Query/Liquidity"
	Query_LiquidityQueue_FullMethodName       = "/kopi.dex.Query/LiquidityQueue"
	Query_LiquiditySum_FullMethodName         = "/kopi.dex.Query/LiquiditySum"
	Query_LiquidityPair_FullMethodName        = "/kopi.dex.Query/LiquidityPair"
	Query_Orders_FullMethodName               = "/kopi.dex.Query/Orders"
	Query_OrdersAddress_FullMethodName        = "/kopi.dex.Query/OrdersAddress"
	Query_Order_FullMethodName                = "/kopi.dex.Query/Order"
	Query_OrdersByPair_FullMethodName         = "/kopi.dex.Query/OrdersByPair"
	Query_OrdersNum_FullMethodName            = "/kopi.dex.Query/OrdersNum"
	Query_OrdersSum_FullMethodName            = "/kopi.dex.Query/OrdersSum"
	Query_OrdersDenomSum_FullMethodName       = "/kopi.dex.Query/OrdersDenomSum"
	Query_Params_FullMethodName               = "/kopi.dex.Query/Params"
	Query_LiquidityPool_FullMethodName        = "/kopi.dex.Query/LiquidityPool"
	Query_OrderPool_FullMethodName            = "/kopi.dex.Query/OrderPool"
	Query_Price_FullMethodName                = "/kopi.dex.Query/Price"
	Query_PriceUsd_FullMethodName             = "/kopi.dex.Query/PriceUsd"
	Query_ReserveFunds_FullMethodName         = "/kopi.dex.Query/ReserveFunds"
	Query_ReserveFundsPerDenom_FullMethodName = "/kopi.dex.Query/ReserveFundsPerDenom"
	Query_QuerySimulateSell_FullMethodName    = "/kopi.dex.Query/QuerySimulateSell"
	Query_QuerySimulateBuy_FullMethodName     = "/kopi.dex.Query/QuerySimulateBuy"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	ValueKCoins(ctx context.Context, in *QueryValueKCoinsRequest, opts ...grpc.CallOption) (*QueryValueKCoinsResponse, error)
	LiquidityAll(ctx context.Context, in *QueryGetLiquidityAllRequest, opts ...grpc.CallOption) (*QueryGetLiquidityAllResponse, error)
	LiquidityForAddress(ctx context.Context, in *QueryLiquidityForAddressRequest, opts ...grpc.CallOption) (*QueryLiquidityForAddressResponse, error)
	Liquidity(ctx context.Context, in *QueryGetLiquidityRequest, opts ...grpc.CallOption) (*QueryGetLiquidityResponse, error)
	LiquidityQueue(ctx context.Context, in *QueryGetLiquidityQueueRequest, opts ...grpc.CallOption) (*QueryGetLiquidityQueueResponse, error)
	LiquiditySum(ctx context.Context, in *QueryGetLiquiditySumRequest, opts ...grpc.CallOption) (*QueryGetLiquiditySumResponse, error)
	LiquidityPair(ctx context.Context, in *QueryGetLiquidityPairRequest, opts ...grpc.CallOption) (*QueryGetLiquidityPairResponse, error)
	Orders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QueryOrdersResponse, error)
	OrdersAddress(ctx context.Context, in *QueryOrdersAddressRequest, opts ...grpc.CallOption) (*QueryOrdersAddressResponse, error)
	Order(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error)
	OrdersByPair(ctx context.Context, in *OrdersByPairRequest, opts ...grpc.CallOption) (*QueryOrdersByPairResponse, error)
	OrdersNum(ctx context.Context, in *QueryOrdersNumRequest, opts ...grpc.CallOption) (*QueryOrdersNumResponse, error)
	OrdersSum(ctx context.Context, in *QueryOrdersSumRequest, opts ...grpc.CallOption) (*QueryOrdersSumResponse, error)
	OrdersDenomSum(ctx context.Context, in *QueryOrdersDenomSumRequest, opts ...grpc.CallOption) (*QueryOrdersDenomSumResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	LiquidityPool(ctx context.Context, in *QueryLiquidityPoolRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolResponse, error)
	OrderPool(ctx context.Context, in *QueryOrderPoolRequest, opts ...grpc.CallOption) (*QueryOrderPoolResponse, error)
	Price(ctx context.Context, in *QueryPriceRequest, opts ...grpc.CallOption) (*QueryPriceResponse, error)
	PriceUsd(ctx context.Context, in *QueryPriceUsdRequest, opts ...grpc.CallOption) (*QueryPriceUsdResponse, error)
	ReserveFunds(ctx context.Context, in *QueryReserveFundsRequest, opts ...grpc.CallOption) (*QueryReserveFundsResponse, error)
	ReserveFundsPerDenom(ctx context.Context, in *QueryReserveFundsPerDenomRequest, opts ...grpc.CallOption) (*Denom, error)
	QuerySimulateSell(ctx context.Context, in *QuerySimulateTradeRequest, opts ...grpc.CallOption) (*QuerySimulateTradeResponse, error)
	QuerySimulateBuy(ctx context.Context, in *QuerySimulateTradeRequest, opts ...grpc.CallOption) (*QuerySimulateTradeResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ValueKCoins(ctx context.Context, in *QueryValueKCoinsRequest, opts ...grpc.CallOption) (*QueryValueKCoinsResponse, error) {
	out := new(QueryValueKCoinsResponse)
	err := c.cc.Invoke(ctx, Query_ValueKCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityAll(ctx context.Context, in *QueryGetLiquidityAllRequest, opts ...grpc.CallOption) (*QueryGetLiquidityAllResponse, error) {
	out := new(QueryGetLiquidityAllResponse)
	err := c.cc.Invoke(ctx, Query_LiquidityAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityForAddress(ctx context.Context, in *QueryLiquidityForAddressRequest, opts ...grpc.CallOption) (*QueryLiquidityForAddressResponse, error) {
	out := new(QueryLiquidityForAddressResponse)
	err := c.cc.Invoke(ctx, Query_LiquidityForAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Liquidity(ctx context.Context, in *QueryGetLiquidityRequest, opts ...grpc.CallOption) (*QueryGetLiquidityResponse, error) {
	out := new(QueryGetLiquidityResponse)
	err := c.cc.Invoke(ctx, Query_Liquidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityQueue(ctx context.Context, in *QueryGetLiquidityQueueRequest, opts ...grpc.CallOption) (*QueryGetLiquidityQueueResponse, error) {
	out := new(QueryGetLiquidityQueueResponse)
	err := c.cc.Invoke(ctx, Query_LiquidityQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquiditySum(ctx context.Context, in *QueryGetLiquiditySumRequest, opts ...grpc.CallOption) (*QueryGetLiquiditySumResponse, error) {
	out := new(QueryGetLiquiditySumResponse)
	err := c.cc.Invoke(ctx, Query_LiquiditySum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityPair(ctx context.Context, in *QueryGetLiquidityPairRequest, opts ...grpc.CallOption) (*QueryGetLiquidityPairResponse, error) {
	out := new(QueryGetLiquidityPairResponse)
	err := c.cc.Invoke(ctx, Query_LiquidityPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Orders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QueryOrdersResponse, error) {
	out := new(QueryOrdersResponse)
	err := c.cc.Invoke(ctx, Query_Orders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersAddress(ctx context.Context, in *QueryOrdersAddressRequest, opts ...grpc.CallOption) (*QueryOrdersAddressResponse, error) {
	out := new(QueryOrdersAddressResponse)
	err := c.cc.Invoke(ctx, Query_OrdersAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Order(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error) {
	out := new(QueryOrderResponse)
	err := c.cc.Invoke(ctx, Query_Order_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersByPair(ctx context.Context, in *OrdersByPairRequest, opts ...grpc.CallOption) (*QueryOrdersByPairResponse, error) {
	out := new(QueryOrdersByPairResponse)
	err := c.cc.Invoke(ctx, Query_OrdersByPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersNum(ctx context.Context, in *QueryOrdersNumRequest, opts ...grpc.CallOption) (*QueryOrdersNumResponse, error) {
	out := new(QueryOrdersNumResponse)
	err := c.cc.Invoke(ctx, Query_OrdersNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersSum(ctx context.Context, in *QueryOrdersSumRequest, opts ...grpc.CallOption) (*QueryOrdersSumResponse, error) {
	out := new(QueryOrdersSumResponse)
	err := c.cc.Invoke(ctx, Query_OrdersSum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersDenomSum(ctx context.Context, in *QueryOrdersDenomSumRequest, opts ...grpc.CallOption) (*QueryOrdersDenomSumResponse, error) {
	out := new(QueryOrdersDenomSumResponse)
	err := c.cc.Invoke(ctx, Query_OrdersDenomSum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityPool(ctx context.Context, in *QueryLiquidityPoolRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolResponse, error) {
	out := new(QueryLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, Query_LiquidityPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderPool(ctx context.Context, in *QueryOrderPoolRequest, opts ...grpc.CallOption) (*QueryOrderPoolResponse, error) {
	out := new(QueryOrderPoolResponse)
	err := c.cc.Invoke(ctx, Query_OrderPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Price(ctx context.Context, in *QueryPriceRequest, opts ...grpc.CallOption) (*QueryPriceResponse, error) {
	out := new(QueryPriceResponse)
	err := c.cc.Invoke(ctx, Query_Price_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceUsd(ctx context.Context, in *QueryPriceUsdRequest, opts ...grpc.CallOption) (*QueryPriceUsdResponse, error) {
	out := new(QueryPriceUsdResponse)
	err := c.cc.Invoke(ctx, Query_PriceUsd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReserveFunds(ctx context.Context, in *QueryReserveFundsRequest, opts ...grpc.CallOption) (*QueryReserveFundsResponse, error) {
	out := new(QueryReserveFundsResponse)
	err := c.cc.Invoke(ctx, Query_ReserveFunds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReserveFundsPerDenom(ctx context.Context, in *QueryReserveFundsPerDenomRequest, opts ...grpc.CallOption) (*Denom, error) {
	out := new(Denom)
	err := c.cc.Invoke(ctx, Query_ReserveFundsPerDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySimulateSell(ctx context.Context, in *QuerySimulateTradeRequest, opts ...grpc.CallOption) (*QuerySimulateTradeResponse, error) {
	out := new(QuerySimulateTradeResponse)
	err := c.cc.Invoke(ctx, Query_QuerySimulateSell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySimulateBuy(ctx context.Context, in *QuerySimulateTradeRequest, opts ...grpc.CallOption) (*QuerySimulateTradeResponse, error) {
	out := new(QuerySimulateTradeResponse)
	err := c.cc.Invoke(ctx, Query_QuerySimulateBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	ValueKCoins(context.Context, *QueryValueKCoinsRequest) (*QueryValueKCoinsResponse, error)
	LiquidityAll(context.Context, *QueryGetLiquidityAllRequest) (*QueryGetLiquidityAllResponse, error)
	LiquidityForAddress(context.Context, *QueryLiquidityForAddressRequest) (*QueryLiquidityForAddressResponse, error)
	Liquidity(context.Context, *QueryGetLiquidityRequest) (*QueryGetLiquidityResponse, error)
	LiquidityQueue(context.Context, *QueryGetLiquidityQueueRequest) (*QueryGetLiquidityQueueResponse, error)
	LiquiditySum(context.Context, *QueryGetLiquiditySumRequest) (*QueryGetLiquiditySumResponse, error)
	LiquidityPair(context.Context, *QueryGetLiquidityPairRequest) (*QueryGetLiquidityPairResponse, error)
	Orders(context.Context, *QueryOrdersRequest) (*QueryOrdersResponse, error)
	OrdersAddress(context.Context, *QueryOrdersAddressRequest) (*QueryOrdersAddressResponse, error)
	Order(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error)
	OrdersByPair(context.Context, *OrdersByPairRequest) (*QueryOrdersByPairResponse, error)
	OrdersNum(context.Context, *QueryOrdersNumRequest) (*QueryOrdersNumResponse, error)
	OrdersSum(context.Context, *QueryOrdersSumRequest) (*QueryOrdersSumResponse, error)
	OrdersDenomSum(context.Context, *QueryOrdersDenomSumRequest) (*QueryOrdersDenomSumResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	LiquidityPool(context.Context, *QueryLiquidityPoolRequest) (*QueryLiquidityPoolResponse, error)
	OrderPool(context.Context, *QueryOrderPoolRequest) (*QueryOrderPoolResponse, error)
	Price(context.Context, *QueryPriceRequest) (*QueryPriceResponse, error)
	PriceUsd(context.Context, *QueryPriceUsdRequest) (*QueryPriceUsdResponse, error)
	ReserveFunds(context.Context, *QueryReserveFundsRequest) (*QueryReserveFundsResponse, error)
	ReserveFundsPerDenom(context.Context, *QueryReserveFundsPerDenomRequest) (*Denom, error)
	QuerySimulateSell(context.Context, *QuerySimulateTradeRequest) (*QuerySimulateTradeResponse, error)
	QuerySimulateBuy(context.Context, *QuerySimulateTradeRequest) (*QuerySimulateTradeResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) ValueKCoins(context.Context, *QueryValueKCoinsRequest) (*QueryValueKCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueKCoins not implemented")
}
func (UnimplementedQueryServer) LiquidityAll(context.Context, *QueryGetLiquidityAllRequest) (*QueryGetLiquidityAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityAll not implemented")
}
func (UnimplementedQueryServer) LiquidityForAddress(context.Context, *QueryLiquidityForAddressRequest) (*QueryLiquidityForAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityForAddress not implemented")
}
func (UnimplementedQueryServer) Liquidity(context.Context, *QueryGetLiquidityRequest) (*QueryGetLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liquidity not implemented")
}
func (UnimplementedQueryServer) LiquidityQueue(context.Context, *QueryGetLiquidityQueueRequest) (*QueryGetLiquidityQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityQueue not implemented")
}
func (UnimplementedQueryServer) LiquiditySum(context.Context, *QueryGetLiquiditySumRequest) (*QueryGetLiquiditySumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquiditySum not implemented")
}
func (UnimplementedQueryServer) LiquidityPair(context.Context, *QueryGetLiquidityPairRequest) (*QueryGetLiquidityPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPair not implemented")
}
func (UnimplementedQueryServer) Orders(context.Context, *QueryOrdersRequest) (*QueryOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Orders not implemented")
}
func (UnimplementedQueryServer) OrdersAddress(context.Context, *QueryOrdersAddressRequest) (*QueryOrdersAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersAddress not implemented")
}
func (UnimplementedQueryServer) Order(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedQueryServer) OrdersByPair(context.Context, *OrdersByPairRequest) (*QueryOrdersByPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByPair not implemented")
}
func (UnimplementedQueryServer) OrdersNum(context.Context, *QueryOrdersNumRequest) (*QueryOrdersNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersNum not implemented")
}
func (UnimplementedQueryServer) OrdersSum(context.Context, *QueryOrdersSumRequest) (*QueryOrdersSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersSum not implemented")
}
func (UnimplementedQueryServer) OrdersDenomSum(context.Context, *QueryOrdersDenomSumRequest) (*QueryOrdersDenomSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersDenomSum not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) LiquidityPool(context.Context, *QueryLiquidityPoolRequest) (*QueryLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPool not implemented")
}
func (UnimplementedQueryServer) OrderPool(context.Context, *QueryOrderPoolRequest) (*QueryOrderPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPool not implemented")
}
func (UnimplementedQueryServer) Price(context.Context, *QueryPriceRequest) (*QueryPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Price not implemented")
}
func (UnimplementedQueryServer) PriceUsd(context.Context, *QueryPriceUsdRequest) (*QueryPriceUsdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceUsd not implemented")
}
func (UnimplementedQueryServer) ReserveFunds(context.Context, *QueryReserveFundsRequest) (*QueryReserveFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveFunds not implemented")
}
func (UnimplementedQueryServer) ReserveFundsPerDenom(context.Context, *QueryReserveFundsPerDenomRequest) (*Denom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveFundsPerDenom not implemented")
}
func (UnimplementedQueryServer) QuerySimulateSell(context.Context, *QuerySimulateTradeRequest) (*QuerySimulateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySimulateSell not implemented")
}
func (UnimplementedQueryServer) QuerySimulateBuy(context.Context, *QuerySimulateTradeRequest) (*QuerySimulateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySimulateBuy not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_ValueKCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValueKCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValueKCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValueKCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValueKCoins(ctx, req.(*QueryValueKCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidityAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquidityAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityAll(ctx, req.(*QueryGetLiquidityAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityForAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquidityForAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityForAddress(ctx, req.(*QueryLiquidityForAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Liquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Liquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Liquidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Liquidity(ctx, req.(*QueryGetLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidityQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquidityQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityQueue(ctx, req.(*QueryGetLiquidityQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquiditySum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquiditySumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquiditySum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquiditySum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquiditySum(ctx, req.(*QueryGetLiquiditySumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidityPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquidityPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPair(ctx, req.(*QueryGetLiquidityPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Orders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Orders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Orders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Orders(ctx, req.(*QueryOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrdersAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersAddress(ctx, req.(*QueryOrdersAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Order_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Order(ctx, req.(*QueryOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrdersByPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersByPair(ctx, req.(*OrdersByPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrdersNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersNum(ctx, req.(*QueryOrdersNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrdersSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersSum(ctx, req.(*QueryOrdersSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersDenomSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersDenomSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersDenomSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrdersDenomSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersDenomSum(ctx, req.(*QueryOrdersDenomSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquidityPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPool(ctx, req.(*QueryLiquidityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrderPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderPool(ctx, req.(*QueryOrderPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Price_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Price(ctx, req.(*QueryPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceUsd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceUsdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceUsd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PriceUsd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceUsd(ctx, req.(*QueryPriceUsdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReserveFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReserveFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReserveFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ReserveFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReserveFunds(ctx, req.(*QueryReserveFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReserveFundsPerDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReserveFundsPerDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReserveFundsPerDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ReserveFundsPerDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReserveFundsPerDenom(ctx, req.(*QueryReserveFundsPerDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySimulateSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySimulateSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuerySimulateSell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySimulateSell(ctx, req.(*QuerySimulateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySimulateBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySimulateBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuerySimulateBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySimulateBuy(ctx, req.(*QuerySimulateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.dex.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValueKCoins",
			Handler:    _Query_ValueKCoins_Handler,
		},
		{
			MethodName: "LiquidityAll",
			Handler:    _Query_LiquidityAll_Handler,
		},
		{
			MethodName: "LiquidityForAddress",
			Handler:    _Query_LiquidityForAddress_Handler,
		},
		{
			MethodName: "Liquidity",
			Handler:    _Query_Liquidity_Handler,
		},
		{
			MethodName: "LiquidityQueue",
			Handler:    _Query_LiquidityQueue_Handler,
		},
		{
			MethodName: "LiquiditySum",
			Handler:    _Query_LiquiditySum_Handler,
		},
		{
			MethodName: "LiquidityPair",
			Handler:    _Query_LiquidityPair_Handler,
		},
		{
			MethodName: "Orders",
			Handler:    _Query_Orders_Handler,
		},
		{
			MethodName: "OrdersAddress",
			Handler:    _Query_OrdersAddress_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Query_Order_Handler,
		},
		{
			MethodName: "OrdersByPair",
			Handler:    _Query_OrdersByPair_Handler,
		},
		{
			MethodName: "OrdersNum",
			Handler:    _Query_OrdersNum_Handler,
		},
		{
			MethodName: "OrdersSum",
			Handler:    _Query_OrdersSum_Handler,
		},
		{
			MethodName: "OrdersDenomSum",
			Handler:    _Query_OrdersDenomSum_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LiquidityPool",
			Handler:    _Query_LiquidityPool_Handler,
		},
		{
			MethodName: "OrderPool",
			Handler:    _Query_OrderPool_Handler,
		},
		{
			MethodName: "Price",
			Handler:    _Query_Price_Handler,
		},
		{
			MethodName: "PriceUsd",
			Handler:    _Query_PriceUsd_Handler,
		},
		{
			MethodName: "ReserveFunds",
			Handler:    _Query_ReserveFunds_Handler,
		},
		{
			MethodName: "ReserveFundsPerDenom",
			Handler:    _Query_ReserveFundsPerDenom_Handler,
		},
		{
			MethodName: "QuerySimulateSell",
			Handler:    _Query_QuerySimulateSell_Handler,
		},
		{
			MethodName: "QuerySimulateBuy",
			Handler:    _Query_QuerySimulateBuy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/dex/query.proto",
}
