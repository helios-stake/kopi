// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kopi/swap/query.proto

package swap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName         = "/kopi.swap.Query/Params"
	Query_KCoinSupply_FullMethodName    = "/kopi.swap.Query/KCoinSupply"
	Query_KCoinsSupplies_FullMethodName = "/kopi.swap.Query/KCoinsSupplies"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of KCoinsSupply items.
	KCoinSupply(ctx context.Context, in *QueryKCoinSupplyRequest, opts ...grpc.CallOption) (*QueryKCoinSupplyResponse, error)
	// Queries a list of KCoinsSupplies items.
	KCoinsSupplies(ctx context.Context, in *QueryKCoinsSuppliesRequest, opts ...grpc.CallOption) (*QueryKCoinsSuppliesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KCoinSupply(ctx context.Context, in *QueryKCoinSupplyRequest, opts ...grpc.CallOption) (*QueryKCoinSupplyResponse, error) {
	out := new(QueryKCoinSupplyResponse)
	err := c.cc.Invoke(ctx, Query_KCoinSupply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KCoinsSupplies(ctx context.Context, in *QueryKCoinsSuppliesRequest, opts ...grpc.CallOption) (*QueryKCoinsSuppliesResponse, error) {
	out := new(QueryKCoinsSuppliesResponse)
	err := c.cc.Invoke(ctx, Query_KCoinsSupplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of KCoinsSupply items.
	KCoinSupply(context.Context, *QueryKCoinSupplyRequest) (*QueryKCoinSupplyResponse, error)
	// Queries a list of KCoinsSupplies items.
	KCoinsSupplies(context.Context, *QueryKCoinsSuppliesRequest) (*QueryKCoinsSuppliesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) KCoinSupply(context.Context, *QueryKCoinSupplyRequest) (*QueryKCoinSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinSupply not implemented")
}
func (UnimplementedQueryServer) KCoinsSupplies(context.Context, *QueryKCoinsSuppliesRequest) (*QueryKCoinsSuppliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinsSupplies not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KCoinSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKCoinSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KCoinSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KCoinSupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KCoinSupply(ctx, req.(*QueryKCoinSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KCoinsSupplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKCoinsSuppliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KCoinsSupplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KCoinsSupplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KCoinsSupplies(ctx, req.(*QueryKCoinsSuppliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.swap.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "KCoinSupply",
			Handler:    _Query_KCoinSupply_Handler,
		},
		{
			MethodName: "KCoinsSupplies",
			Handler:    _Query_KCoinsSupplies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/swap/query.proto",
}
