// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package tokenfactory

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_LiquidityPool                      protoreflect.MessageDescriptor
	fd_LiquidityPool_k_coin               protoreflect.FieldDescriptor
	fd_LiquidityPool_unlock_blocks        protoreflect.FieldDescriptor
	fd_LiquidityPool_pool_fee             protoreflect.FieldDescriptor
	fd_LiquidityPool_factory_denom_amount protoreflect.FieldDescriptor
	fd_LiquidityPool_k_coin_amount        protoreflect.FieldDescriptor
)

func init() {
	file_kopi_tokenfactory_pool_proto_init()
	md_LiquidityPool = File_kopi_tokenfactory_pool_proto.Messages().ByName("LiquidityPool")
	fd_LiquidityPool_k_coin = md_LiquidityPool.Fields().ByName("k_coin")
	fd_LiquidityPool_unlock_blocks = md_LiquidityPool.Fields().ByName("unlock_blocks")
	fd_LiquidityPool_pool_fee = md_LiquidityPool.Fields().ByName("pool_fee")
	fd_LiquidityPool_factory_denom_amount = md_LiquidityPool.Fields().ByName("factory_denom_amount")
	fd_LiquidityPool_k_coin_amount = md_LiquidityPool.Fields().ByName("k_coin_amount")
}

var _ protoreflect.Message = (*fastReflection_LiquidityPool)(nil)

type fastReflection_LiquidityPool LiquidityPool

func (x *LiquidityPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LiquidityPool)(x)
}

func (x *LiquidityPool) slowProtoReflect() protoreflect.Message {
	mi := &file_kopi_tokenfactory_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LiquidityPool_messageType fastReflection_LiquidityPool_messageType
var _ protoreflect.MessageType = fastReflection_LiquidityPool_messageType{}

type fastReflection_LiquidityPool_messageType struct{}

func (x fastReflection_LiquidityPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LiquidityPool)(nil)
}
func (x fastReflection_LiquidityPool_messageType) New() protoreflect.Message {
	return new(fastReflection_LiquidityPool)
}
func (x fastReflection_LiquidityPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidityPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LiquidityPool) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidityPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LiquidityPool) Type() protoreflect.MessageType {
	return _fastReflection_LiquidityPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LiquidityPool) New() protoreflect.Message {
	return new(fastReflection_LiquidityPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LiquidityPool) Interface() protoreflect.ProtoMessage {
	return (*LiquidityPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LiquidityPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.KCoin != "" {
		value := protoreflect.ValueOfString(x.KCoin)
		if !f(fd_LiquidityPool_k_coin, value) {
			return
		}
	}
	if x.UnlockBlocks != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UnlockBlocks)
		if !f(fd_LiquidityPool_unlock_blocks, value) {
			return
		}
	}
	if len(x.PoolFee) != 0 {
		value := protoreflect.ValueOfBytes(x.PoolFee)
		if !f(fd_LiquidityPool_pool_fee, value) {
			return
		}
	}
	if len(x.FactoryDenomAmount) != 0 {
		value := protoreflect.ValueOfBytes(x.FactoryDenomAmount)
		if !f(fd_LiquidityPool_factory_denom_amount, value) {
			return
		}
	}
	if len(x.KCoinAmount) != 0 {
		value := protoreflect.ValueOfBytes(x.KCoinAmount)
		if !f(fd_LiquidityPool_k_coin_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LiquidityPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kopi.tokenfactory.LiquidityPool.k_coin":
		return x.KCoin != ""
	case "kopi.tokenfactory.LiquidityPool.unlock_blocks":
		return x.UnlockBlocks != uint64(0)
	case "kopi.tokenfactory.LiquidityPool.pool_fee":
		return len(x.PoolFee) != 0
	case "kopi.tokenfactory.LiquidityPool.factory_denom_amount":
		return len(x.FactoryDenomAmount) != 0
	case "kopi.tokenfactory.LiquidityPool.k_coin_amount":
		return len(x.KCoinAmount) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.LiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.LiquidityPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kopi.tokenfactory.LiquidityPool.k_coin":
		x.KCoin = ""
	case "kopi.tokenfactory.LiquidityPool.unlock_blocks":
		x.UnlockBlocks = uint64(0)
	case "kopi.tokenfactory.LiquidityPool.pool_fee":
		x.PoolFee = nil
	case "kopi.tokenfactory.LiquidityPool.factory_denom_amount":
		x.FactoryDenomAmount = nil
	case "kopi.tokenfactory.LiquidityPool.k_coin_amount":
		x.KCoinAmount = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.LiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.LiquidityPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LiquidityPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kopi.tokenfactory.LiquidityPool.k_coin":
		value := x.KCoin
		return protoreflect.ValueOfString(value)
	case "kopi.tokenfactory.LiquidityPool.unlock_blocks":
		value := x.UnlockBlocks
		return protoreflect.ValueOfUint64(value)
	case "kopi.tokenfactory.LiquidityPool.pool_fee":
		value := x.PoolFee
		return protoreflect.ValueOfBytes(value)
	case "kopi.tokenfactory.LiquidityPool.factory_denom_amount":
		value := x.FactoryDenomAmount
		return protoreflect.ValueOfBytes(value)
	case "kopi.tokenfactory.LiquidityPool.k_coin_amount":
		value := x.KCoinAmount
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.LiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.LiquidityPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kopi.tokenfactory.LiquidityPool.k_coin":
		x.KCoin = value.Interface().(string)
	case "kopi.tokenfactory.LiquidityPool.unlock_blocks":
		x.UnlockBlocks = value.Uint()
	case "kopi.tokenfactory.LiquidityPool.pool_fee":
		x.PoolFee = value.Bytes()
	case "kopi.tokenfactory.LiquidityPool.factory_denom_amount":
		x.FactoryDenomAmount = value.Bytes()
	case "kopi.tokenfactory.LiquidityPool.k_coin_amount":
		x.KCoinAmount = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.LiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.LiquidityPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kopi.tokenfactory.LiquidityPool.k_coin":
		panic(fmt.Errorf("field k_coin of message kopi.tokenfactory.LiquidityPool is not mutable"))
	case "kopi.tokenfactory.LiquidityPool.unlock_blocks":
		panic(fmt.Errorf("field unlock_blocks of message kopi.tokenfactory.LiquidityPool is not mutable"))
	case "kopi.tokenfactory.LiquidityPool.pool_fee":
		panic(fmt.Errorf("field pool_fee of message kopi.tokenfactory.LiquidityPool is not mutable"))
	case "kopi.tokenfactory.LiquidityPool.factory_denom_amount":
		panic(fmt.Errorf("field factory_denom_amount of message kopi.tokenfactory.LiquidityPool is not mutable"))
	case "kopi.tokenfactory.LiquidityPool.k_coin_amount":
		panic(fmt.Errorf("field k_coin_amount of message kopi.tokenfactory.LiquidityPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.LiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.LiquidityPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LiquidityPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kopi.tokenfactory.LiquidityPool.k_coin":
		return protoreflect.ValueOfString("")
	case "kopi.tokenfactory.LiquidityPool.unlock_blocks":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kopi.tokenfactory.LiquidityPool.pool_fee":
		return protoreflect.ValueOfBytes(nil)
	case "kopi.tokenfactory.LiquidityPool.factory_denom_amount":
		return protoreflect.ValueOfBytes(nil)
	case "kopi.tokenfactory.LiquidityPool.k_coin_amount":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.LiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.LiquidityPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LiquidityPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kopi.tokenfactory.LiquidityPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LiquidityPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LiquidityPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LiquidityPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LiquidityPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.KCoin)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnlockBlocks != 0 {
			n += 1 + runtime.Sov(uint64(x.UnlockBlocks))
		}
		l = len(x.PoolFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FactoryDenomAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KCoinAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LiquidityPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.KCoinAmount) > 0 {
			i -= len(x.KCoinAmount)
			copy(dAtA[i:], x.KCoinAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KCoinAmount)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.FactoryDenomAmount) > 0 {
			i -= len(x.FactoryDenomAmount)
			copy(dAtA[i:], x.FactoryDenomAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FactoryDenomAmount)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PoolFee) > 0 {
			i -= len(x.PoolFee)
			copy(dAtA[i:], x.PoolFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolFee)))
			i--
			dAtA[i] = 0x1a
		}
		if x.UnlockBlocks != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnlockBlocks))
			i--
			dAtA[i] = 0x10
		}
		if len(x.KCoin) > 0 {
			i -= len(x.KCoin)
			copy(dAtA[i:], x.KCoin)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KCoin)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LiquidityPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidityPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KCoin", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KCoin = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnlockBlocks", wireType)
				}
				x.UnlockBlocks = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnlockBlocks |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolFee", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolFee = append(x.PoolFee[:0], dAtA[iNdEx:postIndex]...)
				if x.PoolFee == nil {
					x.PoolFee = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FactoryDenomAmount", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FactoryDenomAmount = append(x.FactoryDenomAmount[:0], dAtA[iNdEx:postIndex]...)
				if x.FactoryDenomAmount == nil {
					x.FactoryDenomAmount = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KCoinAmount", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KCoinAmount = append(x.KCoinAmount[:0], dAtA[iNdEx:postIndex]...)
				if x.KCoinAmount == nil {
					x.KCoinAmount = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_GenesisLiquidityPool_7_list)(nil)

type _GenesisLiquidityPool_7_list struct {
	list *[]*GenesisProviderShare
}

func (x *_GenesisLiquidityPool_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisLiquidityPool_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisLiquidityPool_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*GenesisProviderShare)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisLiquidityPool_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*GenesisProviderShare)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisLiquidityPool_7_list) AppendMutable() protoreflect.Value {
	v := new(GenesisProviderShare)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisLiquidityPool_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisLiquidityPool_7_list) NewElement() protoreflect.Value {
	v := new(GenesisProviderShare)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisLiquidityPool_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisLiquidityPool                      protoreflect.MessageDescriptor
	fd_GenesisLiquidityPool_factory_denom        protoreflect.FieldDescriptor
	fd_GenesisLiquidityPool_k_coin               protoreflect.FieldDescriptor
	fd_GenesisLiquidityPool_unlock_blocks        protoreflect.FieldDescriptor
	fd_GenesisLiquidityPool_pool_fee             protoreflect.FieldDescriptor
	fd_GenesisLiquidityPool_factory_denom_amount protoreflect.FieldDescriptor
	fd_GenesisLiquidityPool_k_coin_amount        protoreflect.FieldDescriptor
	fd_GenesisLiquidityPool_shares               protoreflect.FieldDescriptor
)

func init() {
	file_kopi_tokenfactory_pool_proto_init()
	md_GenesisLiquidityPool = File_kopi_tokenfactory_pool_proto.Messages().ByName("GenesisLiquidityPool")
	fd_GenesisLiquidityPool_factory_denom = md_GenesisLiquidityPool.Fields().ByName("factory_denom")
	fd_GenesisLiquidityPool_k_coin = md_GenesisLiquidityPool.Fields().ByName("k_coin")
	fd_GenesisLiquidityPool_unlock_blocks = md_GenesisLiquidityPool.Fields().ByName("unlock_blocks")
	fd_GenesisLiquidityPool_pool_fee = md_GenesisLiquidityPool.Fields().ByName("pool_fee")
	fd_GenesisLiquidityPool_factory_denom_amount = md_GenesisLiquidityPool.Fields().ByName("factory_denom_amount")
	fd_GenesisLiquidityPool_k_coin_amount = md_GenesisLiquidityPool.Fields().ByName("k_coin_amount")
	fd_GenesisLiquidityPool_shares = md_GenesisLiquidityPool.Fields().ByName("shares")
}

var _ protoreflect.Message = (*fastReflection_GenesisLiquidityPool)(nil)

type fastReflection_GenesisLiquidityPool GenesisLiquidityPool

func (x *GenesisLiquidityPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisLiquidityPool)(x)
}

func (x *GenesisLiquidityPool) slowProtoReflect() protoreflect.Message {
	mi := &file_kopi_tokenfactory_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisLiquidityPool_messageType fastReflection_GenesisLiquidityPool_messageType
var _ protoreflect.MessageType = fastReflection_GenesisLiquidityPool_messageType{}

type fastReflection_GenesisLiquidityPool_messageType struct{}

func (x fastReflection_GenesisLiquidityPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisLiquidityPool)(nil)
}
func (x fastReflection_GenesisLiquidityPool_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisLiquidityPool)
}
func (x fastReflection_GenesisLiquidityPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisLiquidityPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisLiquidityPool) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisLiquidityPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisLiquidityPool) Type() protoreflect.MessageType {
	return _fastReflection_GenesisLiquidityPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisLiquidityPool) New() protoreflect.Message {
	return new(fastReflection_GenesisLiquidityPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisLiquidityPool) Interface() protoreflect.ProtoMessage {
	return (*GenesisLiquidityPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisLiquidityPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FactoryDenom != "" {
		value := protoreflect.ValueOfString(x.FactoryDenom)
		if !f(fd_GenesisLiquidityPool_factory_denom, value) {
			return
		}
	}
	if x.KCoin != "" {
		value := protoreflect.ValueOfString(x.KCoin)
		if !f(fd_GenesisLiquidityPool_k_coin, value) {
			return
		}
	}
	if x.UnlockBlocks != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UnlockBlocks)
		if !f(fd_GenesisLiquidityPool_unlock_blocks, value) {
			return
		}
	}
	if len(x.PoolFee) != 0 {
		value := protoreflect.ValueOfBytes(x.PoolFee)
		if !f(fd_GenesisLiquidityPool_pool_fee, value) {
			return
		}
	}
	if len(x.FactoryDenomAmount) != 0 {
		value := protoreflect.ValueOfBytes(x.FactoryDenomAmount)
		if !f(fd_GenesisLiquidityPool_factory_denom_amount, value) {
			return
		}
	}
	if len(x.KCoinAmount) != 0 {
		value := protoreflect.ValueOfBytes(x.KCoinAmount)
		if !f(fd_GenesisLiquidityPool_k_coin_amount, value) {
			return
		}
	}
	if len(x.Shares) != 0 {
		value := protoreflect.ValueOfList(&_GenesisLiquidityPool_7_list{list: &x.Shares})
		if !f(fd_GenesisLiquidityPool_shares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisLiquidityPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom":
		return x.FactoryDenom != ""
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin":
		return x.KCoin != ""
	case "kopi.tokenfactory.GenesisLiquidityPool.unlock_blocks":
		return x.UnlockBlocks != uint64(0)
	case "kopi.tokenfactory.GenesisLiquidityPool.pool_fee":
		return len(x.PoolFee) != 0
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom_amount":
		return len(x.FactoryDenomAmount) != 0
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin_amount":
		return len(x.KCoinAmount) != 0
	case "kopi.tokenfactory.GenesisLiquidityPool.shares":
		return len(x.Shares) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisLiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisLiquidityPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisLiquidityPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom":
		x.FactoryDenom = ""
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin":
		x.KCoin = ""
	case "kopi.tokenfactory.GenesisLiquidityPool.unlock_blocks":
		x.UnlockBlocks = uint64(0)
	case "kopi.tokenfactory.GenesisLiquidityPool.pool_fee":
		x.PoolFee = nil
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom_amount":
		x.FactoryDenomAmount = nil
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin_amount":
		x.KCoinAmount = nil
	case "kopi.tokenfactory.GenesisLiquidityPool.shares":
		x.Shares = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisLiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisLiquidityPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisLiquidityPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom":
		value := x.FactoryDenom
		return protoreflect.ValueOfString(value)
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin":
		value := x.KCoin
		return protoreflect.ValueOfString(value)
	case "kopi.tokenfactory.GenesisLiquidityPool.unlock_blocks":
		value := x.UnlockBlocks
		return protoreflect.ValueOfUint64(value)
	case "kopi.tokenfactory.GenesisLiquidityPool.pool_fee":
		value := x.PoolFee
		return protoreflect.ValueOfBytes(value)
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom_amount":
		value := x.FactoryDenomAmount
		return protoreflect.ValueOfBytes(value)
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin_amount":
		value := x.KCoinAmount
		return protoreflect.ValueOfBytes(value)
	case "kopi.tokenfactory.GenesisLiquidityPool.shares":
		if len(x.Shares) == 0 {
			return protoreflect.ValueOfList(&_GenesisLiquidityPool_7_list{})
		}
		listValue := &_GenesisLiquidityPool_7_list{list: &x.Shares}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisLiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisLiquidityPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisLiquidityPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom":
		x.FactoryDenom = value.Interface().(string)
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin":
		x.KCoin = value.Interface().(string)
	case "kopi.tokenfactory.GenesisLiquidityPool.unlock_blocks":
		x.UnlockBlocks = value.Uint()
	case "kopi.tokenfactory.GenesisLiquidityPool.pool_fee":
		x.PoolFee = value.Bytes()
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom_amount":
		x.FactoryDenomAmount = value.Bytes()
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin_amount":
		x.KCoinAmount = value.Bytes()
	case "kopi.tokenfactory.GenesisLiquidityPool.shares":
		lv := value.List()
		clv := lv.(*_GenesisLiquidityPool_7_list)
		x.Shares = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisLiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisLiquidityPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisLiquidityPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisLiquidityPool.shares":
		if x.Shares == nil {
			x.Shares = []*GenesisProviderShare{}
		}
		value := &_GenesisLiquidityPool_7_list{list: &x.Shares}
		return protoreflect.ValueOfList(value)
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom":
		panic(fmt.Errorf("field factory_denom of message kopi.tokenfactory.GenesisLiquidityPool is not mutable"))
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin":
		panic(fmt.Errorf("field k_coin of message kopi.tokenfactory.GenesisLiquidityPool is not mutable"))
	case "kopi.tokenfactory.GenesisLiquidityPool.unlock_blocks":
		panic(fmt.Errorf("field unlock_blocks of message kopi.tokenfactory.GenesisLiquidityPool is not mutable"))
	case "kopi.tokenfactory.GenesisLiquidityPool.pool_fee":
		panic(fmt.Errorf("field pool_fee of message kopi.tokenfactory.GenesisLiquidityPool is not mutable"))
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom_amount":
		panic(fmt.Errorf("field factory_denom_amount of message kopi.tokenfactory.GenesisLiquidityPool is not mutable"))
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin_amount":
		panic(fmt.Errorf("field k_coin_amount of message kopi.tokenfactory.GenesisLiquidityPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisLiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisLiquidityPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisLiquidityPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom":
		return protoreflect.ValueOfString("")
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin":
		return protoreflect.ValueOfString("")
	case "kopi.tokenfactory.GenesisLiquidityPool.unlock_blocks":
		return protoreflect.ValueOfUint64(uint64(0))
	case "kopi.tokenfactory.GenesisLiquidityPool.pool_fee":
		return protoreflect.ValueOfBytes(nil)
	case "kopi.tokenfactory.GenesisLiquidityPool.factory_denom_amount":
		return protoreflect.ValueOfBytes(nil)
	case "kopi.tokenfactory.GenesisLiquidityPool.k_coin_amount":
		return protoreflect.ValueOfBytes(nil)
	case "kopi.tokenfactory.GenesisLiquidityPool.shares":
		list := []*GenesisProviderShare{}
		return protoreflect.ValueOfList(&_GenesisLiquidityPool_7_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisLiquidityPool"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisLiquidityPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisLiquidityPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kopi.tokenfactory.GenesisLiquidityPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisLiquidityPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisLiquidityPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisLiquidityPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisLiquidityPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisLiquidityPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.FactoryDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KCoin)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnlockBlocks != 0 {
			n += 1 + runtime.Sov(uint64(x.UnlockBlocks))
		}
		l = len(x.PoolFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FactoryDenomAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KCoinAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Shares) > 0 {
			for _, e := range x.Shares {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisLiquidityPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Shares) > 0 {
			for iNdEx := len(x.Shares) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Shares[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.KCoinAmount) > 0 {
			i -= len(x.KCoinAmount)
			copy(dAtA[i:], x.KCoinAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KCoinAmount)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.FactoryDenomAmount) > 0 {
			i -= len(x.FactoryDenomAmount)
			copy(dAtA[i:], x.FactoryDenomAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FactoryDenomAmount)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.PoolFee) > 0 {
			i -= len(x.PoolFee)
			copy(dAtA[i:], x.PoolFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolFee)))
			i--
			dAtA[i] = 0x22
		}
		if x.UnlockBlocks != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnlockBlocks))
			i--
			dAtA[i] = 0x18
		}
		if len(x.KCoin) > 0 {
			i -= len(x.KCoin)
			copy(dAtA[i:], x.KCoin)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KCoin)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.FactoryDenom) > 0 {
			i -= len(x.FactoryDenom)
			copy(dAtA[i:], x.FactoryDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FactoryDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisLiquidityPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisLiquidityPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FactoryDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FactoryDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KCoin", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KCoin = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnlockBlocks", wireType)
				}
				x.UnlockBlocks = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnlockBlocks |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolFee", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolFee = append(x.PoolFee[:0], dAtA[iNdEx:postIndex]...)
				if x.PoolFee == nil {
					x.PoolFee = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FactoryDenomAmount", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FactoryDenomAmount = append(x.FactoryDenomAmount[:0], dAtA[iNdEx:postIndex]...)
				if x.FactoryDenomAmount == nil {
					x.FactoryDenomAmount = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KCoinAmount", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KCoinAmount = append(x.KCoinAmount[:0], dAtA[iNdEx:postIndex]...)
				if x.KCoinAmount == nil {
					x.KCoinAmount = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Shares = append(x.Shares, &GenesisProviderShare{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Shares[len(x.Shares)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ProviderShare       protoreflect.MessageDescriptor
	fd_ProviderShare_share protoreflect.FieldDescriptor
)

func init() {
	file_kopi_tokenfactory_pool_proto_init()
	md_ProviderShare = File_kopi_tokenfactory_pool_proto.Messages().ByName("ProviderShare")
	fd_ProviderShare_share = md_ProviderShare.Fields().ByName("share")
}

var _ protoreflect.Message = (*fastReflection_ProviderShare)(nil)

type fastReflection_ProviderShare ProviderShare

func (x *ProviderShare) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ProviderShare)(x)
}

func (x *ProviderShare) slowProtoReflect() protoreflect.Message {
	mi := &file_kopi_tokenfactory_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ProviderShare_messageType fastReflection_ProviderShare_messageType
var _ protoreflect.MessageType = fastReflection_ProviderShare_messageType{}

type fastReflection_ProviderShare_messageType struct{}

func (x fastReflection_ProviderShare_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ProviderShare)(nil)
}
func (x fastReflection_ProviderShare_messageType) New() protoreflect.Message {
	return new(fastReflection_ProviderShare)
}
func (x fastReflection_ProviderShare_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ProviderShare
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ProviderShare) Descriptor() protoreflect.MessageDescriptor {
	return md_ProviderShare
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ProviderShare) Type() protoreflect.MessageType {
	return _fastReflection_ProviderShare_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ProviderShare) New() protoreflect.Message {
	return new(fastReflection_ProviderShare)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ProviderShare) Interface() protoreflect.ProtoMessage {
	return (*ProviderShare)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ProviderShare) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Share) != 0 {
		value := protoreflect.ValueOfBytes(x.Share)
		if !f(fd_ProviderShare_share, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ProviderShare) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kopi.tokenfactory.ProviderShare.share":
		return len(x.Share) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.ProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.ProviderShare does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProviderShare) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kopi.tokenfactory.ProviderShare.share":
		x.Share = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.ProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.ProviderShare does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ProviderShare) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kopi.tokenfactory.ProviderShare.share":
		value := x.Share
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.ProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.ProviderShare does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProviderShare) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kopi.tokenfactory.ProviderShare.share":
		x.Share = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.ProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.ProviderShare does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProviderShare) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kopi.tokenfactory.ProviderShare.share":
		panic(fmt.Errorf("field share of message kopi.tokenfactory.ProviderShare is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.ProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.ProviderShare does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ProviderShare) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kopi.tokenfactory.ProviderShare.share":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.ProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.ProviderShare does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ProviderShare) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kopi.tokenfactory.ProviderShare", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ProviderShare) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProviderShare) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ProviderShare) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ProviderShare) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ProviderShare)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Share)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ProviderShare)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Share) > 0 {
			i -= len(x.Share)
			copy(dAtA[i:], x.Share)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Share)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ProviderShare)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProviderShare: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProviderShare: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Share = append(x.Share[:0], dAtA[iNdEx:postIndex]...)
				if x.Share == nil {
					x.Share = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GenesisProviderShare         protoreflect.MessageDescriptor
	fd_GenesisProviderShare_address protoreflect.FieldDescriptor
	fd_GenesisProviderShare_share   protoreflect.FieldDescriptor
)

func init() {
	file_kopi_tokenfactory_pool_proto_init()
	md_GenesisProviderShare = File_kopi_tokenfactory_pool_proto.Messages().ByName("GenesisProviderShare")
	fd_GenesisProviderShare_address = md_GenesisProviderShare.Fields().ByName("address")
	fd_GenesisProviderShare_share = md_GenesisProviderShare.Fields().ByName("share")
}

var _ protoreflect.Message = (*fastReflection_GenesisProviderShare)(nil)

type fastReflection_GenesisProviderShare GenesisProviderShare

func (x *GenesisProviderShare) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisProviderShare)(x)
}

func (x *GenesisProviderShare) slowProtoReflect() protoreflect.Message {
	mi := &file_kopi_tokenfactory_pool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisProviderShare_messageType fastReflection_GenesisProviderShare_messageType
var _ protoreflect.MessageType = fastReflection_GenesisProviderShare_messageType{}

type fastReflection_GenesisProviderShare_messageType struct{}

func (x fastReflection_GenesisProviderShare_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisProviderShare)(nil)
}
func (x fastReflection_GenesisProviderShare_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisProviderShare)
}
func (x fastReflection_GenesisProviderShare_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisProviderShare
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisProviderShare) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisProviderShare
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisProviderShare) Type() protoreflect.MessageType {
	return _fastReflection_GenesisProviderShare_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisProviderShare) New() protoreflect.Message {
	return new(fastReflection_GenesisProviderShare)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisProviderShare) Interface() protoreflect.ProtoMessage {
	return (*GenesisProviderShare)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisProviderShare) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_GenesisProviderShare_address, value) {
			return
		}
	}
	if len(x.Share) != 0 {
		value := protoreflect.ValueOfBytes(x.Share)
		if !f(fd_GenesisProviderShare_share, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisProviderShare) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisProviderShare.address":
		return x.Address != ""
	case "kopi.tokenfactory.GenesisProviderShare.share":
		return len(x.Share) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisProviderShare does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisProviderShare) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisProviderShare.address":
		x.Address = ""
	case "kopi.tokenfactory.GenesisProviderShare.share":
		x.Share = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisProviderShare does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisProviderShare) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "kopi.tokenfactory.GenesisProviderShare.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "kopi.tokenfactory.GenesisProviderShare.share":
		value := x.Share
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisProviderShare does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisProviderShare) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisProviderShare.address":
		x.Address = value.Interface().(string)
	case "kopi.tokenfactory.GenesisProviderShare.share":
		x.Share = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisProviderShare does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisProviderShare) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisProviderShare.address":
		panic(fmt.Errorf("field address of message kopi.tokenfactory.GenesisProviderShare is not mutable"))
	case "kopi.tokenfactory.GenesisProviderShare.share":
		panic(fmt.Errorf("field share of message kopi.tokenfactory.GenesisProviderShare is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisProviderShare does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisProviderShare) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "kopi.tokenfactory.GenesisProviderShare.address":
		return protoreflect.ValueOfString("")
	case "kopi.tokenfactory.GenesisProviderShare.share":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: kopi.tokenfactory.GenesisProviderShare"))
		}
		panic(fmt.Errorf("message kopi.tokenfactory.GenesisProviderShare does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisProviderShare) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in kopi.tokenfactory.GenesisProviderShare", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisProviderShare) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisProviderShare) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisProviderShare) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisProviderShare) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisProviderShare)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Share)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisProviderShare)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Share) > 0 {
			i -= len(x.Share)
			copy(dAtA[i:], x.Share)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Share)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisProviderShare)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisProviderShare: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisProviderShare: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Share = append(x.Share[:0], dAtA[iNdEx:postIndex]...)
				if x.Share == nil {
					x.Share = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: kopi/tokenfactory/pool.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LiquidityPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KCoin              string `protobuf:"bytes,1,opt,name=k_coin,json=kCoin,proto3" json:"k_coin,omitempty"`
	UnlockBlocks       uint64 `protobuf:"varint,2,opt,name=unlock_blocks,json=unlockBlocks,proto3" json:"unlock_blocks,omitempty"`
	PoolFee            []byte `protobuf:"bytes,3,opt,name=pool_fee,json=poolFee,proto3" json:"pool_fee,omitempty"`
	FactoryDenomAmount []byte `protobuf:"bytes,4,opt,name=factory_denom_amount,json=factoryDenomAmount,proto3" json:"factory_denom_amount,omitempty"`
	KCoinAmount        []byte `protobuf:"bytes,5,opt,name=k_coin_amount,json=kCoinAmount,proto3" json:"k_coin_amount,omitempty"`
}

func (x *LiquidityPool) Reset() {
	*x = LiquidityPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kopi_tokenfactory_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPool) ProtoMessage() {}

// Deprecated: Use LiquidityPool.ProtoReflect.Descriptor instead.
func (*LiquidityPool) Descriptor() ([]byte, []int) {
	return file_kopi_tokenfactory_pool_proto_rawDescGZIP(), []int{0}
}

func (x *LiquidityPool) GetKCoin() string {
	if x != nil {
		return x.KCoin
	}
	return ""
}

func (x *LiquidityPool) GetUnlockBlocks() uint64 {
	if x != nil {
		return x.UnlockBlocks
	}
	return 0
}

func (x *LiquidityPool) GetPoolFee() []byte {
	if x != nil {
		return x.PoolFee
	}
	return nil
}

func (x *LiquidityPool) GetFactoryDenomAmount() []byte {
	if x != nil {
		return x.FactoryDenomAmount
	}
	return nil
}

func (x *LiquidityPool) GetKCoinAmount() []byte {
	if x != nil {
		return x.KCoinAmount
	}
	return nil
}

type GenesisLiquidityPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactoryDenom       string                  `protobuf:"bytes,1,opt,name=factory_denom,json=factoryDenom,proto3" json:"factory_denom,omitempty"`
	KCoin              string                  `protobuf:"bytes,2,opt,name=k_coin,json=kCoin,proto3" json:"k_coin,omitempty"`
	UnlockBlocks       uint64                  `protobuf:"varint,3,opt,name=unlock_blocks,json=unlockBlocks,proto3" json:"unlock_blocks,omitempty"`
	PoolFee            []byte                  `protobuf:"bytes,4,opt,name=pool_fee,json=poolFee,proto3" json:"pool_fee,omitempty"`
	FactoryDenomAmount []byte                  `protobuf:"bytes,5,opt,name=factory_denom_amount,json=factoryDenomAmount,proto3" json:"factory_denom_amount,omitempty"`
	KCoinAmount        []byte                  `protobuf:"bytes,6,opt,name=k_coin_amount,json=kCoinAmount,proto3" json:"k_coin_amount,omitempty"`
	Shares             []*GenesisProviderShare `protobuf:"bytes,7,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *GenesisLiquidityPool) Reset() {
	*x = GenesisLiquidityPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kopi_tokenfactory_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisLiquidityPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisLiquidityPool) ProtoMessage() {}

// Deprecated: Use GenesisLiquidityPool.ProtoReflect.Descriptor instead.
func (*GenesisLiquidityPool) Descriptor() ([]byte, []int) {
	return file_kopi_tokenfactory_pool_proto_rawDescGZIP(), []int{1}
}

func (x *GenesisLiquidityPool) GetFactoryDenom() string {
	if x != nil {
		return x.FactoryDenom
	}
	return ""
}

func (x *GenesisLiquidityPool) GetKCoin() string {
	if x != nil {
		return x.KCoin
	}
	return ""
}

func (x *GenesisLiquidityPool) GetUnlockBlocks() uint64 {
	if x != nil {
		return x.UnlockBlocks
	}
	return 0
}

func (x *GenesisLiquidityPool) GetPoolFee() []byte {
	if x != nil {
		return x.PoolFee
	}
	return nil
}

func (x *GenesisLiquidityPool) GetFactoryDenomAmount() []byte {
	if x != nil {
		return x.FactoryDenomAmount
	}
	return nil
}

func (x *GenesisLiquidityPool) GetKCoinAmount() []byte {
	if x != nil {
		return x.KCoinAmount
	}
	return nil
}

func (x *GenesisLiquidityPool) GetShares() []*GenesisProviderShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

type ProviderShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Share []byte `protobuf:"bytes,1,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *ProviderShare) Reset() {
	*x = ProviderShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kopi_tokenfactory_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderShare) ProtoMessage() {}

// Deprecated: Use ProviderShare.ProtoReflect.Descriptor instead.
func (*ProviderShare) Descriptor() ([]byte, []int) {
	return file_kopi_tokenfactory_pool_proto_rawDescGZIP(), []int{2}
}

func (x *ProviderShare) GetShare() []byte {
	if x != nil {
		return x.Share
	}
	return nil
}

type GenesisProviderShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Share   []byte `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *GenesisProviderShare) Reset() {
	*x = GenesisProviderShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kopi_tokenfactory_pool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisProviderShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisProviderShare) ProtoMessage() {}

// Deprecated: Use GenesisProviderShare.ProtoReflect.Descriptor instead.
func (*GenesisProviderShare) Descriptor() ([]byte, []int) {
	return file_kopi_tokenfactory_pool_proto_rawDescGZIP(), []int{3}
}

func (x *GenesisProviderShare) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GenesisProviderShare) GetShare() []byte {
	if x != nil {
		return x.Share
	}
	return nil
}

var File_kopi_tokenfactory_pool_proto protoreflect.FileDescriptor

var file_kopi_tokenfactory_pool_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6b, 0x6f, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6b, 0x6f, 0x70, 0x69, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x6b, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1d, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x6b, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x14, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x46, 0x65, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x6b, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1d, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x6b, 0x43, 0x6f, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x70, 0x69, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x22, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x42, 0xab, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x6f, 0x70, 0x69, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x09, 0x50, 0x6f, 0x6f,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x6f, 0x70, 0x69, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0xa2, 0x02, 0x03, 0x4b,
	0x54, 0x58, 0xaa, 0x02, 0x11, 0x4b, 0x6f, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0xca, 0x02, 0x11, 0x4b, 0x6f, 0x70, 0x69, 0x5c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0xe2, 0x02, 0x1d, 0x4b, 0x6f, 0x70,
	0x69, 0x5c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x4b, 0x6f, 0x70,
	0x69, 0x3a, 0x3a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kopi_tokenfactory_pool_proto_rawDescOnce sync.Once
	file_kopi_tokenfactory_pool_proto_rawDescData = file_kopi_tokenfactory_pool_proto_rawDesc
)

func file_kopi_tokenfactory_pool_proto_rawDescGZIP() []byte {
	file_kopi_tokenfactory_pool_proto_rawDescOnce.Do(func() {
		file_kopi_tokenfactory_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_kopi_tokenfactory_pool_proto_rawDescData)
	})
	return file_kopi_tokenfactory_pool_proto_rawDescData
}

var file_kopi_tokenfactory_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kopi_tokenfactory_pool_proto_goTypes = []interface{}{
	(*LiquidityPool)(nil),        // 0: kopi.tokenfactory.LiquidityPool
	(*GenesisLiquidityPool)(nil), // 1: kopi.tokenfactory.GenesisLiquidityPool
	(*ProviderShare)(nil),        // 2: kopi.tokenfactory.ProviderShare
	(*GenesisProviderShare)(nil), // 3: kopi.tokenfactory.GenesisProviderShare
}
var file_kopi_tokenfactory_pool_proto_depIdxs = []int32{
	3, // 0: kopi.tokenfactory.GenesisLiquidityPool.shares:type_name -> kopi.tokenfactory.GenesisProviderShare
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kopi_tokenfactory_pool_proto_init() }
func file_kopi_tokenfactory_pool_proto_init() {
	if File_kopi_tokenfactory_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kopi_tokenfactory_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kopi_tokenfactory_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisLiquidityPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kopi_tokenfactory_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kopi_tokenfactory_pool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisProviderShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kopi_tokenfactory_pool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kopi_tokenfactory_pool_proto_goTypes,
		DependencyIndexes: file_kopi_tokenfactory_pool_proto_depIdxs,
		MessageInfos:      file_kopi_tokenfactory_pool_proto_msgTypes,
	}.Build()
	File_kopi_tokenfactory_pool_proto = out.File
	file_kopi_tokenfactory_pool_proto_rawDesc = nil
	file_kopi_tokenfactory_pool_proto_goTypes = nil
	file_kopi_tokenfactory_pool_proto_depIdxs = nil
}
