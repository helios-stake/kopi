// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/denominations/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{0}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgDexAddDenom struct {
	Authority    string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Factor       string `protobuf:"bytes,3,opt,name=factor,proto3" json:"factor,omitempty"`
	MinLiquidity string `protobuf:"bytes,4,opt,name=min_liquidity,json=minLiquidity,proto3" json:"min_liquidity,omitempty"`
	MinOrderSize string `protobuf:"bytes,5,opt,name=min_order_size,json=minOrderSize,proto3" json:"min_order_size,omitempty"`
	Exponent     uint64 `protobuf:"varint,6,opt,name=exponent,proto3" json:"exponent,omitempty"`
}

func (m *MsgDexAddDenom) Reset()         { *m = MsgDexAddDenom{} }
func (m *MsgDexAddDenom) String() string { return proto.CompactTextString(m) }
func (*MsgDexAddDenom) ProtoMessage()    {}
func (*MsgDexAddDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{1}
}
func (m *MsgDexAddDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDexAddDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDexAddDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDexAddDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDexAddDenom.Merge(m, src)
}
func (m *MsgDexAddDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgDexAddDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDexAddDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDexAddDenom proto.InternalMessageInfo

func (m *MsgDexAddDenom) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgDexAddDenom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgDexAddDenom) GetFactor() string {
	if m != nil {
		return m.Factor
	}
	return ""
}

func (m *MsgDexAddDenom) GetMinLiquidity() string {
	if m != nil {
		return m.MinLiquidity
	}
	return ""
}

func (m *MsgDexAddDenom) GetMinOrderSize() string {
	if m != nil {
		return m.MinOrderSize
	}
	return ""
}

func (m *MsgDexAddDenom) GetExponent() uint64 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

type MsgDexUpdateMinimumLiquidity struct {
	Authority    string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinLiquidity string `protobuf:"bytes,3,opt,name=min_liquidity,json=minLiquidity,proto3" json:"min_liquidity,omitempty"`
}

func (m *MsgDexUpdateMinimumLiquidity) Reset()         { *m = MsgDexUpdateMinimumLiquidity{} }
func (m *MsgDexUpdateMinimumLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgDexUpdateMinimumLiquidity) ProtoMessage()    {}
func (*MsgDexUpdateMinimumLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{2}
}
func (m *MsgDexUpdateMinimumLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDexUpdateMinimumLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDexUpdateMinimumLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDexUpdateMinimumLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDexUpdateMinimumLiquidity.Merge(m, src)
}
func (m *MsgDexUpdateMinimumLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgDexUpdateMinimumLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDexUpdateMinimumLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDexUpdateMinimumLiquidity proto.InternalMessageInfo

func (m *MsgDexUpdateMinimumLiquidity) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgDexUpdateMinimumLiquidity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgDexUpdateMinimumLiquidity) GetMinLiquidity() string {
	if m != nil {
		return m.MinLiquidity
	}
	return ""
}

type MsgDexUpdateMinimumOrderSize struct {
	Authority    string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinOrderSize string `protobuf:"bytes,3,opt,name=min_order_size,json=minOrderSize,proto3" json:"min_order_size,omitempty"`
}

func (m *MsgDexUpdateMinimumOrderSize) Reset()         { *m = MsgDexUpdateMinimumOrderSize{} }
func (m *MsgDexUpdateMinimumOrderSize) String() string { return proto.CompactTextString(m) }
func (*MsgDexUpdateMinimumOrderSize) ProtoMessage()    {}
func (*MsgDexUpdateMinimumOrderSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{3}
}
func (m *MsgDexUpdateMinimumOrderSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDexUpdateMinimumOrderSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDexUpdateMinimumOrderSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDexUpdateMinimumOrderSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDexUpdateMinimumOrderSize.Merge(m, src)
}
func (m *MsgDexUpdateMinimumOrderSize) XXX_Size() int {
	return m.Size()
}
func (m *MsgDexUpdateMinimumOrderSize) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDexUpdateMinimumOrderSize.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDexUpdateMinimumOrderSize proto.InternalMessageInfo

func (m *MsgDexUpdateMinimumOrderSize) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgDexUpdateMinimumOrderSize) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgDexUpdateMinimumOrderSize) GetMinOrderSize() string {
	if m != nil {
		return m.MinOrderSize
	}
	return ""
}

type MsgKCoinAddDenom struct {
	Authority     string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	References    []string `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
	MaxSupply     string   `protobuf:"bytes,4,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	MaxMintAmount string   `protobuf:"bytes,5,opt,name=max_mint_amount,json=maxMintAmount,proto3" json:"max_mint_amount,omitempty"`
	MaxBurnAmount string   `protobuf:"bytes,6,opt,name=max_burn_amount,json=maxBurnAmount,proto3" json:"max_burn_amount,omitempty"`
	Factor        string   `protobuf:"bytes,7,opt,name=factor,proto3" json:"factor,omitempty"`
	MinLiquidity  string   `protobuf:"bytes,8,opt,name=min_liquidity,json=minLiquidity,proto3" json:"min_liquidity,omitempty"`
	MinOrderSize  string   `protobuf:"bytes,9,opt,name=min_order_size,json=minOrderSize,proto3" json:"min_order_size,omitempty"`
}

func (m *MsgKCoinAddDenom) Reset()         { *m = MsgKCoinAddDenom{} }
func (m *MsgKCoinAddDenom) String() string { return proto.CompactTextString(m) }
func (*MsgKCoinAddDenom) ProtoMessage()    {}
func (*MsgKCoinAddDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{4}
}
func (m *MsgKCoinAddDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKCoinAddDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKCoinAddDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKCoinAddDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKCoinAddDenom.Merge(m, src)
}
func (m *MsgKCoinAddDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgKCoinAddDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKCoinAddDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKCoinAddDenom proto.InternalMessageInfo

func (m *MsgKCoinAddDenom) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgKCoinAddDenom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgKCoinAddDenom) GetReferences() []string {
	if m != nil {
		return m.References
	}
	return nil
}

func (m *MsgKCoinAddDenom) GetMaxSupply() string {
	if m != nil {
		return m.MaxSupply
	}
	return ""
}

func (m *MsgKCoinAddDenom) GetMaxMintAmount() string {
	if m != nil {
		return m.MaxMintAmount
	}
	return ""
}

func (m *MsgKCoinAddDenom) GetMaxBurnAmount() string {
	if m != nil {
		return m.MaxBurnAmount
	}
	return ""
}

func (m *MsgKCoinAddDenom) GetFactor() string {
	if m != nil {
		return m.Factor
	}
	return ""
}

func (m *MsgKCoinAddDenom) GetMinLiquidity() string {
	if m != nil {
		return m.MinLiquidity
	}
	return ""
}

func (m *MsgKCoinAddDenom) GetMinOrderSize() string {
	if m != nil {
		return m.MinOrderSize
	}
	return ""
}

type MsgKCoinUpdateSupplyLimit struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom     string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	MaxSupply string `protobuf:"bytes,3,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
}

func (m *MsgKCoinUpdateSupplyLimit) Reset()         { *m = MsgKCoinUpdateSupplyLimit{} }
func (m *MsgKCoinUpdateSupplyLimit) String() string { return proto.CompactTextString(m) }
func (*MsgKCoinUpdateSupplyLimit) ProtoMessage()    {}
func (*MsgKCoinUpdateSupplyLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{5}
}
func (m *MsgKCoinUpdateSupplyLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKCoinUpdateSupplyLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKCoinUpdateSupplyLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKCoinUpdateSupplyLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKCoinUpdateSupplyLimit.Merge(m, src)
}
func (m *MsgKCoinUpdateSupplyLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgKCoinUpdateSupplyLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKCoinUpdateSupplyLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKCoinUpdateSupplyLimit proto.InternalMessageInfo

func (m *MsgKCoinUpdateSupplyLimit) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgKCoinUpdateSupplyLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgKCoinUpdateSupplyLimit) GetMaxSupply() string {
	if m != nil {
		return m.MaxSupply
	}
	return ""
}

type MsgKCoinUpdateBurnAmount struct {
	Authority     string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom         string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	MaxBurnAmount string `protobuf:"bytes,3,opt,name=max_burn_amount,json=maxBurnAmount,proto3" json:"max_burn_amount,omitempty"`
}

func (m *MsgKCoinUpdateBurnAmount) Reset()         { *m = MsgKCoinUpdateBurnAmount{} }
func (m *MsgKCoinUpdateBurnAmount) String() string { return proto.CompactTextString(m) }
func (*MsgKCoinUpdateBurnAmount) ProtoMessage()    {}
func (*MsgKCoinUpdateBurnAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{6}
}
func (m *MsgKCoinUpdateBurnAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKCoinUpdateBurnAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKCoinUpdateBurnAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKCoinUpdateBurnAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKCoinUpdateBurnAmount.Merge(m, src)
}
func (m *MsgKCoinUpdateBurnAmount) XXX_Size() int {
	return m.Size()
}
func (m *MsgKCoinUpdateBurnAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKCoinUpdateBurnAmount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKCoinUpdateBurnAmount proto.InternalMessageInfo

func (m *MsgKCoinUpdateBurnAmount) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgKCoinUpdateBurnAmount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgKCoinUpdateBurnAmount) GetMaxBurnAmount() string {
	if m != nil {
		return m.MaxBurnAmount
	}
	return ""
}

type MsgKCoinUpdateMintAmount struct {
	Authority     string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom         string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	MaxMintAmount string `protobuf:"bytes,3,opt,name=max_mint_amount,json=maxMintAmount,proto3" json:"max_mint_amount,omitempty"`
}

func (m *MsgKCoinUpdateMintAmount) Reset()         { *m = MsgKCoinUpdateMintAmount{} }
func (m *MsgKCoinUpdateMintAmount) String() string { return proto.CompactTextString(m) }
func (*MsgKCoinUpdateMintAmount) ProtoMessage()    {}
func (*MsgKCoinUpdateMintAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{7}
}
func (m *MsgKCoinUpdateMintAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKCoinUpdateMintAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKCoinUpdateMintAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKCoinUpdateMintAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKCoinUpdateMintAmount.Merge(m, src)
}
func (m *MsgKCoinUpdateMintAmount) XXX_Size() int {
	return m.Size()
}
func (m *MsgKCoinUpdateMintAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKCoinUpdateMintAmount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKCoinUpdateMintAmount proto.InternalMessageInfo

func (m *MsgKCoinUpdateMintAmount) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgKCoinUpdateMintAmount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgKCoinUpdateMintAmount) GetMaxMintAmount() string {
	if m != nil {
		return m.MaxMintAmount
	}
	return ""
}

type MsgKCoinAddReferences struct {
	Authority  string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom      string   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	References []string `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
}

func (m *MsgKCoinAddReferences) Reset()         { *m = MsgKCoinAddReferences{} }
func (m *MsgKCoinAddReferences) String() string { return proto.CompactTextString(m) }
func (*MsgKCoinAddReferences) ProtoMessage()    {}
func (*MsgKCoinAddReferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{8}
}
func (m *MsgKCoinAddReferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKCoinAddReferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKCoinAddReferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKCoinAddReferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKCoinAddReferences.Merge(m, src)
}
func (m *MsgKCoinAddReferences) XXX_Size() int {
	return m.Size()
}
func (m *MsgKCoinAddReferences) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKCoinAddReferences.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKCoinAddReferences proto.InternalMessageInfo

func (m *MsgKCoinAddReferences) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgKCoinAddReferences) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgKCoinAddReferences) GetReferences() []string {
	if m != nil {
		return m.References
	}
	return nil
}

type MsgKCoinRemoveReferences struct {
	Authority  string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom      string   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	References []string `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
}

func (m *MsgKCoinRemoveReferences) Reset()         { *m = MsgKCoinRemoveReferences{} }
func (m *MsgKCoinRemoveReferences) String() string { return proto.CompactTextString(m) }
func (*MsgKCoinRemoveReferences) ProtoMessage()    {}
func (*MsgKCoinRemoveReferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{9}
}
func (m *MsgKCoinRemoveReferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKCoinRemoveReferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKCoinRemoveReferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKCoinRemoveReferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKCoinRemoveReferences.Merge(m, src)
}
func (m *MsgKCoinRemoveReferences) XXX_Size() int {
	return m.Size()
}
func (m *MsgKCoinRemoveReferences) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKCoinRemoveReferences.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKCoinRemoveReferences proto.InternalMessageInfo

func (m *MsgKCoinRemoveReferences) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgKCoinRemoveReferences) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgKCoinRemoveReferences) GetReferences() []string {
	if m != nil {
		return m.References
	}
	return nil
}

type MsgCollateralAddDenom struct {
	Authority  string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom      string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Ltv        string `protobuf:"bytes,3,opt,name=ltv,proto3" json:"ltv,omitempty"`
	MaxDeposit string `protobuf:"bytes,4,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
}

func (m *MsgCollateralAddDenom) Reset()         { *m = MsgCollateralAddDenom{} }
func (m *MsgCollateralAddDenom) String() string { return proto.CompactTextString(m) }
func (*MsgCollateralAddDenom) ProtoMessage()    {}
func (*MsgCollateralAddDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{10}
}
func (m *MsgCollateralAddDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCollateralAddDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCollateralAddDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCollateralAddDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCollateralAddDenom.Merge(m, src)
}
func (m *MsgCollateralAddDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgCollateralAddDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCollateralAddDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCollateralAddDenom proto.InternalMessageInfo

func (m *MsgCollateralAddDenom) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCollateralAddDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCollateralAddDenom) GetLtv() string {
	if m != nil {
		return m.Ltv
	}
	return ""
}

func (m *MsgCollateralAddDenom) GetMaxDeposit() string {
	if m != nil {
		return m.MaxDeposit
	}
	return ""
}

type MsgCollateralUpdateLTV struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom     string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Ltv       string `protobuf:"bytes,3,opt,name=ltv,proto3" json:"ltv,omitempty"`
}

func (m *MsgCollateralUpdateLTV) Reset()         { *m = MsgCollateralUpdateLTV{} }
func (m *MsgCollateralUpdateLTV) String() string { return proto.CompactTextString(m) }
func (*MsgCollateralUpdateLTV) ProtoMessage()    {}
func (*MsgCollateralUpdateLTV) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{11}
}
func (m *MsgCollateralUpdateLTV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCollateralUpdateLTV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCollateralUpdateLTV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCollateralUpdateLTV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCollateralUpdateLTV.Merge(m, src)
}
func (m *MsgCollateralUpdateLTV) XXX_Size() int {
	return m.Size()
}
func (m *MsgCollateralUpdateLTV) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCollateralUpdateLTV.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCollateralUpdateLTV proto.InternalMessageInfo

func (m *MsgCollateralUpdateLTV) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCollateralUpdateLTV) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCollateralUpdateLTV) GetLtv() string {
	if m != nil {
		return m.Ltv
	}
	return ""
}

type MsgCollateralUpdateDepositLimit struct {
	Authority  string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom      string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	MaxDeposit string `protobuf:"bytes,3,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
}

func (m *MsgCollateralUpdateDepositLimit) Reset()         { *m = MsgCollateralUpdateDepositLimit{} }
func (m *MsgCollateralUpdateDepositLimit) String() string { return proto.CompactTextString(m) }
func (*MsgCollateralUpdateDepositLimit) ProtoMessage()    {}
func (*MsgCollateralUpdateDepositLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{12}
}
func (m *MsgCollateralUpdateDepositLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCollateralUpdateDepositLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCollateralUpdateDepositLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCollateralUpdateDepositLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCollateralUpdateDepositLimit.Merge(m, src)
}
func (m *MsgCollateralUpdateDepositLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgCollateralUpdateDepositLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCollateralUpdateDepositLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCollateralUpdateDepositLimit proto.InternalMessageInfo

func (m *MsgCollateralUpdateDepositLimit) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCollateralUpdateDepositLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCollateralUpdateDepositLimit) GetMaxDeposit() string {
	if m != nil {
		return m.MaxDeposit
	}
	return ""
}

type MsgCAssetAddDenom struct {
	Authority    string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BaseDenom    string `protobuf:"bytes,3,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	DexFeeShare  string `protobuf:"bytes,4,opt,name=dex_fee_share,json=dexFeeShare,proto3" json:"dex_fee_share,omitempty"`
	Factor       string `protobuf:"bytes,5,opt,name=factor,proto3" json:"factor,omitempty"`
	MinLiquidity string `protobuf:"bytes,6,opt,name=min_liquidity,json=minLiquidity,proto3" json:"min_liquidity,omitempty"`
	MinOrderSize string `protobuf:"bytes,7,opt,name=min_order_size,json=minOrderSize,proto3" json:"min_order_size,omitempty"`
	BorrowLimit  string `protobuf:"bytes,8,opt,name=borrow_limit,json=borrowLimit,proto3" json:"borrow_limit,omitempty"`
	MinLoanSize  string `protobuf:"bytes,9,opt,name=min_loan_size,json=minLoanSize,proto3" json:"min_loan_size,omitempty"`
}

func (m *MsgCAssetAddDenom) Reset()         { *m = MsgCAssetAddDenom{} }
func (m *MsgCAssetAddDenom) String() string { return proto.CompactTextString(m) }
func (*MsgCAssetAddDenom) ProtoMessage()    {}
func (*MsgCAssetAddDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{13}
}
func (m *MsgCAssetAddDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCAssetAddDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCAssetAddDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCAssetAddDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCAssetAddDenom.Merge(m, src)
}
func (m *MsgCAssetAddDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgCAssetAddDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCAssetAddDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCAssetAddDenom proto.InternalMessageInfo

func (m *MsgCAssetAddDenom) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCAssetAddDenom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCAssetAddDenom) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *MsgCAssetAddDenom) GetDexFeeShare() string {
	if m != nil {
		return m.DexFeeShare
	}
	return ""
}

func (m *MsgCAssetAddDenom) GetFactor() string {
	if m != nil {
		return m.Factor
	}
	return ""
}

func (m *MsgCAssetAddDenom) GetMinLiquidity() string {
	if m != nil {
		return m.MinLiquidity
	}
	return ""
}

func (m *MsgCAssetAddDenom) GetMinOrderSize() string {
	if m != nil {
		return m.MinOrderSize
	}
	return ""
}

func (m *MsgCAssetAddDenom) GetBorrowLimit() string {
	if m != nil {
		return m.BorrowLimit
	}
	return ""
}

func (m *MsgCAssetAddDenom) GetMinLoanSize() string {
	if m != nil {
		return m.MinLoanSize
	}
	return ""
}

type MsgCAssetUpdateDexFeeShare struct {
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DexFeeShare string `protobuf:"bytes,3,opt,name=dex_fee_share,json=dexFeeShare,proto3" json:"dex_fee_share,omitempty"`
}

func (m *MsgCAssetUpdateDexFeeShare) Reset()         { *m = MsgCAssetUpdateDexFeeShare{} }
func (m *MsgCAssetUpdateDexFeeShare) String() string { return proto.CompactTextString(m) }
func (*MsgCAssetUpdateDexFeeShare) ProtoMessage()    {}
func (*MsgCAssetUpdateDexFeeShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{14}
}
func (m *MsgCAssetUpdateDexFeeShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCAssetUpdateDexFeeShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCAssetUpdateDexFeeShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCAssetUpdateDexFeeShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCAssetUpdateDexFeeShare.Merge(m, src)
}
func (m *MsgCAssetUpdateDexFeeShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgCAssetUpdateDexFeeShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCAssetUpdateDexFeeShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCAssetUpdateDexFeeShare proto.InternalMessageInfo

func (m *MsgCAssetUpdateDexFeeShare) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCAssetUpdateDexFeeShare) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCAssetUpdateDexFeeShare) GetDexFeeShare() string {
	if m != nil {
		return m.DexFeeShare
	}
	return ""
}

type MsgCAssetUpdateBorrowLimit struct {
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BorrowLimit string `protobuf:"bytes,3,opt,name=borrow_limit,json=borrowLimit,proto3" json:"borrow_limit,omitempty"`
}

func (m *MsgCAssetUpdateBorrowLimit) Reset()         { *m = MsgCAssetUpdateBorrowLimit{} }
func (m *MsgCAssetUpdateBorrowLimit) String() string { return proto.CompactTextString(m) }
func (*MsgCAssetUpdateBorrowLimit) ProtoMessage()    {}
func (*MsgCAssetUpdateBorrowLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{15}
}
func (m *MsgCAssetUpdateBorrowLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCAssetUpdateBorrowLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCAssetUpdateBorrowLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCAssetUpdateBorrowLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCAssetUpdateBorrowLimit.Merge(m, src)
}
func (m *MsgCAssetUpdateBorrowLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgCAssetUpdateBorrowLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCAssetUpdateBorrowLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCAssetUpdateBorrowLimit proto.InternalMessageInfo

func (m *MsgCAssetUpdateBorrowLimit) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCAssetUpdateBorrowLimit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCAssetUpdateBorrowLimit) GetBorrowLimit() string {
	if m != nil {
		return m.BorrowLimit
	}
	return ""
}

type MsgCAssetUpdateMinimumLoanSize struct {
	Authority       string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinimumLoanSize string `protobuf:"bytes,3,opt,name=minimum_loan_size,json=minimumLoanSize,proto3" json:"minimum_loan_size,omitempty"`
}

func (m *MsgCAssetUpdateMinimumLoanSize) Reset()         { *m = MsgCAssetUpdateMinimumLoanSize{} }
func (m *MsgCAssetUpdateMinimumLoanSize) String() string { return proto.CompactTextString(m) }
func (*MsgCAssetUpdateMinimumLoanSize) ProtoMessage()    {}
func (*MsgCAssetUpdateMinimumLoanSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{16}
}
func (m *MsgCAssetUpdateMinimumLoanSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCAssetUpdateMinimumLoanSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCAssetUpdateMinimumLoanSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCAssetUpdateMinimumLoanSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCAssetUpdateMinimumLoanSize.Merge(m, src)
}
func (m *MsgCAssetUpdateMinimumLoanSize) XXX_Size() int {
	return m.Size()
}
func (m *MsgCAssetUpdateMinimumLoanSize) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCAssetUpdateMinimumLoanSize.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCAssetUpdateMinimumLoanSize proto.InternalMessageInfo

func (m *MsgCAssetUpdateMinimumLoanSize) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCAssetUpdateMinimumLoanSize) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCAssetUpdateMinimumLoanSize) GetMinimumLoanSize() string {
	if m != nil {
		return m.MinimumLoanSize
	}
	return ""
}

type MsgAddArbitrageDenom struct {
	Authority                 string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name                      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Factor                    string `protobuf:"bytes,3,opt,name=factor,proto3" json:"factor,omitempty"`
	MinLiquidity              string `protobuf:"bytes,4,opt,name=min_liquidity,json=minLiquidity,proto3" json:"min_liquidity,omitempty"`
	MinOrderSize              string `protobuf:"bytes,5,opt,name=min_order_size,json=minOrderSize,proto3" json:"min_order_size,omitempty"`
	Kcoin                     string `protobuf:"bytes,6,opt,name=kcoin,proto3" json:"kcoin,omitempty"`
	CAsset                    string `protobuf:"bytes,7,opt,name=c_asset,json=cAsset,proto3" json:"c_asset,omitempty"`
	BuyThreshold              string `protobuf:"bytes,8,opt,name=buy_threshold,json=buyThreshold,proto3" json:"buy_threshold,omitempty"`
	BuyTradeAmount            string `protobuf:"bytes,10,opt,name=buy_trade_amount,json=buyTradeAmount,proto3" json:"buy_trade_amount,omitempty"`
	SellThreshold             string `protobuf:"bytes,9,opt,name=sell_threshold,json=sellThreshold,proto3" json:"sell_threshold,omitempty"`
	SellTradeAmount           string `protobuf:"bytes,11,opt,name=sell_trade_amount,json=sellTradeAmount,proto3" json:"sell_trade_amount,omitempty"`
	RedemptionFee             string `protobuf:"bytes,12,opt,name=redemption_fee,json=redemptionFee,proto3" json:"redemption_fee,omitempty"`
	RedemptionFeeReserveShare string `protobuf:"bytes,13,opt,name=redemption_fee_reserve_share,json=redemptionFeeReserveShare,proto3" json:"redemption_fee_reserve_share,omitempty"`
}

func (m *MsgAddArbitrageDenom) Reset()         { *m = MsgAddArbitrageDenom{} }
func (m *MsgAddArbitrageDenom) String() string { return proto.CompactTextString(m) }
func (*MsgAddArbitrageDenom) ProtoMessage()    {}
func (*MsgAddArbitrageDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{17}
}
func (m *MsgAddArbitrageDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddArbitrageDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddArbitrageDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddArbitrageDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddArbitrageDenom.Merge(m, src)
}
func (m *MsgAddArbitrageDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddArbitrageDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddArbitrageDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddArbitrageDenom proto.InternalMessageInfo

func (m *MsgAddArbitrageDenom) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetFactor() string {
	if m != nil {
		return m.Factor
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetMinLiquidity() string {
	if m != nil {
		return m.MinLiquidity
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetMinOrderSize() string {
	if m != nil {
		return m.MinOrderSize
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetKcoin() string {
	if m != nil {
		return m.Kcoin
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetCAsset() string {
	if m != nil {
		return m.CAsset
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetBuyThreshold() string {
	if m != nil {
		return m.BuyThreshold
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetBuyTradeAmount() string {
	if m != nil {
		return m.BuyTradeAmount
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetSellThreshold() string {
	if m != nil {
		return m.SellThreshold
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetSellTradeAmount() string {
	if m != nil {
		return m.SellTradeAmount
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetRedemptionFee() string {
	if m != nil {
		return m.RedemptionFee
	}
	return ""
}

func (m *MsgAddArbitrageDenom) GetRedemptionFeeReserveShare() string {
	if m != nil {
		return m.RedemptionFeeReserveShare
	}
	return ""
}

type MsgArbitrageUpdateBuyThreshold struct {
	Authority    string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BuyThreshold string `protobuf:"bytes,3,opt,name=buy_threshold,json=buyThreshold,proto3" json:"buy_threshold,omitempty"`
}

func (m *MsgArbitrageUpdateBuyThreshold) Reset()         { *m = MsgArbitrageUpdateBuyThreshold{} }
func (m *MsgArbitrageUpdateBuyThreshold) String() string { return proto.CompactTextString(m) }
func (*MsgArbitrageUpdateBuyThreshold) ProtoMessage()    {}
func (*MsgArbitrageUpdateBuyThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{18}
}
func (m *MsgArbitrageUpdateBuyThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitrageUpdateBuyThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitrageUpdateBuyThreshold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitrageUpdateBuyThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitrageUpdateBuyThreshold.Merge(m, src)
}
func (m *MsgArbitrageUpdateBuyThreshold) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitrageUpdateBuyThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitrageUpdateBuyThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitrageUpdateBuyThreshold proto.InternalMessageInfo

func (m *MsgArbitrageUpdateBuyThreshold) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgArbitrageUpdateBuyThreshold) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgArbitrageUpdateBuyThreshold) GetBuyThreshold() string {
	if m != nil {
		return m.BuyThreshold
	}
	return ""
}

type MsgArbitrageUpdateSellThreshold struct {
	Authority     string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SellThreshold string `protobuf:"bytes,3,opt,name=sell_threshold,json=sellThreshold,proto3" json:"sell_threshold,omitempty"`
}

func (m *MsgArbitrageUpdateSellThreshold) Reset()         { *m = MsgArbitrageUpdateSellThreshold{} }
func (m *MsgArbitrageUpdateSellThreshold) String() string { return proto.CompactTextString(m) }
func (*MsgArbitrageUpdateSellThreshold) ProtoMessage()    {}
func (*MsgArbitrageUpdateSellThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{19}
}
func (m *MsgArbitrageUpdateSellThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitrageUpdateSellThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitrageUpdateSellThreshold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitrageUpdateSellThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitrageUpdateSellThreshold.Merge(m, src)
}
func (m *MsgArbitrageUpdateSellThreshold) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitrageUpdateSellThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitrageUpdateSellThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitrageUpdateSellThreshold proto.InternalMessageInfo

func (m *MsgArbitrageUpdateSellThreshold) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgArbitrageUpdateSellThreshold) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgArbitrageUpdateSellThreshold) GetSellThreshold() string {
	if m != nil {
		return m.SellThreshold
	}
	return ""
}

type MsgArbitrageUpdateBuyAmount struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BuyAmount string `protobuf:"bytes,3,opt,name=buy_amount,json=buyAmount,proto3" json:"buy_amount,omitempty"`
}

func (m *MsgArbitrageUpdateBuyAmount) Reset()         { *m = MsgArbitrageUpdateBuyAmount{} }
func (m *MsgArbitrageUpdateBuyAmount) String() string { return proto.CompactTextString(m) }
func (*MsgArbitrageUpdateBuyAmount) ProtoMessage()    {}
func (*MsgArbitrageUpdateBuyAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{20}
}
func (m *MsgArbitrageUpdateBuyAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitrageUpdateBuyAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitrageUpdateBuyAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitrageUpdateBuyAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitrageUpdateBuyAmount.Merge(m, src)
}
func (m *MsgArbitrageUpdateBuyAmount) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitrageUpdateBuyAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitrageUpdateBuyAmount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitrageUpdateBuyAmount proto.InternalMessageInfo

func (m *MsgArbitrageUpdateBuyAmount) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgArbitrageUpdateBuyAmount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgArbitrageUpdateBuyAmount) GetBuyAmount() string {
	if m != nil {
		return m.BuyAmount
	}
	return ""
}

type MsgArbitrageUpdateSellAmount struct {
	Authority  string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SellAmount string `protobuf:"bytes,3,opt,name=sell_amount,json=sellAmount,proto3" json:"sell_amount,omitempty"`
}

func (m *MsgArbitrageUpdateSellAmount) Reset()         { *m = MsgArbitrageUpdateSellAmount{} }
func (m *MsgArbitrageUpdateSellAmount) String() string { return proto.CompactTextString(m) }
func (*MsgArbitrageUpdateSellAmount) ProtoMessage()    {}
func (*MsgArbitrageUpdateSellAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{21}
}
func (m *MsgArbitrageUpdateSellAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitrageUpdateSellAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitrageUpdateSellAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitrageUpdateSellAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitrageUpdateSellAmount.Merge(m, src)
}
func (m *MsgArbitrageUpdateSellAmount) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitrageUpdateSellAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitrageUpdateSellAmount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitrageUpdateSellAmount proto.InternalMessageInfo

func (m *MsgArbitrageUpdateSellAmount) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgArbitrageUpdateSellAmount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgArbitrageUpdateSellAmount) GetSellAmount() string {
	if m != nil {
		return m.SellAmount
	}
	return ""
}

type MsgArbitrageUpdateRedemptionFee struct {
	Authority     string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RedemptionFee string `protobuf:"bytes,3,opt,name=redemption_fee,json=redemptionFee,proto3" json:"redemption_fee,omitempty"`
}

func (m *MsgArbitrageUpdateRedemptionFee) Reset()         { *m = MsgArbitrageUpdateRedemptionFee{} }
func (m *MsgArbitrageUpdateRedemptionFee) String() string { return proto.CompactTextString(m) }
func (*MsgArbitrageUpdateRedemptionFee) ProtoMessage()    {}
func (*MsgArbitrageUpdateRedemptionFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{22}
}
func (m *MsgArbitrageUpdateRedemptionFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitrageUpdateRedemptionFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitrageUpdateRedemptionFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitrageUpdateRedemptionFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitrageUpdateRedemptionFee.Merge(m, src)
}
func (m *MsgArbitrageUpdateRedemptionFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitrageUpdateRedemptionFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitrageUpdateRedemptionFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitrageUpdateRedemptionFee proto.InternalMessageInfo

func (m *MsgArbitrageUpdateRedemptionFee) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgArbitrageUpdateRedemptionFee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgArbitrageUpdateRedemptionFee) GetRedemptionFee() string {
	if m != nil {
		return m.RedemptionFee
	}
	return ""
}

type MsgArbitrageUpdateRedemptionFeeReserveShare struct {
	Authority                 string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Name                      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RedemptionFeeReserveShare string `protobuf:"bytes,3,opt,name=redemption_fee_reserve_share,json=redemptionFeeReserveShare,proto3" json:"redemption_fee_reserve_share,omitempty"`
}

func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) Reset() {
	*m = MsgArbitrageUpdateRedemptionFeeReserveShare{}
}
func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) String() string {
	return proto.CompactTextString(m)
}
func (*MsgArbitrageUpdateRedemptionFeeReserveShare) ProtoMessage() {}
func (*MsgArbitrageUpdateRedemptionFeeReserveShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba97ecacef12ed2, []int{23}
}
func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitrageUpdateRedemptionFeeReserveShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitrageUpdateRedemptionFeeReserveShare.Merge(m, src)
}
func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitrageUpdateRedemptionFeeReserveShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitrageUpdateRedemptionFeeReserveShare proto.InternalMessageInfo

func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) GetRedemptionFeeReserveShare() string {
	if m != nil {
		return m.RedemptionFeeReserveShare
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "kopi.denominations.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgDexAddDenom)(nil), "kopi.denominations.MsgDexAddDenom")
	proto.RegisterType((*MsgDexUpdateMinimumLiquidity)(nil), "kopi.denominations.MsgDexUpdateMinimumLiquidity")
	proto.RegisterType((*MsgDexUpdateMinimumOrderSize)(nil), "kopi.denominations.MsgDexUpdateMinimumOrderSize")
	proto.RegisterType((*MsgKCoinAddDenom)(nil), "kopi.denominations.MsgKCoinAddDenom")
	proto.RegisterType((*MsgKCoinUpdateSupplyLimit)(nil), "kopi.denominations.MsgKCoinUpdateSupplyLimit")
	proto.RegisterType((*MsgKCoinUpdateBurnAmount)(nil), "kopi.denominations.MsgKCoinUpdateBurnAmount")
	proto.RegisterType((*MsgKCoinUpdateMintAmount)(nil), "kopi.denominations.MsgKCoinUpdateMintAmount")
	proto.RegisterType((*MsgKCoinAddReferences)(nil), "kopi.denominations.MsgKCoinAddReferences")
	proto.RegisterType((*MsgKCoinRemoveReferences)(nil), "kopi.denominations.MsgKCoinRemoveReferences")
	proto.RegisterType((*MsgCollateralAddDenom)(nil), "kopi.denominations.MsgCollateralAddDenom")
	proto.RegisterType((*MsgCollateralUpdateLTV)(nil), "kopi.denominations.MsgCollateralUpdateLTV")
	proto.RegisterType((*MsgCollateralUpdateDepositLimit)(nil), "kopi.denominations.MsgCollateralUpdateDepositLimit")
	proto.RegisterType((*MsgCAssetAddDenom)(nil), "kopi.denominations.MsgCAssetAddDenom")
	proto.RegisterType((*MsgCAssetUpdateDexFeeShare)(nil), "kopi.denominations.MsgCAssetUpdateDexFeeShare")
	proto.RegisterType((*MsgCAssetUpdateBorrowLimit)(nil), "kopi.denominations.MsgCAssetUpdateBorrowLimit")
	proto.RegisterType((*MsgCAssetUpdateMinimumLoanSize)(nil), "kopi.denominations.MsgCAssetUpdateMinimumLoanSize")
	proto.RegisterType((*MsgAddArbitrageDenom)(nil), "kopi.denominations.MsgAddArbitrageDenom")
	proto.RegisterType((*MsgArbitrageUpdateBuyThreshold)(nil), "kopi.denominations.MsgArbitrageUpdateBuyThreshold")
	proto.RegisterType((*MsgArbitrageUpdateSellThreshold)(nil), "kopi.denominations.MsgArbitrageUpdateSellThreshold")
	proto.RegisterType((*MsgArbitrageUpdateBuyAmount)(nil), "kopi.denominations.MsgArbitrageUpdateBuyAmount")
	proto.RegisterType((*MsgArbitrageUpdateSellAmount)(nil), "kopi.denominations.MsgArbitrageUpdateSellAmount")
	proto.RegisterType((*MsgArbitrageUpdateRedemptionFee)(nil), "kopi.denominations.MsgArbitrageUpdateRedemptionFee")
	proto.RegisterType((*MsgArbitrageUpdateRedemptionFeeReserveShare)(nil), "kopi.denominations.MsgArbitrageUpdateRedemptionFeeReserveShare")
}

func init() { proto.RegisterFile("kopi/denominations/tx.proto", fileDescriptor_6ba97ecacef12ed2) }

var fileDescriptor_6ba97ecacef12ed2 = []byte{
	// 1619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xee, 0x76, 0x93, 0xb4, 0x79, 0x6e, 0xd2, 0x66, 0x49, 0x1b, 0x27, 0x6d, 0x9d, 0xb2, 0xfd,
	0xa1, 0xd4, 0x25, 0x76, 0xda, 0xa0, 0x0a, 0x2c, 0xa0, 0x75, 0x1a, 0x15, 0x09, 0x6a, 0x81, 0x9c,
	0xc2, 0x81, 0x03, 0xd6, 0xda, 0x3b, 0x75, 0x96, 0x7a, 0x77, 0xcc, 0xce, 0x3a, 0x38, 0x39, 0xa0,
	0x8a, 0x0b, 0x52, 0x2f, 0x20, 0x71, 0xe1, 0xcf, 0xe8, 0x81, 0x03, 0x07, 0x4e, 0x88, 0x03, 0x02,
	0x21, 0x4a, 0x25, 0x7e, 0x1d, 0x90, 0xaa, 0xf6, 0x90, 0x7f, 0x03, 0xcd, 0xce, 0xae, 0x77, 0xd7,
	0xb3, 0xbb, 0xde, 0xb5, 0x1d, 0x21, 0x2e, 0xad, 0xf7, 0xcd, 0x9b, 0xf9, 0xde, 0xf7, 0xbe, 0xb7,
	0xb3, 0x33, 0x4f, 0x81, 0xd3, 0xf7, 0x71, 0x5b, 0x2b, 0xaa, 0xc8, 0xc0, 0xba, 0x66, 0x28, 0x96,
	0x86, 0x0d, 0x52, 0xb4, 0xba, 0x85, 0xb6, 0x89, 0x2d, 0x2c, 0x49, 0x74, 0xb0, 0x10, 0x18, 0x5c,
	0x9a, 0x53, 0x74, 0xcd, 0xc0, 0x45, 0xfb, 0x5f, 0xe6, 0xb6, 0xb4, 0xd0, 0xc0, 0x44, 0xc7, 0xa4,
	0xa8, 0x93, 0x66, 0x71, 0xe7, 0x2a, 0xfd, 0xcf, 0x19, 0x58, 0x64, 0x03, 0x35, 0xfb, 0xa9, 0xc8,
	0x1e, 0x9c, 0xa1, 0xf9, 0x26, 0x6e, 0x62, 0x66, 0xa7, 0xbf, 0x1c, 0xeb, 0x72, 0x48, 0x34, 0x6d,
	0xc5, 0x54, 0x74, 0x67, 0x9a, 0xbc, 0x08, 0x0b, 0x15, 0xd2, 0x7c, 0xaf, 0xad, 0x2a, 0x16, 0x7a,
	0xd7, 0x1e, 0xa8, 0x22, 0xd2, 0xc6, 0x06, 0x41, 0xf2, 0x57, 0x87, 0x61, 0xb6, 0x42, 0x9a, 0x9b,
	0xa8, 0x5b, 0x56, 0xd5, 0x4d, 0xba, 0x84, 0x74, 0x1d, 0xa6, 0x95, 0x8e, 0xb5, 0x8d, 0x4d, 0xcd,
	0xda, 0xcd, 0x0a, 0xe7, 0x84, 0x95, 0xe9, 0x8d, 0xec, 0x93, 0x6f, 0x56, 0xe7, 0x9d, 0x48, 0xca,
	0xaa, 0x6a, 0x22, 0x42, 0xb6, 0x2c, 0x53, 0x33, 0x9a, 0x55, 0xcf, 0x55, 0x92, 0x60, 0xc2, 0x50,
	0x74, 0x94, 0x3d, 0x4c, 0xa7, 0x54, 0xed, 0xdf, 0xd2, 0x29, 0x98, 0xba, 0xa7, 0x34, 0x2c, 0x6c,
	0x66, 0x45, 0xdb, 0xea, 0x3c, 0x49, 0xe7, 0x61, 0x46, 0xd7, 0x8c, 0x5a, 0x4b, 0xfb, 0xb8, 0xa3,
	0xa9, 0x14, 0x67, 0xc2, 0x1e, 0x3e, 0xa6, 0x6b, 0xc6, 0x1d, 0xd7, 0x26, 0x5d, 0x80, 0x59, 0xea,
	0x84, 0x4d, 0x15, 0x99, 0x35, 0xa2, 0xed, 0xa1, 0xec, 0x64, 0xcf, 0xeb, 0x1d, 0x6a, 0xdc, 0xd2,
	0xf6, 0x90, 0xb4, 0x04, 0x47, 0x51, 0xb7, 0x8d, 0x0d, 0x64, 0x58, 0xd9, 0xa9, 0x73, 0xc2, 0xca,
	0x44, 0xb5, 0xf7, 0x5c, 0xba, 0xfe, 0xd9, 0xfe, 0xa3, 0xbc, 0x17, 0xe2, 0xc3, 0xfd, 0x47, 0xf9,
	0xf3, 0x76, 0xb2, 0xba, 0x7d, 0xe9, 0x0a, 0xa6, 0x40, 0xfe, 0x5d, 0x80, 0x33, 0xcc, 0xc4, 0x92,
	0x56, 0xd1, 0x0c, 0x4d, 0xef, 0xe8, 0x5e, 0x68, 0xe3, 0xcc, 0x11, 0x97, 0x0b, 0x91, 0xcf, 0x45,
	0x69, 0x93, 0x67, 0x72, 0x35, 0x86, 0x49, 0x78, 0xd8, 0xf2, 0x1f, 0xe1, 0xbc, 0xbc, 0x64, 0x8e,
	0x93, 0x17, 0x2f, 0x9f, 0xc8, 0xcb, 0x37, 0x12, 0xb1, 0xde, 0x2a, 0xf2, 0x43, 0x11, 0x4e, 0x54,
	0x48, 0xf3, 0xed, 0x5b, 0x58, 0x33, 0x0e, 0xa4, 0x90, 0x73, 0x00, 0x26, 0xba, 0x87, 0x4c, 0x64,
	0x34, 0x10, 0xc9, 0x8a, 0xe7, 0xc4, 0x95, 0xe9, 0xaa, 0xcf, 0x22, 0x9d, 0x05, 0xd0, 0x95, 0x6e,
	0x8d, 0x74, 0xda, 0xed, 0x96, 0x5b, 0xcd, 0xd3, 0xba, 0xd2, 0xdd, 0xb2, 0x0d, 0xd2, 0x25, 0x38,
	0x4e, 0x87, 0x75, 0xcd, 0xb0, 0x6a, 0x8a, 0x8e, 0x3b, 0x86, 0xe5, 0xd4, 0xf2, 0x8c, 0xae, 0x74,
	0x2b, 0x9a, 0x61, 0x95, 0x6d, 0xa3, 0xeb, 0x57, 0xef, 0x98, 0x86, 0xeb, 0x37, 0xd5, 0xf3, 0xdb,
	0xe8, 0x98, 0x86, 0xe3, 0xe7, 0xbd, 0x57, 0x47, 0xe2, 0xdf, 0xab, 0xa3, 0x89, 0xde, 0xab, 0xe9,
	0x10, 0x61, 0x5e, 0xe1, 0x85, 0xb9, 0x18, 0x25, 0x4c, 0x20, 0xef, 0xf2, 0xcf, 0x02, 0x2c, 0xba,
	0x46, 0xa6, 0x17, 0xcb, 0xc2, 0x1d, 0x4d, 0xd7, 0xac, 0xa1, 0x55, 0x99, 0x87, 0x49, 0x1b, 0xd7,
	0x91, 0x85, 0x3d, 0xf4, 0xe5, 0x5d, 0xec, 0xcb, 0x7b, 0xa9, 0xcc, 0x93, 0x28, 0xc4, 0x92, 0xe0,
	0xe2, 0x95, 0x9f, 0x08, 0x90, 0x0d, 0x8e, 0xfa, 0x74, 0x18, 0x2f, 0x99, 0x10, 0xf5, 0xc5, 0x10,
	0xf5, 0x4b, 0x37, 0x79, 0x56, 0xab, 0x09, 0x58, 0x79, 0x2b, 0x84, 0x90, 0xf2, 0x15, 0xe1, 0x81,
	0x90, 0xf2, 0x97, 0xbe, 0x18, 0x52, 0xfa, 0xc3, 0x92, 0xf2, 0x56, 0x90, 0x7f, 0x10, 0xe0, 0xa4,
	0xaf, 0x18, 0xab, 0xde, 0xdb, 0x39, 0x5e, 0x46, 0x03, 0xf6, 0x82, 0xd2, 0xeb, 0x3c, 0x93, 0xfc,
	0xa0, 0x37, 0xc7, 0x0b, 0x56, 0xfe, 0xc9, 0xa7, 0x4d, 0x15, 0xe9, 0x78, 0x07, 0xfd, 0x67, 0x4c,
	0x52, 0x6b, 0xd2, 0x1f, 0xaf, 0xfc, 0x27, 0xd3, 0xe4, 0x16, 0x6e, 0xb5, 0x14, 0x0b, 0x99, 0x4a,
	0x6b, 0xe4, 0xdd, 0x39, 0x9c, 0xc9, 0x09, 0x10, 0x5b, 0xd6, 0x8e, 0x53, 0x59, 0xf4, 0xa7, 0xb4,
	0x0c, 0x19, 0x5a, 0x77, 0x2a, 0x6a, 0x63, 0xa2, 0x59, 0xce, 0x96, 0x4c, 0x37, 0x8b, 0x4d, 0x66,
	0x49, 0x25, 0x13, 0x1f, 0xbf, 0xfc, 0xad, 0x00, 0xa7, 0x02, 0x23, 0xac, 0x1e, 0xef, 0xdc, 0x7d,
	0xff, 0xa0, 0xa9, 0x95, 0xde, 0xe0, 0x23, 0xbf, 0x32, 0x38, 0xf2, 0x5e, 0x7c, 0xf2, 0xdf, 0x02,
	0x2c, 0x87, 0x0c, 0x39, 0x89, 0x39, 0x88, 0x6d, 0xba, 0x4f, 0x0c, 0x91, 0x13, 0xe3, 0x4d, 0x9e,
	0xd2, 0xcb, 0x49, 0x29, 0xf9, 0xe3, 0x96, 0x3f, 0x17, 0x61, 0x8e, 0xfa, 0x94, 0x09, 0x41, 0xd6,
	0x81, 0x1c, 0x05, 0xce, 0x02, 0xd4, 0x15, 0x82, 0x6a, 0x8c, 0xa6, 0xf3, 0xc9, 0xa1, 0x16, 0x06,
	0x25, 0xc3, 0x8c, 0x8a, 0xba, 0xb5, 0x7b, 0x08, 0xd5, 0xc8, 0xb6, 0x62, 0x22, 0xa7, 0xf2, 0x32,
	0x2a, 0xea, 0xde, 0x46, 0x68, 0x8b, 0x9a, 0x7c, 0x9f, 0xef, 0xc9, 0xf8, 0xcf, 0xf7, 0x54, 0xa2,
	0xcf, 0xf7, 0x91, 0x90, 0x63, 0xf1, 0x8b, 0x70, 0xac, 0x8e, 0x4d, 0x13, 0x7f, 0x52, 0x6b, 0xd1,
	0xbc, 0x38, 0x07, 0x81, 0x0c, 0xb3, 0x31, 0x89, 0x65, 0x07, 0x0d, 0x2b, 0x86, 0xff, 0x18, 0x90,
	0xa1, 0x68, 0x58, 0x31, 0xec, 0x53, 0xc0, 0xab, 0xbc, 0x2e, 0x97, 0x22, 0x75, 0x09, 0xe4, 0x5c,
	0x7e, 0x2c, 0xc0, 0x52, 0xcf, 0xea, 0x2a, 0xe5, 0xe5, 0x60, 0x9c, 0x92, 0x70, 0x39, 0x17, 0xb9,
	0x9c, 0x97, 0x36, 0x78, 0x26, 0xc5, 0x78, 0x26, 0x5c, 0xcc, 0xf2, 0xaf, 0x3c, 0xa5, 0x0d, 0x5f,
	0x42, 0xc7, 0x49, 0xa9, 0x5f, 0x3f, 0x91, 0xd3, 0x6f, 0x68, 0x46, 0xbe, 0x90, 0xe5, 0xa7, 0x02,
	0xe4, 0xfa, 0x86, 0xdd, 0x5b, 0x83, 0x53, 0x02, 0x63, 0x65, 0x95, 0x87, 0x39, 0x9d, 0x2d, 0xef,
	0x2b, 0x3b, 0x46, 0xed, 0xb8, 0x1e, 0xc4, 0x2d, 0xdd, 0xe6, 0xe9, 0xad, 0x27, 0xa1, 0xd7, 0x17,
	0xbf, 0xfc, 0xdd, 0x04, 0xcc, 0x57, 0x48, 0xb3, 0xac, 0xaa, 0x65, 0xb3, 0xae, 0x59, 0xa6, 0xd2,
	0x44, 0xff, 0xcb, 0x8b, 0xee, 0x3c, 0x4c, 0xde, 0x6f, 0x60, 0xcd, 0x70, 0x36, 0x05, 0xf6, 0x20,
	0x2d, 0xc0, 0x91, 0x46, 0x4d, 0xa1, 0xec, 0xdd, 0xab, 0x40, 0xc3, 0xce, 0x05, 0x45, 0xae, 0x77,
	0x76, 0x6b, 0xd6, 0xb6, 0x89, 0xc8, 0x36, 0x6e, 0xa9, 0xee, 0x55, 0xa0, 0xde, 0xd9, 0xbd, 0xeb,
	0xda, 0xa4, 0x15, 0x38, 0x61, 0x3b, 0x99, 0x8a, 0x8a, 0xdc, 0xd3, 0x19, 0xd8, 0x7e, 0xb3, 0xd4,
	0x8f, 0x9a, 0x9d, 0x43, 0xe1, 0x45, 0x98, 0x25, 0xa8, 0xd5, 0xf2, 0xad, 0xc7, 0x76, 0x8b, 0x19,
	0x6a, 0xf5, 0x16, 0xcc, 0xc3, 0x1c, 0x73, 0xf3, 0xaf, 0x98, 0x61, 0x02, 0xdb, 0x9e, 0xc1, 0x25,
	0x4d, 0xa4, 0x22, 0xbd, 0x4d, 0x65, 0xa4, 0x2f, 0x6f, 0xf6, 0x18, 0x5b, 0xd2, 0xb3, 0xde, 0x46,
	0x48, 0xba, 0x01, 0x67, 0x82, 0x6e, 0x35, 0x13, 0x11, 0x64, 0xee, 0xb8, 0xef, 0xfa, 0x8c, 0x3d,
	0x69, 0x31, 0x30, 0xa9, 0xca, 0x3c, 0xd8, 0x9b, 0xff, 0x1a, 0x5f, 0x48, 0x97, 0xa3, 0x0a, 0x89,
	0xab, 0x12, 0xfa, 0xb1, 0xa4, 0x6f, 0x48, 0xcf, 0xea, 0x9e, 0xa5, 0x7d, 0x59, 0x1c, 0x73, 0x37,
	0x20, 0x28, 0x9b, 0xc8, 0xcb, 0x96, 0xea, 0xd5, 0x88, 0x09, 0x5c, 0xfe, 0x87, 0x1d, 0x04, 0xfa,
	0x5c, 0xb6, 0x02, 0x8a, 0x8e, 0x93, 0x1c, 0x5f, 0x44, 0x62, 0x48, 0x11, 0xa5, 0x3a, 0x0c, 0xc4,
	0xc5, 0x2e, 0xff, 0x22, 0xc0, 0xe9, 0xd0, 0x14, 0x8c, 0x78, 0xd3, 0x89, 0x3a, 0x16, 0x74, 0x76,
	0x83, 0x57, 0x9c, 0xe9, 0xba, 0x0b, 0x55, 0xba, 0xc5, 0x73, 0x5a, 0x4b, 0x2e, 0x99, 0x73, 0xc3,
	0xf9, 0x8d, 0xf5, 0x6f, 0x42, 0x38, 0x1f, 0x00, 0xa1, 0x65, 0xc8, 0xd8, 0x62, 0x05, 0x18, 0x01,
	0xe9, 0x81, 0xa5, 0x6a, 0xdd, 0x44, 0x86, 0x1c, 0x51, 0x83, 0xd5, 0xc0, 0x16, 0x30, 0xe6, 0x1a,
	0xec, 0xdb, 0x75, 0xc4, 0x90, 0x5d, 0x67, 0x94, 0x1a, 0x0c, 0xc4, 0x2e, 0x7f, 0x71, 0x18, 0xae,
	0x0c, 0xf0, 0xf1, 0xef, 0x56, 0x63, 0xe5, 0x3a, 0x68, 0xeb, 0x14, 0x07, 0x6d, 0x9d, 0x5b, 0x7c,
	0x16, 0x6e, 0x0e, 0x93, 0x05, 0xff, 0xa2, 0xd7, 0xbe, 0x3f, 0x09, 0x62, 0x85, 0x34, 0xa5, 0x0f,
	0x21, 0xe3, 0xef, 0x3b, 0xcb, 0x05, 0xbe, 0x71, 0x5e, 0x08, 0x36, 0x66, 0x97, 0xae, 0x44, 0xf8,
	0x84, 0xf5, 0xb6, 0xa5, 0x3d, 0x58, 0x8c, 0xee, 0xe0, 0xae, 0x45, 0xa3, 0x85, 0xcf, 0x18, 0x19,
	0xdb, 0xfb, 0x92, 0x27, 0xc5, 0xee, 0xcd, 0x48, 0x87, 0x5d, 0x87, 0x99, 0x60, 0x23, 0xf4, 0x42,
	0xc4, 0xec, 0x80, 0x57, 0x3a, 0x0c, 0x0b, 0x4e, 0x45, 0xf4, 0xf7, 0x56, 0xe3, 0xc0, 0x38, 0xf7,
	0x74, 0xa8, 0x26, 0x9c, 0x0c, 0x6f, 0x59, 0xbd, 0x34, 0x18, 0xd4, 0xf3, 0x1e, 0x05, 0xd3, 0xd7,
	0xfb, 0x4b, 0x80, 0xe9, 0x79, 0xa7, 0xc3, 0x6c, 0x81, 0x14, 0xd2, 0xc5, 0xba, 0x3c, 0x40, 0x46,
	0xcf, 0x75, 0x38, 0x86, 0x5c, 0xb3, 0x29, 0x96, 0x61, 0xbf, 0x77, 0x6a, 0x86, 0x21, 0x3d, 0xa1,
	0x28, 0x86, 0xbc, 0x6b, 0x3a, 0x34, 0x03, 0x5e, 0x08, 0xeb, 0xd3, 0xe4, 0x07, 0xc2, 0xf5, 0x7c,
	0xd3, 0xe1, 0x3d, 0x10, 0xe0, 0x4c, 0x6c, 0x77, 0x65, 0x3d, 0x21, 0xb2, 0x7f, 0x52, 0xba, 0x10,
	0x54, 0x98, 0xed, 0xeb, 0x81, 0x5c, 0x8c, 0xc2, 0x0c, 0xb8, 0xa5, 0x43, 0xd9, 0x81, 0x85, 0xa8,
	0xfb, 0x7d, 0x21, 0x16, 0x8e, 0xf3, 0x1f, 0x09, 0xd7, 0x7f, 0x09, 0x4f, 0x82, 0xeb, 0xf3, 0x4f,
	0x87, 0xfb, 0x29, 0x9c, 0x8e, 0xbb, 0x2a, 0x5f, 0x4b, 0x80, 0xdd, 0x37, 0x27, 0x1d, 0xfe, 0x47,
	0x30, 0xd7, 0xfb, 0xcc, 0xf6, 0x84, 0x5d, 0x89, 0x58, 0x81, 0xbb, 0xcb, 0xa4, 0xe6, 0x1a, 0x77,
	0xe9, 0x89, 0xe2, 0x1a, 0x33, 0x27, 0xfd, 0x4b, 0x14, 0x7b, 0x33, 0x59, 0x4f, 0x16, 0x41, 0x60,
	0x52, 0xba, 0x10, 0xba, 0x90, 0x8d, 0xbc, 0x3b, 0x14, 0x13, 0xf3, 0x1f, 0xe6, 0x0b, 0xb0, 0x07,
	0x8b, 0xd1, 0xa7, 0xfc, 0xb5, 0xe4, 0xc4, 0x87, 0xc1, 0x0e, 0x49, 0x7c, 0xf0, 0x38, 0x9e, 0x30,
	0xf1, 0x81, 0x49, 0xe9, 0x42, 0xf8, 0x5a, 0x80, 0x95, 0xc4, 0x27, 0xe6, 0x1b, 0x43, 0x84, 0xe3,
	0x5f, 0x20, 0x55, 0x68, 0x4b, 0x93, 0x0f, 0xf6, 0x1f, 0xe5, 0x85, 0x8d, 0xb7, 0x7e, 0x7c, 0x96,
	0x13, 0x1e, 0x3f, 0xcb, 0x09, 0x4f, 0x9f, 0xe5, 0x84, 0x2f, 0x9f, 0xe7, 0x0e, 0x3d, 0x7e, 0x9e,
	0x3b, 0xf4, 0xd7, 0xf3, 0xdc, 0xa1, 0x0f, 0xd6, 0x9a, 0x9a, 0xb5, 0xdd, 0xa9, 0x17, 0x1a, 0x58,
	0xb7, 0xdb, 0x71, 0xab, 0x3a, 0x36, 0xd0, 0x6e, 0x78, 0x67, 0xce, 0xda, 0x6d, 0x23, 0x52, 0x9f,
	0xb2, 0xff, 0x4c, 0x63, 0xfd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x7e, 0x56, 0xc4, 0x57,
	0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	DexAddDenom(ctx context.Context, in *MsgDexAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	DexUpdateMinimumLiquidity(ctx context.Context, in *MsgDexUpdateMinimumLiquidity, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	DexUpdateMinimumOrderSize(ctx context.Context, in *MsgDexUpdateMinimumOrderSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinAddDenom(ctx context.Context, in *MsgKCoinAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinUpdateSupplyLimit(ctx context.Context, in *MsgKCoinUpdateSupplyLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinUpdateMintAmount(ctx context.Context, in *MsgKCoinUpdateMintAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinUpdateBurnAmount(ctx context.Context, in *MsgKCoinUpdateBurnAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinAddReferences(ctx context.Context, in *MsgKCoinAddReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	KCoinRemoveReferences(ctx context.Context, in *MsgKCoinRemoveReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CollateralAddDenom(ctx context.Context, in *MsgCollateralAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CollateralUpdateLTV(ctx context.Context, in *MsgCollateralUpdateLTV, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CollateralUpdateDepositLimit(ctx context.Context, in *MsgCollateralUpdateDepositLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CAssetAddDenom(ctx context.Context, in *MsgCAssetAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CAssetUpdateDexFeeShare(ctx context.Context, in *MsgCAssetUpdateDexFeeShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CAssetUpdateBorrowLimit(ctx context.Context, in *MsgCAssetUpdateBorrowLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CAssetUpdateMinimumLoanSize(ctx context.Context, in *MsgCAssetUpdateMinimumLoanSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageAddDenom(ctx context.Context, in *MsgAddArbitrageDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateBuyThreshold(ctx context.Context, in *MsgArbitrageUpdateBuyThreshold, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateSellThreshold(ctx context.Context, in *MsgArbitrageUpdateSellThreshold, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateBuyAmount(ctx context.Context, in *MsgArbitrageUpdateBuyAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateSellAmount(ctx context.Context, in *MsgArbitrageUpdateSellAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateRedemptionFee(ctx context.Context, in *MsgArbitrageUpdateRedemptionFee, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateRedemptionFeeReserveShare(ctx context.Context, in *MsgArbitrageUpdateRedemptionFeeReserveShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DexAddDenom(ctx context.Context, in *MsgDexAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/DexAddDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DexUpdateMinimumLiquidity(ctx context.Context, in *MsgDexUpdateMinimumLiquidity, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/DexUpdateMinimumLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DexUpdateMinimumOrderSize(ctx context.Context, in *MsgDexUpdateMinimumOrderSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/DexUpdateMinimumOrderSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinAddDenom(ctx context.Context, in *MsgKCoinAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/KCoinAddDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinUpdateSupplyLimit(ctx context.Context, in *MsgKCoinUpdateSupplyLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/KCoinUpdateSupplyLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinUpdateMintAmount(ctx context.Context, in *MsgKCoinUpdateMintAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/KCoinUpdateMintAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinUpdateBurnAmount(ctx context.Context, in *MsgKCoinUpdateBurnAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/KCoinUpdateBurnAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinAddReferences(ctx context.Context, in *MsgKCoinAddReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/KCoinAddReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KCoinRemoveReferences(ctx context.Context, in *MsgKCoinRemoveReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/KCoinRemoveReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CollateralAddDenom(ctx context.Context, in *MsgCollateralAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/CollateralAddDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CollateralUpdateLTV(ctx context.Context, in *MsgCollateralUpdateLTV, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/CollateralUpdateLTV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CollateralUpdateDepositLimit(ctx context.Context, in *MsgCollateralUpdateDepositLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/CollateralUpdateDepositLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CAssetAddDenom(ctx context.Context, in *MsgCAssetAddDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/CAssetAddDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CAssetUpdateDexFeeShare(ctx context.Context, in *MsgCAssetUpdateDexFeeShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/CAssetUpdateDexFeeShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CAssetUpdateBorrowLimit(ctx context.Context, in *MsgCAssetUpdateBorrowLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/CAssetUpdateBorrowLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CAssetUpdateMinimumLoanSize(ctx context.Context, in *MsgCAssetUpdateMinimumLoanSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/CAssetUpdateMinimumLoanSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageAddDenom(ctx context.Context, in *MsgAddArbitrageDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/ArbitrageAddDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateBuyThreshold(ctx context.Context, in *MsgArbitrageUpdateBuyThreshold, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/ArbitrageUpdateBuyThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateSellThreshold(ctx context.Context, in *MsgArbitrageUpdateSellThreshold, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/ArbitrageUpdateSellThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateBuyAmount(ctx context.Context, in *MsgArbitrageUpdateBuyAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/ArbitrageUpdateBuyAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateSellAmount(ctx context.Context, in *MsgArbitrageUpdateSellAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/ArbitrageUpdateSellAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateRedemptionFee(ctx context.Context, in *MsgArbitrageUpdateRedemptionFee, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/ArbitrageUpdateRedemptionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageUpdateRedemptionFeeReserveShare(ctx context.Context, in *MsgArbitrageUpdateRedemptionFeeReserveShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.denominations.Msg/ArbitrageUpdateRedemptionFeeReserveShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	DexAddDenom(context.Context, *MsgDexAddDenom) (*MsgUpdateParamsResponse, error)
	DexUpdateMinimumLiquidity(context.Context, *MsgDexUpdateMinimumLiquidity) (*MsgUpdateParamsResponse, error)
	DexUpdateMinimumOrderSize(context.Context, *MsgDexUpdateMinimumOrderSize) (*MsgUpdateParamsResponse, error)
	KCoinAddDenom(context.Context, *MsgKCoinAddDenom) (*MsgUpdateParamsResponse, error)
	KCoinUpdateSupplyLimit(context.Context, *MsgKCoinUpdateSupplyLimit) (*MsgUpdateParamsResponse, error)
	KCoinUpdateMintAmount(context.Context, *MsgKCoinUpdateMintAmount) (*MsgUpdateParamsResponse, error)
	KCoinUpdateBurnAmount(context.Context, *MsgKCoinUpdateBurnAmount) (*MsgUpdateParamsResponse, error)
	KCoinAddReferences(context.Context, *MsgKCoinAddReferences) (*MsgUpdateParamsResponse, error)
	KCoinRemoveReferences(context.Context, *MsgKCoinRemoveReferences) (*MsgUpdateParamsResponse, error)
	CollateralAddDenom(context.Context, *MsgCollateralAddDenom) (*MsgUpdateParamsResponse, error)
	CollateralUpdateLTV(context.Context, *MsgCollateralUpdateLTV) (*MsgUpdateParamsResponse, error)
	CollateralUpdateDepositLimit(context.Context, *MsgCollateralUpdateDepositLimit) (*MsgUpdateParamsResponse, error)
	CAssetAddDenom(context.Context, *MsgCAssetAddDenom) (*MsgUpdateParamsResponse, error)
	CAssetUpdateDexFeeShare(context.Context, *MsgCAssetUpdateDexFeeShare) (*MsgUpdateParamsResponse, error)
	CAssetUpdateBorrowLimit(context.Context, *MsgCAssetUpdateBorrowLimit) (*MsgUpdateParamsResponse, error)
	CAssetUpdateMinimumLoanSize(context.Context, *MsgCAssetUpdateMinimumLoanSize) (*MsgUpdateParamsResponse, error)
	ArbitrageAddDenom(context.Context, *MsgAddArbitrageDenom) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateBuyThreshold(context.Context, *MsgArbitrageUpdateBuyThreshold) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateSellThreshold(context.Context, *MsgArbitrageUpdateSellThreshold) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateBuyAmount(context.Context, *MsgArbitrageUpdateBuyAmount) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateSellAmount(context.Context, *MsgArbitrageUpdateSellAmount) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateRedemptionFee(context.Context, *MsgArbitrageUpdateRedemptionFee) (*MsgUpdateParamsResponse, error)
	ArbitrageUpdateRedemptionFeeReserveShare(context.Context, *MsgArbitrageUpdateRedemptionFeeReserveShare) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DexAddDenom(ctx context.Context, req *MsgDexAddDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DexAddDenom not implemented")
}
func (*UnimplementedMsgServer) DexUpdateMinimumLiquidity(ctx context.Context, req *MsgDexUpdateMinimumLiquidity) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DexUpdateMinimumLiquidity not implemented")
}
func (*UnimplementedMsgServer) DexUpdateMinimumOrderSize(ctx context.Context, req *MsgDexUpdateMinimumOrderSize) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DexUpdateMinimumOrderSize not implemented")
}
func (*UnimplementedMsgServer) KCoinAddDenom(ctx context.Context, req *MsgKCoinAddDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinAddDenom not implemented")
}
func (*UnimplementedMsgServer) KCoinUpdateSupplyLimit(ctx context.Context, req *MsgKCoinUpdateSupplyLimit) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinUpdateSupplyLimit not implemented")
}
func (*UnimplementedMsgServer) KCoinUpdateMintAmount(ctx context.Context, req *MsgKCoinUpdateMintAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinUpdateMintAmount not implemented")
}
func (*UnimplementedMsgServer) KCoinUpdateBurnAmount(ctx context.Context, req *MsgKCoinUpdateBurnAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinUpdateBurnAmount not implemented")
}
func (*UnimplementedMsgServer) KCoinAddReferences(ctx context.Context, req *MsgKCoinAddReferences) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinAddReferences not implemented")
}
func (*UnimplementedMsgServer) KCoinRemoveReferences(ctx context.Context, req *MsgKCoinRemoveReferences) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KCoinRemoveReferences not implemented")
}
func (*UnimplementedMsgServer) CollateralAddDenom(ctx context.Context, req *MsgCollateralAddDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralAddDenom not implemented")
}
func (*UnimplementedMsgServer) CollateralUpdateLTV(ctx context.Context, req *MsgCollateralUpdateLTV) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralUpdateLTV not implemented")
}
func (*UnimplementedMsgServer) CollateralUpdateDepositLimit(ctx context.Context, req *MsgCollateralUpdateDepositLimit) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralUpdateDepositLimit not implemented")
}
func (*UnimplementedMsgServer) CAssetAddDenom(ctx context.Context, req *MsgCAssetAddDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAssetAddDenom not implemented")
}
func (*UnimplementedMsgServer) CAssetUpdateDexFeeShare(ctx context.Context, req *MsgCAssetUpdateDexFeeShare) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAssetUpdateDexFeeShare not implemented")
}
func (*UnimplementedMsgServer) CAssetUpdateBorrowLimit(ctx context.Context, req *MsgCAssetUpdateBorrowLimit) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAssetUpdateBorrowLimit not implemented")
}
func (*UnimplementedMsgServer) CAssetUpdateMinimumLoanSize(ctx context.Context, req *MsgCAssetUpdateMinimumLoanSize) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAssetUpdateMinimumLoanSize not implemented")
}
func (*UnimplementedMsgServer) ArbitrageAddDenom(ctx context.Context, req *MsgAddArbitrageDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageAddDenom not implemented")
}
func (*UnimplementedMsgServer) ArbitrageUpdateBuyThreshold(ctx context.Context, req *MsgArbitrageUpdateBuyThreshold) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateBuyThreshold not implemented")
}
func (*UnimplementedMsgServer) ArbitrageUpdateSellThreshold(ctx context.Context, req *MsgArbitrageUpdateSellThreshold) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateSellThreshold not implemented")
}
func (*UnimplementedMsgServer) ArbitrageUpdateBuyAmount(ctx context.Context, req *MsgArbitrageUpdateBuyAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateBuyAmount not implemented")
}
func (*UnimplementedMsgServer) ArbitrageUpdateSellAmount(ctx context.Context, req *MsgArbitrageUpdateSellAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateSellAmount not implemented")
}
func (*UnimplementedMsgServer) ArbitrageUpdateRedemptionFee(ctx context.Context, req *MsgArbitrageUpdateRedemptionFee) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateRedemptionFee not implemented")
}
func (*UnimplementedMsgServer) ArbitrageUpdateRedemptionFeeReserveShare(ctx context.Context, req *MsgArbitrageUpdateRedemptionFeeReserveShare) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageUpdateRedemptionFeeReserveShare not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DexAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDexAddDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DexAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/DexAddDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DexAddDenom(ctx, req.(*MsgDexAddDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DexUpdateMinimumLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDexUpdateMinimumLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DexUpdateMinimumLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/DexUpdateMinimumLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DexUpdateMinimumLiquidity(ctx, req.(*MsgDexUpdateMinimumLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DexUpdateMinimumOrderSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDexUpdateMinimumOrderSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DexUpdateMinimumOrderSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/DexUpdateMinimumOrderSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DexUpdateMinimumOrderSize(ctx, req.(*MsgDexUpdateMinimumOrderSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinAddDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/KCoinAddDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinAddDenom(ctx, req.(*MsgKCoinAddDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinUpdateSupplyLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinUpdateSupplyLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinUpdateSupplyLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/KCoinUpdateSupplyLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinUpdateSupplyLimit(ctx, req.(*MsgKCoinUpdateSupplyLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinUpdateMintAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinUpdateMintAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinUpdateMintAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/KCoinUpdateMintAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinUpdateMintAmount(ctx, req.(*MsgKCoinUpdateMintAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinUpdateBurnAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinUpdateBurnAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinUpdateBurnAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/KCoinUpdateBurnAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinUpdateBurnAmount(ctx, req.(*MsgKCoinUpdateBurnAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinAddReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinAddReferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinAddReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/KCoinAddReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinAddReferences(ctx, req.(*MsgKCoinAddReferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KCoinRemoveReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKCoinRemoveReferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KCoinRemoveReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/KCoinRemoveReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KCoinRemoveReferences(ctx, req.(*MsgKCoinRemoveReferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CollateralAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCollateralAddDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CollateralAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/CollateralAddDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CollateralAddDenom(ctx, req.(*MsgCollateralAddDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CollateralUpdateLTV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCollateralUpdateLTV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CollateralUpdateLTV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/CollateralUpdateLTV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CollateralUpdateLTV(ctx, req.(*MsgCollateralUpdateLTV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CollateralUpdateDepositLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCollateralUpdateDepositLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CollateralUpdateDepositLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/CollateralUpdateDepositLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CollateralUpdateDepositLimit(ctx, req.(*MsgCollateralUpdateDepositLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CAssetAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCAssetAddDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CAssetAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/CAssetAddDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CAssetAddDenom(ctx, req.(*MsgCAssetAddDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CAssetUpdateDexFeeShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCAssetUpdateDexFeeShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CAssetUpdateDexFeeShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/CAssetUpdateDexFeeShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CAssetUpdateDexFeeShare(ctx, req.(*MsgCAssetUpdateDexFeeShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CAssetUpdateBorrowLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCAssetUpdateBorrowLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CAssetUpdateBorrowLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/CAssetUpdateBorrowLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CAssetUpdateBorrowLimit(ctx, req.(*MsgCAssetUpdateBorrowLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CAssetUpdateMinimumLoanSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCAssetUpdateMinimumLoanSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CAssetUpdateMinimumLoanSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/CAssetUpdateMinimumLoanSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CAssetUpdateMinimumLoanSize(ctx, req.(*MsgCAssetUpdateMinimumLoanSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageAddDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddArbitrageDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageAddDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/ArbitrageAddDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageAddDenom(ctx, req.(*MsgAddArbitrageDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateBuyThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateBuyThreshold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateBuyThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/ArbitrageUpdateBuyThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateBuyThreshold(ctx, req.(*MsgArbitrageUpdateBuyThreshold))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateSellThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateSellThreshold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateSellThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/ArbitrageUpdateSellThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateSellThreshold(ctx, req.(*MsgArbitrageUpdateSellThreshold))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateBuyAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateBuyAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateBuyAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/ArbitrageUpdateBuyAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateBuyAmount(ctx, req.(*MsgArbitrageUpdateBuyAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateSellAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateSellAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateSellAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/ArbitrageUpdateSellAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateSellAmount(ctx, req.(*MsgArbitrageUpdateSellAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateRedemptionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateRedemptionFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateRedemptionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/ArbitrageUpdateRedemptionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateRedemptionFee(ctx, req.(*MsgArbitrageUpdateRedemptionFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageUpdateRedemptionFeeReserveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageUpdateRedemptionFeeReserveShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageUpdateRedemptionFeeReserveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.denominations.Msg/ArbitrageUpdateRedemptionFeeReserveShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageUpdateRedemptionFeeReserveShare(ctx, req.(*MsgArbitrageUpdateRedemptionFeeReserveShare))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.denominations.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DexAddDenom",
			Handler:    _Msg_DexAddDenom_Handler,
		},
		{
			MethodName: "DexUpdateMinimumLiquidity",
			Handler:    _Msg_DexUpdateMinimumLiquidity_Handler,
		},
		{
			MethodName: "DexUpdateMinimumOrderSize",
			Handler:    _Msg_DexUpdateMinimumOrderSize_Handler,
		},
		{
			MethodName: "KCoinAddDenom",
			Handler:    _Msg_KCoinAddDenom_Handler,
		},
		{
			MethodName: "KCoinUpdateSupplyLimit",
			Handler:    _Msg_KCoinUpdateSupplyLimit_Handler,
		},
		{
			MethodName: "KCoinUpdateMintAmount",
			Handler:    _Msg_KCoinUpdateMintAmount_Handler,
		},
		{
			MethodName: "KCoinUpdateBurnAmount",
			Handler:    _Msg_KCoinUpdateBurnAmount_Handler,
		},
		{
			MethodName: "KCoinAddReferences",
			Handler:    _Msg_KCoinAddReferences_Handler,
		},
		{
			MethodName: "KCoinRemoveReferences",
			Handler:    _Msg_KCoinRemoveReferences_Handler,
		},
		{
			MethodName: "CollateralAddDenom",
			Handler:    _Msg_CollateralAddDenom_Handler,
		},
		{
			MethodName: "CollateralUpdateLTV",
			Handler:    _Msg_CollateralUpdateLTV_Handler,
		},
		{
			MethodName: "CollateralUpdateDepositLimit",
			Handler:    _Msg_CollateralUpdateDepositLimit_Handler,
		},
		{
			MethodName: "CAssetAddDenom",
			Handler:    _Msg_CAssetAddDenom_Handler,
		},
		{
			MethodName: "CAssetUpdateDexFeeShare",
			Handler:    _Msg_CAssetUpdateDexFeeShare_Handler,
		},
		{
			MethodName: "CAssetUpdateBorrowLimit",
			Handler:    _Msg_CAssetUpdateBorrowLimit_Handler,
		},
		{
			MethodName: "CAssetUpdateMinimumLoanSize",
			Handler:    _Msg_CAssetUpdateMinimumLoanSize_Handler,
		},
		{
			MethodName: "ArbitrageAddDenom",
			Handler:    _Msg_ArbitrageAddDenom_Handler,
		},
		{
			MethodName: "ArbitrageUpdateBuyThreshold",
			Handler:    _Msg_ArbitrageUpdateBuyThreshold_Handler,
		},
		{
			MethodName: "ArbitrageUpdateSellThreshold",
			Handler:    _Msg_ArbitrageUpdateSellThreshold_Handler,
		},
		{
			MethodName: "ArbitrageUpdateBuyAmount",
			Handler:    _Msg_ArbitrageUpdateBuyAmount_Handler,
		},
		{
			MethodName: "ArbitrageUpdateSellAmount",
			Handler:    _Msg_ArbitrageUpdateSellAmount_Handler,
		},
		{
			MethodName: "ArbitrageUpdateRedemptionFee",
			Handler:    _Msg_ArbitrageUpdateRedemptionFee_Handler,
		},
		{
			MethodName: "ArbitrageUpdateRedemptionFeeReserveShare",
			Handler:    _Msg_ArbitrageUpdateRedemptionFeeReserveShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/denominations/tx.proto",
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDexAddDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDexAddDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDexAddDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exponent != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MinOrderSize) > 0 {
		i -= len(m.MinOrderSize)
		copy(dAtA[i:], m.MinOrderSize)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinOrderSize)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MinLiquidity) > 0 {
		i -= len(m.MinLiquidity)
		copy(dAtA[i:], m.MinLiquidity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinLiquidity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Factor) > 0 {
		i -= len(m.Factor)
		copy(dAtA[i:], m.Factor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Factor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDexUpdateMinimumLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDexUpdateMinimumLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDexUpdateMinimumLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinLiquidity) > 0 {
		i -= len(m.MinLiquidity)
		copy(dAtA[i:], m.MinLiquidity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinLiquidity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDexUpdateMinimumOrderSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDexUpdateMinimumOrderSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDexUpdateMinimumOrderSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinOrderSize) > 0 {
		i -= len(m.MinOrderSize)
		copy(dAtA[i:], m.MinOrderSize)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinOrderSize)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgKCoinAddDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKCoinAddDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKCoinAddDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinOrderSize) > 0 {
		i -= len(m.MinOrderSize)
		copy(dAtA[i:], m.MinOrderSize)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinOrderSize)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MinLiquidity) > 0 {
		i -= len(m.MinLiquidity)
		copy(dAtA[i:], m.MinLiquidity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinLiquidity)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Factor) > 0 {
		i -= len(m.Factor)
		copy(dAtA[i:], m.Factor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Factor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxBurnAmount) > 0 {
		i -= len(m.MaxBurnAmount)
		copy(dAtA[i:], m.MaxBurnAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxBurnAmount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MaxMintAmount) > 0 {
		i -= len(m.MaxMintAmount)
		copy(dAtA[i:], m.MaxMintAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxMintAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MaxSupply) > 0 {
		i -= len(m.MaxSupply)
		copy(dAtA[i:], m.MaxSupply)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxSupply)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.References) > 0 {
		for iNdEx := len(m.References) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.References[iNdEx])
			copy(dAtA[i:], m.References[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.References[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgKCoinUpdateSupplyLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKCoinUpdateSupplyLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKCoinUpdateSupplyLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxSupply) > 0 {
		i -= len(m.MaxSupply)
		copy(dAtA[i:], m.MaxSupply)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxSupply)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgKCoinUpdateBurnAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKCoinUpdateBurnAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKCoinUpdateBurnAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxBurnAmount) > 0 {
		i -= len(m.MaxBurnAmount)
		copy(dAtA[i:], m.MaxBurnAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxBurnAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgKCoinUpdateMintAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKCoinUpdateMintAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKCoinUpdateMintAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxMintAmount) > 0 {
		i -= len(m.MaxMintAmount)
		copy(dAtA[i:], m.MaxMintAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxMintAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgKCoinAddReferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKCoinAddReferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKCoinAddReferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.References) > 0 {
		for iNdEx := len(m.References) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.References[iNdEx])
			copy(dAtA[i:], m.References[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.References[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgKCoinRemoveReferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKCoinRemoveReferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKCoinRemoveReferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.References) > 0 {
		for iNdEx := len(m.References) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.References[iNdEx])
			copy(dAtA[i:], m.References[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.References[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCollateralAddDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCollateralAddDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCollateralAddDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxDeposit) > 0 {
		i -= len(m.MaxDeposit)
		copy(dAtA[i:], m.MaxDeposit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxDeposit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ltv) > 0 {
		i -= len(m.Ltv)
		copy(dAtA[i:], m.Ltv)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ltv)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCollateralUpdateLTV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCollateralUpdateLTV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCollateralUpdateLTV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ltv) > 0 {
		i -= len(m.Ltv)
		copy(dAtA[i:], m.Ltv)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ltv)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCollateralUpdateDepositLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCollateralUpdateDepositLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCollateralUpdateDepositLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxDeposit) > 0 {
		i -= len(m.MaxDeposit)
		copy(dAtA[i:], m.MaxDeposit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxDeposit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCAssetAddDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCAssetAddDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCAssetAddDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinLoanSize) > 0 {
		i -= len(m.MinLoanSize)
		copy(dAtA[i:], m.MinLoanSize)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinLoanSize)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BorrowLimit) > 0 {
		i -= len(m.BorrowLimit)
		copy(dAtA[i:], m.BorrowLimit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BorrowLimit)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MinOrderSize) > 0 {
		i -= len(m.MinOrderSize)
		copy(dAtA[i:], m.MinOrderSize)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinOrderSize)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MinLiquidity) > 0 {
		i -= len(m.MinLiquidity)
		copy(dAtA[i:], m.MinLiquidity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinLiquidity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Factor) > 0 {
		i -= len(m.Factor)
		copy(dAtA[i:], m.Factor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Factor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DexFeeShare) > 0 {
		i -= len(m.DexFeeShare)
		copy(dAtA[i:], m.DexFeeShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DexFeeShare)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCAssetUpdateDexFeeShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCAssetUpdateDexFeeShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCAssetUpdateDexFeeShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DexFeeShare) > 0 {
		i -= len(m.DexFeeShare)
		copy(dAtA[i:], m.DexFeeShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DexFeeShare)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCAssetUpdateBorrowLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCAssetUpdateBorrowLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCAssetUpdateBorrowLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowLimit) > 0 {
		i -= len(m.BorrowLimit)
		copy(dAtA[i:], m.BorrowLimit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BorrowLimit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCAssetUpdateMinimumLoanSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCAssetUpdateMinimumLoanSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCAssetUpdateMinimumLoanSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinimumLoanSize) > 0 {
		i -= len(m.MinimumLoanSize)
		copy(dAtA[i:], m.MinimumLoanSize)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinimumLoanSize)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddArbitrageDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddArbitrageDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddArbitrageDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedemptionFeeReserveShare) > 0 {
		i -= len(m.RedemptionFeeReserveShare)
		copy(dAtA[i:], m.RedemptionFeeReserveShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RedemptionFeeReserveShare)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RedemptionFee) > 0 {
		i -= len(m.RedemptionFee)
		copy(dAtA[i:], m.RedemptionFee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RedemptionFee)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SellTradeAmount) > 0 {
		i -= len(m.SellTradeAmount)
		copy(dAtA[i:], m.SellTradeAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellTradeAmount)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.BuyTradeAmount) > 0 {
		i -= len(m.BuyTradeAmount)
		copy(dAtA[i:], m.BuyTradeAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyTradeAmount)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SellThreshold) > 0 {
		i -= len(m.SellThreshold)
		copy(dAtA[i:], m.SellThreshold)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellThreshold)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BuyThreshold) > 0 {
		i -= len(m.BuyThreshold)
		copy(dAtA[i:], m.BuyThreshold)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyThreshold)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CAsset) > 0 {
		i -= len(m.CAsset)
		copy(dAtA[i:], m.CAsset)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CAsset)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Kcoin) > 0 {
		i -= len(m.Kcoin)
		copy(dAtA[i:], m.Kcoin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kcoin)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MinOrderSize) > 0 {
		i -= len(m.MinOrderSize)
		copy(dAtA[i:], m.MinOrderSize)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinOrderSize)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MinLiquidity) > 0 {
		i -= len(m.MinLiquidity)
		copy(dAtA[i:], m.MinLiquidity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinLiquidity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Factor) > 0 {
		i -= len(m.Factor)
		copy(dAtA[i:], m.Factor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Factor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitrageUpdateBuyThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitrageUpdateBuyThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitrageUpdateBuyThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyThreshold) > 0 {
		i -= len(m.BuyThreshold)
		copy(dAtA[i:], m.BuyThreshold)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyThreshold)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitrageUpdateSellThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitrageUpdateSellThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitrageUpdateSellThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellThreshold) > 0 {
		i -= len(m.SellThreshold)
		copy(dAtA[i:], m.SellThreshold)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellThreshold)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitrageUpdateBuyAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitrageUpdateBuyAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitrageUpdateBuyAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyAmount) > 0 {
		i -= len(m.BuyAmount)
		copy(dAtA[i:], m.BuyAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitrageUpdateSellAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitrageUpdateSellAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitrageUpdateSellAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellAmount) > 0 {
		i -= len(m.SellAmount)
		copy(dAtA[i:], m.SellAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitrageUpdateRedemptionFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitrageUpdateRedemptionFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitrageUpdateRedemptionFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedemptionFee) > 0 {
		i -= len(m.RedemptionFee)
		copy(dAtA[i:], m.RedemptionFee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RedemptionFee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedemptionFeeReserveShare) > 0 {
		i -= len(m.RedemptionFeeReserveShare)
		copy(dAtA[i:], m.RedemptionFeeReserveShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RedemptionFeeReserveShare)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDexAddDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Factor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinLiquidity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinOrderSize)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Exponent != 0 {
		n += 1 + sovTx(uint64(m.Exponent))
	}
	return n
}

func (m *MsgDexUpdateMinimumLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinLiquidity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDexUpdateMinimumOrderSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinOrderSize)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgKCoinAddDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.MaxSupply)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxMintAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxBurnAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Factor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinLiquidity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinOrderSize)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgKCoinUpdateSupplyLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxSupply)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgKCoinUpdateBurnAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxBurnAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgKCoinUpdateMintAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxMintAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgKCoinAddReferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgKCoinRemoveReferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCollateralAddDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ltv)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxDeposit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCollateralUpdateLTV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ltv)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCollateralUpdateDepositLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxDeposit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCAssetAddDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DexFeeShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Factor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinLiquidity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinOrderSize)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BorrowLimit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinLoanSize)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCAssetUpdateDexFeeShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DexFeeShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCAssetUpdateBorrowLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BorrowLimit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCAssetUpdateMinimumLoanSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinimumLoanSize)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddArbitrageDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Factor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinLiquidity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinOrderSize)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Kcoin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CAsset)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyThreshold)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellThreshold)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyTradeAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellTradeAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RedemptionFee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RedemptionFeeReserveShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgArbitrageUpdateBuyThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyThreshold)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgArbitrageUpdateSellThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellThreshold)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgArbitrageUpdateBuyAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgArbitrageUpdateSellAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgArbitrageUpdateRedemptionFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RedemptionFee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RedemptionFeeReserveShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDexAddDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDexAddDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDexAddDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOrderSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDexUpdateMinimumLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDexUpdateMinimumLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDexUpdateMinimumLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDexUpdateMinimumOrderSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDexUpdateMinimumOrderSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDexUpdateMinimumOrderSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOrderSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKCoinAddDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKCoinAddDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKCoinAddDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxMintAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxBurnAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOrderSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKCoinUpdateSupplyLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKCoinUpdateSupplyLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKCoinUpdateSupplyLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKCoinUpdateBurnAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKCoinUpdateBurnAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKCoinUpdateBurnAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxBurnAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKCoinUpdateMintAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKCoinUpdateMintAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKCoinUpdateMintAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxMintAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKCoinAddReferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKCoinAddReferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKCoinAddReferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKCoinRemoveReferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKCoinRemoveReferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKCoinRemoveReferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCollateralAddDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCollateralAddDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCollateralAddDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ltv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCollateralUpdateLTV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCollateralUpdateLTV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCollateralUpdateLTV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ltv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCollateralUpdateDepositLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCollateralUpdateDepositLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCollateralUpdateDepositLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCAssetAddDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCAssetAddDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCAssetAddDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DexFeeShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOrderSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLoanSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinLoanSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCAssetUpdateDexFeeShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCAssetUpdateDexFeeShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCAssetUpdateDexFeeShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DexFeeShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCAssetUpdateBorrowLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCAssetUpdateBorrowLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCAssetUpdateBorrowLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCAssetUpdateMinimumLoanSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCAssetUpdateMinimumLoanSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCAssetUpdateMinimumLoanSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumLoanSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumLoanSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddArbitrageDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddArbitrageDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddArbitrageDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOrderSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kcoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kcoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyTradeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyTradeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellTradeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellTradeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionFeeReserveShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionFeeReserveShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitrageUpdateBuyThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitrageUpdateBuyThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitrageUpdateBuyThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitrageUpdateSellThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitrageUpdateSellThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitrageUpdateSellThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitrageUpdateBuyAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitrageUpdateBuyAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitrageUpdateBuyAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitrageUpdateSellAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitrageUpdateSellAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitrageUpdateSellAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitrageUpdateRedemptionFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitrageUpdateRedemptionFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitrageUpdateRedemptionFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitrageUpdateRedemptionFeeReserveShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitrageUpdateRedemptionFeeReserveShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitrageUpdateRedemptionFeeReserveShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionFeeReserveShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionFeeReserveShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
