// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/strategies/automations.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Condition struct {
	ConditionType  int64                        `protobuf:"varint,1,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	String1        string                       `protobuf:"bytes,2,opt,name=string1,proto3" json:"string1,omitempty"`
	String2        string                       `protobuf:"bytes,3,opt,name=string2,proto3" json:"string2,omitempty"`
	Comparison     string                       `protobuf:"bytes,4,opt,name=comparison,proto3" json:"comparison,omitempty"`
	Value          cosmossdk_io_math.LegacyDec  `protobuf:"bytes,5,opt,name=value,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"value"`
	ReferencePrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=reference_price,json=referencePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reference_price,omitempty"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb283a4587811ab2, []int{0}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return m.Size()
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetConditionType() int64 {
	if m != nil {
		return m.ConditionType
	}
	return 0
}

func (m *Condition) GetString1() string {
	if m != nil {
		return m.String1
	}
	return ""
}

func (m *Condition) GetString2() string {
	if m != nil {
		return m.String2
	}
	return ""
}

func (m *Condition) GetComparison() string {
	if m != nil {
		return m.Comparison
	}
	return ""
}

type Action struct {
	ActionType         int64  `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	String1            string `protobuf:"bytes,2,opt,name=string1,proto3" json:"string1,omitempty"`
	String2            string `protobuf:"bytes,3,opt,name=string2,proto3" json:"string2,omitempty"`
	Amount             string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	MinimumTradeAmount string `protobuf:"bytes,5,opt,name=minimum_trade_amount,json=minimumTradeAmount,proto3" json:"minimum_trade_amount,omitempty"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb283a4587811ab2, []int{1}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetActionType() int64 {
	if m != nil {
		return m.ActionType
	}
	return 0
}

func (m *Action) GetString1() string {
	if m != nil {
		return m.String1
	}
	return ""
}

func (m *Action) GetString2() string {
	if m != nil {
		return m.String2
	}
	return ""
}

func (m *Action) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Action) GetMinimumTradeAmount() string {
	if m != nil {
		return m.MinimumTradeAmount
	}
	return ""
}

type MessageCondition struct {
	ConditionType  int64  `protobuf:"varint,1,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	String1        string `protobuf:"bytes,2,opt,name=string1,proto3" json:"string1,omitempty"`
	String2        string `protobuf:"bytes,3,opt,name=string2,proto3" json:"string2,omitempty"`
	Comparison     string `protobuf:"bytes,4,opt,name=comparison,proto3" json:"comparison,omitempty"`
	Value          string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	ReferencePrice string `protobuf:"bytes,6,opt,name=reference_price,json=referencePrice,proto3" json:"reference_price,omitempty"`
}

func (m *MessageCondition) Reset()         { *m = MessageCondition{} }
func (m *MessageCondition) String() string { return proto.CompactTextString(m) }
func (*MessageCondition) ProtoMessage()    {}
func (*MessageCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb283a4587811ab2, []int{2}
}
func (m *MessageCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageCondition.Merge(m, src)
}
func (m *MessageCondition) XXX_Size() int {
	return m.Size()
}
func (m *MessageCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageCondition.DiscardUnknown(m)
}

var xxx_messageInfo_MessageCondition proto.InternalMessageInfo

func (m *MessageCondition) GetConditionType() int64 {
	if m != nil {
		return m.ConditionType
	}
	return 0
}

func (m *MessageCondition) GetString1() string {
	if m != nil {
		return m.String1
	}
	return ""
}

func (m *MessageCondition) GetString2() string {
	if m != nil {
		return m.String2
	}
	return ""
}

func (m *MessageCondition) GetComparison() string {
	if m != nil {
		return m.Comparison
	}
	return ""
}

func (m *MessageCondition) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MessageCondition) GetReferencePrice() string {
	if m != nil {
		return m.ReferencePrice
	}
	return ""
}

type InactiveReason struct {
	Reason int64 `protobuf:"varint,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *InactiveReason) Reset()         { *m = InactiveReason{} }
func (m *InactiveReason) String() string { return proto.CompactTextString(m) }
func (*InactiveReason) ProtoMessage()    {}
func (*InactiveReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb283a4587811ab2, []int{3}
}
func (m *InactiveReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InactiveReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InactiveReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InactiveReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InactiveReason.Merge(m, src)
}
func (m *InactiveReason) XXX_Size() int {
	return m.Size()
}
func (m *InactiveReason) XXX_DiscardUnknown() {
	xxx_messageInfo_InactiveReason.DiscardUnknown(m)
}

var xxx_messageInfo_InactiveReason proto.InternalMessageInfo

func (m *InactiveReason) GetReason() int64 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type Automation struct {
	Index                       uint64          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Address                     string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Title                       string          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Active                      bool            `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	AddedAt                     int64           `protobuf:"varint,5,opt,name=added_at,json=addedAt,proto3" json:"added_at,omitempty"`
	LastExecution               int64           `protobuf:"varint,6,opt,name=last_execution,json=lastExecution,proto3" json:"last_execution,omitempty"`
	PeriodStart                 int64           `protobuf:"varint,7,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodTimesChecked          int64           `protobuf:"varint,8,opt,name=period_times_checked,json=periodTimesChecked,proto3" json:"period_times_checked,omitempty"`
	PeriodTimesExecuted         int64           `protobuf:"varint,9,opt,name=period_times_executed,json=periodTimesExecuted,proto3" json:"period_times_executed,omitempty"`
	PeriodConditionFeesConsumed uint64          `protobuf:"varint,10,opt,name=period_condition_fees_consumed,json=periodConditionFeesConsumed,proto3" json:"period_condition_fees_consumed,omitempty"`
	PeriodActionFeesConsumed    uint64          `protobuf:"varint,11,opt,name=period_action_fees_consumed,json=periodActionFeesConsumed,proto3" json:"period_action_fees_consumed,omitempty"`
	TotalTimesExecuted          int64           `protobuf:"varint,12,opt,name=total_times_executed,json=totalTimesExecuted,proto3" json:"total_times_executed,omitempty"`
	TotalConditionFeesConsumed  uint64          `protobuf:"varint,13,opt,name=total_condition_fees_consumed,json=totalConditionFeesConsumed,proto3" json:"total_condition_fees_consumed,omitempty"`
	TotalActionFeesConsumed     uint64          `protobuf:"varint,14,opt,name=total_action_fees_consumed,json=totalActionFeesConsumed,proto3" json:"total_action_fees_consumed,omitempty"`
	IntervalType                int64           `protobuf:"varint,15,opt,name=interval_type,json=intervalType,proto3" json:"interval_type,omitempty"`
	IntervalLength              int64           `protobuf:"varint,16,opt,name=interval_length,json=intervalLength,proto3" json:"interval_length,omitempty"`
	ValidityType                int64           `protobuf:"varint,17,opt,name=validity_type,json=validityType,proto3" json:"validity_type,omitempty"`
	ValidityValue               int64           `protobuf:"varint,18,opt,name=validity_value,json=validityValue,proto3" json:"validity_value,omitempty"`
	Conditions                  []*Condition    `protobuf:"bytes,19,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Actions                     []*Action       `protobuf:"bytes,20,rep,name=actions,proto3" json:"actions,omitempty"`
	InactiveReason              *InactiveReason `protobuf:"bytes,21,opt,name=inactive_reason,json=inactiveReason,proto3,customtype=InactiveReason" json:"inactive_reason,omitempty"`
}

func (m *Automation) Reset()         { *m = Automation{} }
func (m *Automation) String() string { return proto.CompactTextString(m) }
func (*Automation) ProtoMessage()    {}
func (*Automation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb283a4587811ab2, []int{4}
}
func (m *Automation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Automation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Automation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Automation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Automation.Merge(m, src)
}
func (m *Automation) XXX_Size() int {
	return m.Size()
}
func (m *Automation) XXX_DiscardUnknown() {
	xxx_messageInfo_Automation.DiscardUnknown(m)
}

var xxx_messageInfo_Automation proto.InternalMessageInfo

func (m *Automation) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Automation) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Automation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Automation) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Automation) GetAddedAt() int64 {
	if m != nil {
		return m.AddedAt
	}
	return 0
}

func (m *Automation) GetLastExecution() int64 {
	if m != nil {
		return m.LastExecution
	}
	return 0
}

func (m *Automation) GetPeriodStart() int64 {
	if m != nil {
		return m.PeriodStart
	}
	return 0
}

func (m *Automation) GetPeriodTimesChecked() int64 {
	if m != nil {
		return m.PeriodTimesChecked
	}
	return 0
}

func (m *Automation) GetPeriodTimesExecuted() int64 {
	if m != nil {
		return m.PeriodTimesExecuted
	}
	return 0
}

func (m *Automation) GetPeriodConditionFeesConsumed() uint64 {
	if m != nil {
		return m.PeriodConditionFeesConsumed
	}
	return 0
}

func (m *Automation) GetPeriodActionFeesConsumed() uint64 {
	if m != nil {
		return m.PeriodActionFeesConsumed
	}
	return 0
}

func (m *Automation) GetTotalTimesExecuted() int64 {
	if m != nil {
		return m.TotalTimesExecuted
	}
	return 0
}

func (m *Automation) GetTotalConditionFeesConsumed() uint64 {
	if m != nil {
		return m.TotalConditionFeesConsumed
	}
	return 0
}

func (m *Automation) GetTotalActionFeesConsumed() uint64 {
	if m != nil {
		return m.TotalActionFeesConsumed
	}
	return 0
}

func (m *Automation) GetIntervalType() int64 {
	if m != nil {
		return m.IntervalType
	}
	return 0
}

func (m *Automation) GetIntervalLength() int64 {
	if m != nil {
		return m.IntervalLength
	}
	return 0
}

func (m *Automation) GetValidityType() int64 {
	if m != nil {
		return m.ValidityType
	}
	return 0
}

func (m *Automation) GetValidityValue() int64 {
	if m != nil {
		return m.ValidityValue
	}
	return 0
}

func (m *Automation) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Automation) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type GenesisAutomationFunds struct {
	Address string                `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Funds   cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=funds,proto3,customtype=cosmossdk.io/math.Int" json:"funds"`
}

func (m *GenesisAutomationFunds) Reset()         { *m = GenesisAutomationFunds{} }
func (m *GenesisAutomationFunds) String() string { return proto.CompactTextString(m) }
func (*GenesisAutomationFunds) ProtoMessage()    {}
func (*GenesisAutomationFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb283a4587811ab2, []int{5}
}
func (m *GenesisAutomationFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAutomationFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAutomationFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAutomationFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAutomationFunds.Merge(m, src)
}
func (m *GenesisAutomationFunds) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAutomationFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAutomationFunds.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAutomationFunds proto.InternalMessageInfo

func (m *GenesisAutomationFunds) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AutomationFunds struct {
	Funds cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=funds,proto3,customtype=cosmossdk.io/math.Int" json:"funds"`
}

func (m *AutomationFunds) Reset()         { *m = AutomationFunds{} }
func (m *AutomationFunds) String() string { return proto.CompactTextString(m) }
func (*AutomationFunds) ProtoMessage()    {}
func (*AutomationFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb283a4587811ab2, []int{6}
}
func (m *AutomationFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutomationFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutomationFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutomationFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutomationFunds.Merge(m, src)
}
func (m *AutomationFunds) XXX_Size() int {
	return m.Size()
}
func (m *AutomationFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_AutomationFunds.DiscardUnknown(m)
}

var xxx_messageInfo_AutomationFunds proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Condition)(nil), "kopi.strategies.Condition")
	proto.RegisterType((*Action)(nil), "kopi.strategies.Action")
	proto.RegisterType((*MessageCondition)(nil), "kopi.strategies.MessageCondition")
	proto.RegisterType((*InactiveReason)(nil), "kopi.strategies.InactiveReason")
	proto.RegisterType((*Automation)(nil), "kopi.strategies.Automation")
	proto.RegisterType((*GenesisAutomationFunds)(nil), "kopi.strategies.GenesisAutomationFunds")
	proto.RegisterType((*AutomationFunds)(nil), "kopi.strategies.AutomationFunds")
}

func init() { proto.RegisterFile("kopi/strategies/automations.proto", fileDescriptor_fb283a4587811ab2) }

var fileDescriptor_fb283a4587811ab2 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0xa3, 0x58, 0xb6, 0xc6, 0xb2, 0x94, 0x6e, 0x64, 0x87, 0x75, 0x10, 0xd9, 0x51, 0x10,
	0x44, 0x97, 0x48, 0x89, 0x73, 0x6a, 0x8b, 0xa2, 0x90, 0xdd, 0x38, 0x08, 0xe0, 0x02, 0x05, 0x6b,
	0xf4, 0xd0, 0x0b, 0xb1, 0x21, 0xc7, 0xf4, 0xc2, 0x22, 0x57, 0xe0, 0xae, 0x0c, 0xeb, 0x29, 0xda,
	0xb7, 0xe8, 0x13, 0xf4, 0x1d, 0x72, 0xe8, 0x21, 0xc7, 0xa2, 0x87, 0xa0, 0xb0, 0x5f, 0xa4, 0xd8,
	0xd9, 0x25, 0x4d, 0xc9, 0x2a, 0x5a, 0xf4, 0x94, 0x1b, 0x67, 0xbe, 0x6f, 0x66, 0xe7, 0x67, 0xbf,
	0x25, 0x3c, 0x3e, 0x97, 0x13, 0x31, 0x54, 0x3a, 0xe7, 0x1a, 0x13, 0x81, 0x6a, 0xc8, 0xa7, 0x5a,
	0xa6, 0x5c, 0x0b, 0x99, 0xa9, 0xc1, 0x24, 0x97, 0x5a, 0xb2, 0xb6, 0xa1, 0x0c, 0x6e, 0x28, 0x3b,
	0x9d, 0x44, 0x26, 0x92, 0xb0, 0xa1, 0xf9, 0xb2, 0xb4, 0xde, 0xcf, 0x77, 0xa0, 0x71, 0x28, 0xb3,
	0x58, 0x98, 0x58, 0xf6, 0x14, 0x5a, 0x51, 0x61, 0x84, 0x7a, 0x36, 0x41, 0xdf, 0xdb, 0xf3, 0xfa,
	0xb5, 0x60, 0xb3, 0xf4, 0x9e, 0xcc, 0x26, 0xc8, 0x7c, 0x58, 0x53, 0x3a, 0x17, 0x59, 0xf2, 0xd2,
	0xbf, 0xb3, 0xe7, 0xf5, 0x1b, 0x41, 0x61, 0xde, 0x20, 0xfb, 0x7e, 0xad, 0x8a, 0xec, 0xb3, 0x2e,
	0x40, 0x24, 0xd3, 0x09, 0xcf, 0x85, 0x92, 0x99, 0x7f, 0x97, 0xc0, 0x8a, 0x87, 0x7d, 0x01, 0xab,
	0x17, 0x7c, 0x3c, 0x45, 0x7f, 0x75, 0xcf, 0xeb, 0x37, 0x0f, 0x9e, 0xbc, 0xff, 0xb8, 0xbb, 0xf2,
	0xe7, 0xc7, 0xdd, 0x87, 0x91, 0x54, 0xa9, 0x54, 0x2a, 0x3e, 0x1f, 0x08, 0x39, 0x4c, 0xb9, 0x3e,
	0x1b, 0x1c, 0x63, 0xc2, 0xa3, 0xd9, 0xb7, 0x18, 0x05, 0x36, 0x82, 0x1d, 0x43, 0x3b, 0xc7, 0x53,
	0xcc, 0x31, 0x8b, 0x30, 0x9c, 0xe4, 0x22, 0x42, 0xbf, 0x5e, 0x26, 0xf1, 0xfe, 0x2d, 0x49, 0xab,
	0x8c, 0xfd, 0xde, 0x84, 0xf6, 0x7e, 0xf5, 0xa0, 0x3e, 0x8a, 0x68, 0x1c, 0xbb, 0xb0, 0xc1, 0xa3,
	0xc5, 0x59, 0x80, 0x75, 0xfd, 0xef, 0x41, 0x6c, 0x43, 0x9d, 0xa7, 0x72, 0x9a, 0x69, 0x37, 0x04,
	0x67, 0xb1, 0x17, 0xd0, 0x49, 0x45, 0x26, 0xd2, 0x69, 0x1a, 0xea, 0x9c, 0xc7, 0x18, 0x3a, 0xd6,
	0x2a, 0xb1, 0x98, 0xc3, 0x4e, 0x0c, 0x34, 0x22, 0xa4, 0xf7, 0xbb, 0x07, 0xf7, 0xbe, 0x43, 0xa5,
	0x78, 0x82, 0x9f, 0xc4, 0x0a, 0x3b, 0xd5, 0x15, 0x36, 0x8a, 0xed, 0x3c, 0x5b, 0xbe, 0x9d, 0xc6,
	0xad, 0xc1, 0xf7, 0xa1, 0xf5, 0x36, 0x33, 0xc3, 0xbd, 0xc0, 0x00, 0xb9, 0x49, 0xb8, 0x0d, 0xf5,
	0x9c, 0xbe, 0x5c, 0x0f, 0xce, 0xea, 0xfd, 0xb6, 0x06, 0x30, 0x2a, 0x6f, 0xbc, 0x39, 0x57, 0x64,
	0x31, 0x5e, 0x12, 0xeb, 0x6e, 0x60, 0x0d, 0xd3, 0x07, 0x8f, 0xe3, 0x1c, 0x95, 0x2a, 0x3a, 0x74,
	0xa6, 0xe1, 0x6b, 0xa1, 0xc7, 0xe8, 0xfa, 0xb3, 0x06, 0xed, 0x85, 0x0e, 0xa7, 0xce, 0xd6, 0x03,
	0x67, 0xb1, 0xcf, 0x61, 0x9d, 0xc7, 0x31, 0xc6, 0x21, 0xb7, 0xbb, 0xa8, 0x51, 0x22, 0x8c, 0x47,
	0xda, 0xcc, 0x7a, 0xcc, 0x95, 0x0e, 0xf1, 0x12, 0xa3, 0xa9, 0x29, 0x85, 0x3a, 0xab, 0x05, 0x9b,
	0xc6, 0xfb, 0xba, 0x70, 0xb2, 0xc7, 0xd0, 0x9c, 0x60, 0x2e, 0x64, 0x1c, 0x2a, 0xcd, 0x73, 0xed,
	0xaf, 0x11, 0x69, 0xc3, 0xfa, 0x7e, 0x30, 0x2e, 0xb3, 0x7c, 0x47, 0xd1, 0x22, 0x45, 0x15, 0x46,
	0x67, 0x18, 0x9d, 0x63, 0xec, 0xaf, 0x13, 0x95, 0x59, 0xec, 0xc4, 0x40, 0x87, 0x16, 0x61, 0xfb,
	0xb0, 0x35, 0x17, 0x61, 0x6b, 0xc0, 0xd8, 0x6f, 0x50, 0xc8, 0xfd, 0x4a, 0xc8, 0x6b, 0x07, 0xb1,
	0x43, 0xe8, 0xba, 0x98, 0x9b, 0x2b, 0x72, 0x8a, 0xe6, 0x38, 0x99, 0xa9, 0x69, 0x8a, 0xb1, 0x0f,
	0x34, 0xc1, 0x87, 0x96, 0x55, 0x5e, 0xaa, 0x23, 0x44, 0x75, 0xe8, 0x28, 0xec, 0x6b, 0x70, 0x70,
	0xe8, 0xb4, 0x31, 0x9f, 0x61, 0x83, 0x32, 0xf8, 0x96, 0x62, 0x75, 0x34, 0x17, 0xfe, 0x02, 0x3a,
	0x5a, 0x6a, 0x3e, 0x5e, 0x2c, 0xbb, 0x69, 0x3b, 0x25, 0x6c, 0xbe, 0xea, 0x11, 0x3c, 0xb2, 0x11,
	0xff, 0x54, 0xf4, 0x26, 0x1d, 0xb9, 0x43, 0xa4, 0xe5, 0x35, 0x7f, 0x05, 0x16, 0x5d, 0x5e, 0x72,
	0x8b, 0xe2, 0x1f, 0x10, 0x63, 0x49, 0xc5, 0x4f, 0x60, 0x53, 0x64, 0x1a, 0xf3, 0x0b, 0x53, 0xb4,
	0x11, 0x54, 0x9b, 0x4a, 0x6d, 0x16, 0x4e, 0xd2, 0xd3, 0x33, 0x68, 0x97, 0xa4, 0x31, 0x66, 0x89,
	0x3e, 0xf3, 0xef, 0x11, 0xad, 0x55, 0xb8, 0x8f, 0xc9, 0x6b, 0xb2, 0x5d, 0xf0, 0xb1, 0x88, 0x85,
	0x9e, 0xd9, 0x6c, 0x9f, 0xd9, 0x6c, 0x85, 0x93, 0xb2, 0x3d, 0x85, 0x56, 0x49, 0xb2, 0x92, 0x62,
	0xf6, 0x62, 0x15, 0xde, 0x1f, 0x49, 0x5a, 0x5f, 0x1a, 0x41, 0xba, 0x7e, 0x95, 0x7f, 0x7f, 0xaf,
	0xd6, 0xdf, 0xd8, 0xdf, 0x19, 0x2c, 0x3c, 0xfc, 0x83, 0x72, 0x24, 0x41, 0x85, 0xcd, 0x5e, 0xc2,
	0x9a, 0x1d, 0x86, 0xf2, 0x3b, 0x14, 0xf8, 0xe0, 0x56, 0xa0, 0x9d, 0x45, 0x50, 0xf0, 0xd8, 0x37,
	0xa6, 0x47, 0xab, 0x8a, 0xd0, 0xe9, 0x72, 0x8b, 0xde, 0xd9, 0x6d, 0xf7, 0xce, 0x2e, 0xe8, 0xd7,
	0xf4, 0x5e, 0xb5, 0x7b, 0x09, 0x6c, 0xbf, 0xc1, 0x0c, 0x95, 0x50, 0x37, 0xea, 0x3d, 0x9a, 0x66,
	0xb1, 0xaa, 0x8a, 0xd5, 0x9b, 0x17, 0xeb, 0x2b, 0x58, 0x3d, 0x35, 0x14, 0x12, 0x71, 0xf3, 0xe0,
	0x91, 0xfb, 0x2f, 0x6c, 0xdd, 0x7e, 0xd2, 0xdf, 0x66, 0x3a, 0xb0, 0xdc, 0xde, 0x11, 0xb4, 0x17,
	0x4f, 0x28, 0xf3, 0x78, 0xff, 0x3d, 0xcf, 0xc1, 0x9b, 0xf7, 0x57, 0x5d, 0xef, 0xc3, 0x55, 0xd7,
	0xfb, 0xeb, 0xaa, 0xeb, 0xfd, 0x72, 0xdd, 0x5d, 0xf9, 0x70, 0xdd, 0x5d, 0xf9, 0xe3, 0xba, 0xbb,
	0xf2, 0xd3, 0xf3, 0x44, 0xe8, 0xb3, 0xe9, 0xbb, 0x41, 0x24, 0xd3, 0xa1, 0x99, 0xdb, 0xf3, 0x54,
	0x66, 0x38, 0xa3, 0xcf, 0xe1, 0x65, 0xf5, 0xcf, 0x6c, 0x76, 0xac, 0xde, 0xd5, 0xe9, 0x6f, 0xfb,
	0xea, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xa8, 0xd5, 0x76, 0xb9, 0x07, 0x00, 0x00,
}

func (m *Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Condition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Condition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReferencePrice != nil {
		{
			size := m.ReferencePrice.Size()
			i -= size
			if _, err := m.ReferencePrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintAutomations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAutomations(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Comparison) > 0 {
		i -= len(m.Comparison)
		copy(dAtA[i:], m.Comparison)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.Comparison)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.String2) > 0 {
		i -= len(m.String2)
		copy(dAtA[i:], m.String2)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.String2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.String1) > 0 {
		i -= len(m.String1)
		copy(dAtA[i:], m.String1)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.String1)))
		i--
		dAtA[i] = 0x12
	}
	if m.ConditionType != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.ConditionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinimumTradeAmount) > 0 {
		i -= len(m.MinimumTradeAmount)
		copy(dAtA[i:], m.MinimumTradeAmount)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.MinimumTradeAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.String2) > 0 {
		i -= len(m.String2)
		copy(dAtA[i:], m.String2)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.String2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.String1) > 0 {
		i -= len(m.String1)
		copy(dAtA[i:], m.String1)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.String1)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActionType != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessageCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferencePrice) > 0 {
		i -= len(m.ReferencePrice)
		copy(dAtA[i:], m.ReferencePrice)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.ReferencePrice)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Comparison) > 0 {
		i -= len(m.Comparison)
		copy(dAtA[i:], m.Comparison)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.Comparison)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.String2) > 0 {
		i -= len(m.String2)
		copy(dAtA[i:], m.String2)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.String2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.String1) > 0 {
		i -= len(m.String1)
		copy(dAtA[i:], m.String1)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.String1)))
		i--
		dAtA[i] = 0x12
	}
	if m.ConditionType != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.ConditionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InactiveReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InactiveReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InactiveReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Automation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Automation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Automation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InactiveReason != nil {
		{
			size := m.InactiveReason.Size()
			i -= size
			if _, err := m.InactiveReason.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintAutomations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomations(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutomations(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.ValidityValue != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.ValidityValue))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ValidityType != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.ValidityType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IntervalLength != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.IntervalLength))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.IntervalType != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.IntervalType))
		i--
		dAtA[i] = 0x78
	}
	if m.TotalActionFeesConsumed != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.TotalActionFeesConsumed))
		i--
		dAtA[i] = 0x70
	}
	if m.TotalConditionFeesConsumed != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.TotalConditionFeesConsumed))
		i--
		dAtA[i] = 0x68
	}
	if m.TotalTimesExecuted != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.TotalTimesExecuted))
		i--
		dAtA[i] = 0x60
	}
	if m.PeriodActionFeesConsumed != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.PeriodActionFeesConsumed))
		i--
		dAtA[i] = 0x58
	}
	if m.PeriodConditionFeesConsumed != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.PeriodConditionFeesConsumed))
		i--
		dAtA[i] = 0x50
	}
	if m.PeriodTimesExecuted != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.PeriodTimesExecuted))
		i--
		dAtA[i] = 0x48
	}
	if m.PeriodTimesChecked != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.PeriodTimesChecked))
		i--
		dAtA[i] = 0x40
	}
	if m.PeriodStart != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.PeriodStart))
		i--
		dAtA[i] = 0x38
	}
	if m.LastExecution != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.LastExecution))
		i--
		dAtA[i] = 0x30
	}
	if m.AddedAt != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.AddedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintAutomations(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAutomationFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAutomationFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAutomationFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Funds.Size()
		i -= size
		if _, err := m.Funds.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAutomations(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAutomations(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutomationFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutomationFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutomationFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Funds.Size()
		i -= size
		if _, err := m.Funds.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAutomations(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAutomations(dAtA []byte, offset int, v uint64) int {
	offset -= sovAutomations(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConditionType != 0 {
		n += 1 + sovAutomations(uint64(m.ConditionType))
	}
	l = len(m.String1)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.String2)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.Comparison)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovAutomations(uint64(l))
	if m.ReferencePrice != nil {
		l = m.ReferencePrice.Size()
		n += 1 + l + sovAutomations(uint64(l))
	}
	return n
}

func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionType != 0 {
		n += 1 + sovAutomations(uint64(m.ActionType))
	}
	l = len(m.String1)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.String2)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.MinimumTradeAmount)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	return n
}

func (m *MessageCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConditionType != 0 {
		n += 1 + sovAutomations(uint64(m.ConditionType))
	}
	l = len(m.String1)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.String2)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.Comparison)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.ReferencePrice)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	return n
}

func (m *InactiveReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovAutomations(uint64(m.Reason))
	}
	return n
}

func (m *Automation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovAutomations(uint64(m.Index))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.AddedAt != 0 {
		n += 1 + sovAutomations(uint64(m.AddedAt))
	}
	if m.LastExecution != 0 {
		n += 1 + sovAutomations(uint64(m.LastExecution))
	}
	if m.PeriodStart != 0 {
		n += 1 + sovAutomations(uint64(m.PeriodStart))
	}
	if m.PeriodTimesChecked != 0 {
		n += 1 + sovAutomations(uint64(m.PeriodTimesChecked))
	}
	if m.PeriodTimesExecuted != 0 {
		n += 1 + sovAutomations(uint64(m.PeriodTimesExecuted))
	}
	if m.PeriodConditionFeesConsumed != 0 {
		n += 1 + sovAutomations(uint64(m.PeriodConditionFeesConsumed))
	}
	if m.PeriodActionFeesConsumed != 0 {
		n += 1 + sovAutomations(uint64(m.PeriodActionFeesConsumed))
	}
	if m.TotalTimesExecuted != 0 {
		n += 1 + sovAutomations(uint64(m.TotalTimesExecuted))
	}
	if m.TotalConditionFeesConsumed != 0 {
		n += 1 + sovAutomations(uint64(m.TotalConditionFeesConsumed))
	}
	if m.TotalActionFeesConsumed != 0 {
		n += 1 + sovAutomations(uint64(m.TotalActionFeesConsumed))
	}
	if m.IntervalType != 0 {
		n += 1 + sovAutomations(uint64(m.IntervalType))
	}
	if m.IntervalLength != 0 {
		n += 2 + sovAutomations(uint64(m.IntervalLength))
	}
	if m.ValidityType != 0 {
		n += 2 + sovAutomations(uint64(m.ValidityType))
	}
	if m.ValidityValue != 0 {
		n += 2 + sovAutomations(uint64(m.ValidityValue))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 2 + l + sovAutomations(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 2 + l + sovAutomations(uint64(l))
		}
	}
	if m.InactiveReason != nil {
		l = m.InactiveReason.Size()
		n += 2 + l + sovAutomations(uint64(l))
	}
	return n
}

func (m *GenesisAutomationFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAutomations(uint64(l))
	}
	l = m.Funds.Size()
	n += 1 + l + sovAutomations(uint64(l))
	return n
}

func (m *AutomationFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Funds.Size()
	n += 1 + l + sovAutomations(uint64(l))
	return n
}

func sovAutomations(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAutomations(x uint64) (n int) {
	return sovAutomations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionType", wireType)
			}
			m.ConditionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConditionType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comparison", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comparison = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencePrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.ReferencePrice = &v
			if err := m.ReferencePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumTradeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumTradeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionType", wireType)
			}
			m.ConditionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConditionType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comparison", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comparison = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferencePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InactiveReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InactiveReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InactiveReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutomations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Automation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Automation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Automation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAt", wireType)
			}
			m.AddedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecution", wireType)
			}
			m.LastExecution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastExecution |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStart", wireType)
			}
			m.PeriodStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodTimesChecked", wireType)
			}
			m.PeriodTimesChecked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodTimesChecked |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodTimesExecuted", wireType)
			}
			m.PeriodTimesExecuted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodTimesExecuted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodConditionFeesConsumed", wireType)
			}
			m.PeriodConditionFeesConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodConditionFeesConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodActionFeesConsumed", wireType)
			}
			m.PeriodActionFeesConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodActionFeesConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTimesExecuted", wireType)
			}
			m.TotalTimesExecuted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTimesExecuted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalConditionFeesConsumed", wireType)
			}
			m.TotalConditionFeesConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalConditionFeesConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActionFeesConsumed", wireType)
			}
			m.TotalActionFeesConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalActionFeesConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalType", wireType)
			}
			m.IntervalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalLength", wireType)
			}
			m.IntervalLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityType", wireType)
			}
			m.ValidityType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidityType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityValue", wireType)
			}
			m.ValidityValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidityValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveReason", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v InactiveReason
			m.InactiveReason = &v
			if err := m.InactiveReason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisAutomationFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisAutomationFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisAutomationFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Funds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutomationFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutomations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutomationFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutomationFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAutomations
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAutomations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Funds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutomations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutomations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAutomations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAutomations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutomations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAutomations
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAutomations
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAutomations
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAutomations        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAutomations          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAutomations = fmt.Errorf("proto: unexpected end of group")
)
