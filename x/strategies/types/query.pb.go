// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/strategies/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAutomationsStatsRequest struct {
}

func (m *QueryAutomationsStatsRequest) Reset()         { *m = QueryAutomationsStatsRequest{} }
func (m *QueryAutomationsStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsStatsRequest) ProtoMessage()    {}
func (*QueryAutomationsStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{0}
}
func (m *QueryAutomationsStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsStatsRequest.Merge(m, src)
}
func (m *QueryAutomationsStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsStatsRequest proto.InternalMessageInfo

type QueryAutomationsStatsResponse struct {
	Total  int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Active int64 `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *QueryAutomationsStatsResponse) Reset()         { *m = QueryAutomationsStatsResponse{} }
func (m *QueryAutomationsStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsStatsResponse) ProtoMessage()    {}
func (*QueryAutomationsStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{1}
}
func (m *QueryAutomationsStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsStatsResponse.Merge(m, src)
}
func (m *QueryAutomationsStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsStatsResponse proto.InternalMessageInfo

func (m *QueryAutomationsStatsResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *QueryAutomationsStatsResponse) GetActive() int64 {
	if m != nil {
		return m.Active
	}
	return 0
}

type QueryAutomationsFundsRequest struct {
}

func (m *QueryAutomationsFundsRequest) Reset()         { *m = QueryAutomationsFundsRequest{} }
func (m *QueryAutomationsFundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsFundsRequest) ProtoMessage()    {}
func (*QueryAutomationsFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{2}
}
func (m *QueryAutomationsFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsFundsRequest.Merge(m, src)
}
func (m *QueryAutomationsFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsFundsRequest proto.InternalMessageInfo

type QueryAutomationsFundsResponse struct {
	Pool string `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Sum  string `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *QueryAutomationsFundsResponse) Reset()         { *m = QueryAutomationsFundsResponse{} }
func (m *QueryAutomationsFundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsFundsResponse) ProtoMessage()    {}
func (*QueryAutomationsFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{3}
}
func (m *QueryAutomationsFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsFundsResponse.Merge(m, src)
}
func (m *QueryAutomationsFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsFundsResponse proto.InternalMessageInfo

func (m *QueryAutomationsFundsResponse) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *QueryAutomationsFundsResponse) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

type QueryAutomationsByIndex struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryAutomationsByIndex) Reset()         { *m = QueryAutomationsByIndex{} }
func (m *QueryAutomationsByIndex) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsByIndex) ProtoMessage()    {}
func (*QueryAutomationsByIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{4}
}
func (m *QueryAutomationsByIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsByIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsByIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsByIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsByIndex.Merge(m, src)
}
func (m *QueryAutomationsByIndex) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsByIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsByIndex.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsByIndex proto.InternalMessageInfo

func (m *QueryAutomationsByIndex) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryAutomationsAllRequest struct {
}

func (m *QueryAutomationsAllRequest) Reset()         { *m = QueryAutomationsAllRequest{} }
func (m *QueryAutomationsAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsAllRequest) ProtoMessage()    {}
func (*QueryAutomationsAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{5}
}
func (m *QueryAutomationsAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsAllRequest.Merge(m, src)
}
func (m *QueryAutomationsAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsAllRequest proto.InternalMessageInfo

type QueryAutomationsAddressFundsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAutomationsAddressFundsRequest) Reset()         { *m = QueryAutomationsAddressFundsRequest{} }
func (m *QueryAutomationsAddressFundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsAddressFundsRequest) ProtoMessage()    {}
func (*QueryAutomationsAddressFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{6}
}
func (m *QueryAutomationsAddressFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsAddressFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsAddressFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsAddressFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsAddressFundsRequest.Merge(m, src)
}
func (m *QueryAutomationsAddressFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsAddressFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsAddressFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsAddressFundsRequest proto.InternalMessageInfo

func (m *QueryAutomationsAddressFundsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAutomationsAddressFundsResponse struct {
	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Funds   string `protobuf:"bytes,2,opt,name=funds,proto3" json:"funds,omitempty"`
}

func (m *QueryAutomationsAddressFundsResponse) Reset()         { *m = QueryAutomationsAddressFundsResponse{} }
func (m *QueryAutomationsAddressFundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsAddressFundsResponse) ProtoMessage()    {}
func (*QueryAutomationsAddressFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{7}
}
func (m *QueryAutomationsAddressFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsAddressFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsAddressFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsAddressFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsAddressFundsResponse.Merge(m, src)
}
func (m *QueryAutomationsAddressFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsAddressFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsAddressFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsAddressFundsResponse proto.InternalMessageInfo

func (m *QueryAutomationsAddressFundsResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *QueryAutomationsAddressFundsResponse) GetFunds() string {
	if m != nil {
		return m.Funds
	}
	return ""
}

type QueryAutomationsAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAutomationsAddressRequest) Reset()         { *m = QueryAutomationsAddressRequest{} }
func (m *QueryAutomationsAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsAddressRequest) ProtoMessage()    {}
func (*QueryAutomationsAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{8}
}
func (m *QueryAutomationsAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsAddressRequest.Merge(m, src)
}
func (m *QueryAutomationsAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsAddressRequest proto.InternalMessageInfo

func (m *QueryAutomationsAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAutomationsResponse struct {
	Automations []*Automation `protobuf:"bytes,1,rep,name=automations,proto3" json:"automations,omitempty"`
}

func (m *QueryAutomationsResponse) Reset()         { *m = QueryAutomationsResponse{} }
func (m *QueryAutomationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAutomationsResponse) ProtoMessage()    {}
func (*QueryAutomationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{9}
}
func (m *QueryAutomationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAutomationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAutomationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAutomationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAutomationsResponse.Merge(m, src)
}
func (m *QueryAutomationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAutomationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAutomationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAutomationsResponse proto.InternalMessageInfo

func (m *QueryAutomationsResponse) GetAutomations() []*Automation {
	if m != nil {
		return m.Automations
	}
	return nil
}

type QueryArbitrageBalancesRequest struct {
}

func (m *QueryArbitrageBalancesRequest) Reset()         { *m = QueryArbitrageBalancesRequest{} }
func (m *QueryArbitrageBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryArbitrageBalancesRequest) ProtoMessage()    {}
func (*QueryArbitrageBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{10}
}
func (m *QueryArbitrageBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArbitrageBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArbitrageBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArbitrageBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArbitrageBalancesRequest.Merge(m, src)
}
func (m *QueryArbitrageBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryArbitrageBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArbitrageBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArbitrageBalancesRequest proto.InternalMessageInfo

type ArbitrageBalance struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CAsset        string `protobuf:"bytes,2,opt,name=c_asset,json=cAsset,proto3" json:"c_asset,omitempty"`
	KCoin         string `protobuf:"bytes,3,opt,name=k_coin,json=kCoin,proto3" json:"k_coin,omitempty"`
	Base          string `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	Supply        string `protobuf:"bytes,5,opt,name=supply,proto3" json:"supply,omitempty"`
	TokenValue    string `protobuf:"bytes,6,opt,name=token_value,json=tokenValue,proto3" json:"token_value,omitempty"`
	TokenValueUsd string `protobuf:"bytes,7,opt,name=token_value_usd,json=tokenValueUsd,proto3" json:"token_value_usd,omitempty"`
	VaultCAsset   string `protobuf:"bytes,8,opt,name=vault_c_asset,json=vaultCAsset,proto3" json:"vault_c_asset,omitempty"`
	VaultKCoin    string `protobuf:"bytes,9,opt,name=vault_k_coin,json=vaultKCoin,proto3" json:"vault_k_coin,omitempty"`
	Parity        string `protobuf:"bytes,10,opt,name=parity,proto3" json:"parity,omitempty"`
}

func (m *ArbitrageBalance) Reset()         { *m = ArbitrageBalance{} }
func (m *ArbitrageBalance) String() string { return proto.CompactTextString(m) }
func (*ArbitrageBalance) ProtoMessage()    {}
func (*ArbitrageBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{11}
}
func (m *ArbitrageBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbitrageBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbitrageBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbitrageBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbitrageBalance.Merge(m, src)
}
func (m *ArbitrageBalance) XXX_Size() int {
	return m.Size()
}
func (m *ArbitrageBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbitrageBalance.DiscardUnknown(m)
}

var xxx_messageInfo_ArbitrageBalance proto.InternalMessageInfo

func (m *ArbitrageBalance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArbitrageBalance) GetCAsset() string {
	if m != nil {
		return m.CAsset
	}
	return ""
}

func (m *ArbitrageBalance) GetKCoin() string {
	if m != nil {
		return m.KCoin
	}
	return ""
}

func (m *ArbitrageBalance) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *ArbitrageBalance) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

func (m *ArbitrageBalance) GetTokenValue() string {
	if m != nil {
		return m.TokenValue
	}
	return ""
}

func (m *ArbitrageBalance) GetTokenValueUsd() string {
	if m != nil {
		return m.TokenValueUsd
	}
	return ""
}

func (m *ArbitrageBalance) GetVaultCAsset() string {
	if m != nil {
		return m.VaultCAsset
	}
	return ""
}

func (m *ArbitrageBalance) GetVaultKCoin() string {
	if m != nil {
		return m.VaultKCoin
	}
	return ""
}

func (m *ArbitrageBalance) GetParity() string {
	if m != nil {
		return m.Parity
	}
	return ""
}

type QueryArbitrageBalancesResponse struct {
	Balances      []*ArbitrageBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
	TotalValueUsd string              `protobuf:"bytes,2,opt,name=total_value_usd,json=totalValueUsd,proto3" json:"total_value_usd,omitempty"`
}

func (m *QueryArbitrageBalancesResponse) Reset()         { *m = QueryArbitrageBalancesResponse{} }
func (m *QueryArbitrageBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryArbitrageBalancesResponse) ProtoMessage()    {}
func (*QueryArbitrageBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{12}
}
func (m *QueryArbitrageBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArbitrageBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArbitrageBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArbitrageBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArbitrageBalancesResponse.Merge(m, src)
}
func (m *QueryArbitrageBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryArbitrageBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArbitrageBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArbitrageBalancesResponse proto.InternalMessageInfo

func (m *QueryArbitrageBalancesResponse) GetBalances() []*ArbitrageBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *QueryArbitrageBalancesResponse) GetTotalValueUsd() string {
	if m != nil {
		return m.TotalValueUsd
	}
	return ""
}

type ArbitrageBalanceAddress struct {
	Name                          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CAsset                        string `protobuf:"bytes,2,opt,name=c_asset,json=cAsset,proto3" json:"c_asset,omitempty"`
	KCoin                         string `protobuf:"bytes,3,opt,name=k_coin,json=kCoin,proto3" json:"k_coin,omitempty"`
	Base                          string `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	Supply                        string `protobuf:"bytes,5,opt,name=supply,proto3" json:"supply,omitempty"`
	VaultCAsset                   string `protobuf:"bytes,6,opt,name=vault_c_asset,json=vaultCAsset,proto3" json:"vault_c_asset,omitempty"`
	VaultKCoin                    string `protobuf:"bytes,7,opt,name=vault_k_coin,json=vaultKCoin,proto3" json:"vault_k_coin,omitempty"`
	Parity                        string `protobuf:"bytes,8,opt,name=parity,proto3" json:"parity,omitempty"`
	UserBalanceArbitrage          string `protobuf:"bytes,9,opt,name=user_balance_arbitrage,json=userBalanceArbitrage,proto3" json:"user_balance_arbitrage,omitempty"`
	UserBalanceArbitrageUsd       string `protobuf:"bytes,10,opt,name=user_balance_arbitrage_usd,json=userBalanceArbitrageUsd,proto3" json:"user_balance_arbitrage_usd,omitempty"`
	UserBalanceCAsset             string `protobuf:"bytes,11,opt,name=user_balance_c_asset,json=userBalanceCAsset,proto3" json:"user_balance_c_asset,omitempty"`
	UserBalanceCAssetUsd          string `protobuf:"bytes,12,opt,name=user_balance_c_asset_usd,json=userBalanceCAssetUsd,proto3" json:"user_balance_c_asset_usd,omitempty"`
	UserBalanceBase               string `protobuf:"bytes,13,opt,name=user_balance_base,json=userBalanceBase,proto3" json:"user_balance_base,omitempty"`
	UserBalanceBaseUsd            string `protobuf:"bytes,14,opt,name=user_balance_base_usd,json=userBalanceBaseUsd,proto3" json:"user_balance_base_usd,omitempty"`
	UserBalanceBaseArbRedeemed    string `protobuf:"bytes,15,opt,name=user_balance_base_arb_redeemed,json=userBalanceBaseArbRedeemed,proto3" json:"user_balance_base_arb_redeemed,omitempty"`
	UserBalanceBaseArbRedeemedUsd string `protobuf:"bytes,16,opt,name=user_balance_base_arb_redeemed_usd,json=userBalanceBaseArbRedeemedUsd,proto3" json:"user_balance_base_arb_redeemed_usd,omitempty"`
}

func (m *ArbitrageBalanceAddress) Reset()         { *m = ArbitrageBalanceAddress{} }
func (m *ArbitrageBalanceAddress) String() string { return proto.CompactTextString(m) }
func (*ArbitrageBalanceAddress) ProtoMessage()    {}
func (*ArbitrageBalanceAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{13}
}
func (m *ArbitrageBalanceAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbitrageBalanceAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbitrageBalanceAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbitrageBalanceAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbitrageBalanceAddress.Merge(m, src)
}
func (m *ArbitrageBalanceAddress) XXX_Size() int {
	return m.Size()
}
func (m *ArbitrageBalanceAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbitrageBalanceAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ArbitrageBalanceAddress proto.InternalMessageInfo

func (m *ArbitrageBalanceAddress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetCAsset() string {
	if m != nil {
		return m.CAsset
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetKCoin() string {
	if m != nil {
		return m.KCoin
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetVaultCAsset() string {
	if m != nil {
		return m.VaultCAsset
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetVaultKCoin() string {
	if m != nil {
		return m.VaultKCoin
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetParity() string {
	if m != nil {
		return m.Parity
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetUserBalanceArbitrage() string {
	if m != nil {
		return m.UserBalanceArbitrage
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetUserBalanceArbitrageUsd() string {
	if m != nil {
		return m.UserBalanceArbitrageUsd
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetUserBalanceCAsset() string {
	if m != nil {
		return m.UserBalanceCAsset
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetUserBalanceCAssetUsd() string {
	if m != nil {
		return m.UserBalanceCAssetUsd
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetUserBalanceBase() string {
	if m != nil {
		return m.UserBalanceBase
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetUserBalanceBaseUsd() string {
	if m != nil {
		return m.UserBalanceBaseUsd
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetUserBalanceBaseArbRedeemed() string {
	if m != nil {
		return m.UserBalanceBaseArbRedeemed
	}
	return ""
}

func (m *ArbitrageBalanceAddress) GetUserBalanceBaseArbRedeemedUsd() string {
	if m != nil {
		return m.UserBalanceBaseArbRedeemedUsd
	}
	return ""
}

type QueryArbitrageBalancesAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryArbitrageBalancesAddressRequest) Reset()         { *m = QueryArbitrageBalancesAddressRequest{} }
func (m *QueryArbitrageBalancesAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryArbitrageBalancesAddressRequest) ProtoMessage()    {}
func (*QueryArbitrageBalancesAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{14}
}
func (m *QueryArbitrageBalancesAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArbitrageBalancesAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArbitrageBalancesAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArbitrageBalancesAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArbitrageBalancesAddressRequest.Merge(m, src)
}
func (m *QueryArbitrageBalancesAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryArbitrageBalancesAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArbitrageBalancesAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArbitrageBalancesAddressRequest proto.InternalMessageInfo

func (m *QueryArbitrageBalancesAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryArbitrageBalancesAddressResponse struct {
	Balances []*ArbitrageBalanceAddress `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (m *QueryArbitrageBalancesAddressResponse) Reset()         { *m = QueryArbitrageBalancesAddressResponse{} }
func (m *QueryArbitrageBalancesAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryArbitrageBalancesAddressResponse) ProtoMessage()    {}
func (*QueryArbitrageBalancesAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{15}
}
func (m *QueryArbitrageBalancesAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArbitrageBalancesAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArbitrageBalancesAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArbitrageBalancesAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArbitrageBalancesAddressResponse.Merge(m, src)
}
func (m *QueryArbitrageBalancesAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryArbitrageBalancesAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArbitrageBalancesAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArbitrageBalancesAddressResponse proto.InternalMessageInfo

func (m *QueryArbitrageBalancesAddressResponse) GetBalances() []*ArbitrageBalanceAddress {
	if m != nil {
		return m.Balances
	}
	return nil
}

type QueryArbitrageDenomBalanceRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryArbitrageDenomBalanceRequest) Reset()         { *m = QueryArbitrageDenomBalanceRequest{} }
func (m *QueryArbitrageDenomBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryArbitrageDenomBalanceRequest) ProtoMessage()    {}
func (*QueryArbitrageDenomBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{16}
}
func (m *QueryArbitrageDenomBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArbitrageDenomBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArbitrageDenomBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArbitrageDenomBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArbitrageDenomBalanceRequest.Merge(m, src)
}
func (m *QueryArbitrageDenomBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryArbitrageDenomBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArbitrageDenomBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArbitrageDenomBalanceRequest proto.InternalMessageInfo

func (m *QueryArbitrageDenomBalanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryArbitrageDenomBalanceResponse struct {
	KCoin  string `protobuf:"bytes,1,opt,name=k_coin,json=kCoin,proto3" json:"k_coin,omitempty"`
	CAsset string `protobuf:"bytes,2,opt,name=c_asset,json=cAsset,proto3" json:"c_asset,omitempty"`
	Supply string `protobuf:"bytes,3,opt,name=supply,proto3" json:"supply,omitempty"`
}

func (m *QueryArbitrageDenomBalanceResponse) Reset()         { *m = QueryArbitrageDenomBalanceResponse{} }
func (m *QueryArbitrageDenomBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryArbitrageDenomBalanceResponse) ProtoMessage()    {}
func (*QueryArbitrageDenomBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{17}
}
func (m *QueryArbitrageDenomBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArbitrageDenomBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArbitrageDenomBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArbitrageDenomBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArbitrageDenomBalanceResponse.Merge(m, src)
}
func (m *QueryArbitrageDenomBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryArbitrageDenomBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArbitrageDenomBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArbitrageDenomBalanceResponse proto.InternalMessageInfo

func (m *QueryArbitrageDenomBalanceResponse) GetKCoin() string {
	if m != nil {
		return m.KCoin
	}
	return ""
}

func (m *QueryArbitrageDenomBalanceResponse) GetCAsset() string {
	if m != nil {
		return m.CAsset
	}
	return ""
}

func (m *QueryArbitrageDenomBalanceResponse) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{18}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be795b4b2d4c866c, []int{19}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryAutomationsStatsRequest)(nil), "kopi.strategies.QueryAutomationsStatsRequest")
	proto.RegisterType((*QueryAutomationsStatsResponse)(nil), "kopi.strategies.QueryAutomationsStatsResponse")
	proto.RegisterType((*QueryAutomationsFundsRequest)(nil), "kopi.strategies.QueryAutomationsFundsRequest")
	proto.RegisterType((*QueryAutomationsFundsResponse)(nil), "kopi.strategies.QueryAutomationsFundsResponse")
	proto.RegisterType((*QueryAutomationsByIndex)(nil), "kopi.strategies.QueryAutomationsByIndex")
	proto.RegisterType((*QueryAutomationsAllRequest)(nil), "kopi.strategies.QueryAutomationsAllRequest")
	proto.RegisterType((*QueryAutomationsAddressFundsRequest)(nil), "kopi.strategies.QueryAutomationsAddressFundsRequest")
	proto.RegisterType((*QueryAutomationsAddressFundsResponse)(nil), "kopi.strategies.QueryAutomationsAddressFundsResponse")
	proto.RegisterType((*QueryAutomationsAddressRequest)(nil), "kopi.strategies.QueryAutomationsAddressRequest")
	proto.RegisterType((*QueryAutomationsResponse)(nil), "kopi.strategies.QueryAutomationsResponse")
	proto.RegisterType((*QueryArbitrageBalancesRequest)(nil), "kopi.strategies.QueryArbitrageBalancesRequest")
	proto.RegisterType((*ArbitrageBalance)(nil), "kopi.strategies.ArbitrageBalance")
	proto.RegisterType((*QueryArbitrageBalancesResponse)(nil), "kopi.strategies.QueryArbitrageBalancesResponse")
	proto.RegisterType((*ArbitrageBalanceAddress)(nil), "kopi.strategies.ArbitrageBalanceAddress")
	proto.RegisterType((*QueryArbitrageBalancesAddressRequest)(nil), "kopi.strategies.QueryArbitrageBalancesAddressRequest")
	proto.RegisterType((*QueryArbitrageBalancesAddressResponse)(nil), "kopi.strategies.QueryArbitrageBalancesAddressResponse")
	proto.RegisterType((*QueryArbitrageDenomBalanceRequest)(nil), "kopi.strategies.QueryArbitrageDenomBalanceRequest")
	proto.RegisterType((*QueryArbitrageDenomBalanceResponse)(nil), "kopi.strategies.QueryArbitrageDenomBalanceResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "kopi.strategies.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "kopi.strategies.QueryParamsResponse")
}

func init() { proto.RegisterFile("kopi/strategies/query.proto", fileDescriptor_be795b4b2d4c866c) }

var fileDescriptor_be795b4b2d4c866c = []byte{
	// 1226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0x26, 0x8d, 0xd3, 0x3c, 0x37, 0x4d, 0x32, 0x5f, 0x27, 0xde, 0xef, 0x36, 0x75, 0x92,
	0x6d, 0x0a, 0x21, 0x25, 0x5e, 0xf2, 0xa3, 0x91, 0x28, 0x42, 0x10, 0xb7, 0x80, 0x2a, 0x84, 0x44,
	0x8d, 0xa8, 0x04, 0x17, 0x6b, 0x6c, 0x0f, 0x66, 0x15, 0xef, 0x8e, 0xbb, 0x3b, 0x8e, 0x6a, 0x55,
	0xbd, 0x70, 0x81, 0x13, 0x42, 0xe2, 0xc0, 0x89, 0x7b, 0xb9, 0xc1, 0x81, 0x1b, 0xe2, 0xdc, 0x63,
	0x25, 0x24, 0xc4, 0x09, 0xa1, 0x04, 0x89, 0x7f, 0x03, 0xcd, 0x2f, 0x7b, 0x7f, 0xd8, 0x6b, 0xe7,
	0xc2, 0xc5, 0x9a, 0x99, 0xf7, 0x3e, 0xef, 0x7d, 0xde, 0x7b, 0xf3, 0xd6, 0x6f, 0xe0, 0xda, 0x09,
	0xed, 0xb8, 0x4e, 0xc8, 0x02, 0xcc, 0x48, 0xcb, 0x25, 0xa1, 0xf3, 0xa8, 0x4b, 0x82, 0x5e, 0xb9,
	0x13, 0x50, 0x46, 0xd1, 0x22, 0x17, 0x96, 0x07, 0x42, 0x6b, 0x19, 0x7b, 0xae, 0x4f, 0x1d, 0xf1,
	0x2b, 0x75, 0xac, 0x42, 0x8b, 0xb6, 0xa8, 0x58, 0x3a, 0x7c, 0xa5, 0x4e, 0xd7, 0x5a, 0x94, 0xb6,
	0xda, 0xc4, 0xc1, 0x1d, 0xd7, 0xc1, 0xbe, 0x4f, 0x19, 0x66, 0x2e, 0xf5, 0x43, 0x25, 0xdd, 0x69,
	0xd0, 0xd0, 0xa3, 0xa1, 0x53, 0xc7, 0x21, 0x91, 0x0e, 0x9d, 0xd3, 0xbd, 0x3a, 0x61, 0x78, 0xcf,
	0xe9, 0xe0, 0x96, 0xeb, 0x0b, 0x65, 0x6d, 0x29, 0x49, 0xb0, 0x83, 0x03, 0xec, 0x69, 0x4b, 0x9b,
	0x49, 0x29, 0xee, 0x32, 0xea, 0x45, 0x9d, 0xd9, 0x25, 0x58, 0x7b, 0xc0, 0x5d, 0x1c, 0x0f, 0x24,
	0x1f, 0x31, 0xcc, 0xc2, 0x2a, 0x79, 0xd4, 0x25, 0x21, 0xb3, 0x3f, 0x80, 0xeb, 0x23, 0xe4, 0x61,
	0x87, 0xfa, 0x21, 0x41, 0x05, 0x98, 0x65, 0x94, 0xe1, 0xb6, 0x69, 0x6c, 0x18, 0xdb, 0x33, 0x55,
	0xb9, 0x41, 0xab, 0x90, 0xc3, 0x0d, 0xe6, 0x9e, 0x12, 0x73, 0x5a, 0x1c, 0xab, 0xdd, 0x30, 0x77,
	0xef, 0x76, 0xfd, 0x66, 0xdf, 0xdd, 0x3b, 0x69, 0x77, 0x4a, 0xae, 0xdc, 0x21, 0xb8, 0xd4, 0xa1,
	0x54, 0x7a, 0x9b, 0xaf, 0x8a, 0x35, 0x5a, 0x82, 0x99, 0xb0, 0xeb, 0x09, 0x4f, 0xf3, 0x55, 0xbe,
	0xb4, 0x1d, 0x28, 0x26, 0xcd, 0x54, 0x7a, 0xf7, 0xfd, 0x26, 0x79, 0xcc, 0xf9, 0xba, 0x7c, 0xa1,
	0x2c, 0xc8, 0x8d, 0xbd, 0x06, 0x56, 0x12, 0x70, 0xdc, 0x6e, 0x6b, 0x56, 0x6f, 0xc1, 0x8d, 0x94,
	0xb4, 0xd9, 0x0c, 0x48, 0x18, 0x23, 0x8f, 0x4c, 0x98, 0xc3, 0xf2, 0x58, 0x19, 0xd7, 0x5b, 0xfb,
	0x21, 0x6c, 0x65, 0x1b, 0x50, 0xd1, 0x99, 0x30, 0x57, 0xc7, 0x6d, 0xec, 0x37, 0x88, 0xb6, 0xa0,
	0xb6, 0x9c, 0xf6, 0x67, 0x5c, 0x55, 0x45, 0x29, 0x37, 0xf6, 0x1d, 0x28, 0x8d, 0xb0, 0x3b, 0x9e,
	0xd3, 0x27, 0x60, 0x26, 0xb1, 0x7d, 0x1e, 0x6f, 0x42, 0x3e, 0x72, 0x55, 0x4c, 0x63, 0x63, 0x66,
	0x3b, 0xbf, 0x7f, 0xad, 0x9c, 0xb8, 0xf0, 0xe5, 0x01, 0xb4, 0x1a, 0xd5, 0xb7, 0xd7, 0x75, 0x15,
	0x83, 0xba, 0xcb, 0x02, 0xdc, 0x22, 0x15, 0x19, 0x45, 0xbf, 0xcc, 0x3f, 0x4c, 0xc3, 0x52, 0x52,
	0xc8, 0x4b, 0xeb, 0x63, 0x4f, 0x47, 0x2e, 0xd6, 0xa8, 0x08, 0x73, 0x8d, 0x1a, 0x0e, 0x43, 0xc2,
	0x54, 0xe0, 0xb9, 0xc6, 0x31, 0xdf, 0xa1, 0x15, 0xc8, 0x9d, 0xd4, 0x1a, 0xd4, 0xf5, 0xcd, 0x19,
	0x99, 0x90, 0x93, 0xbb, 0xd4, 0xf5, 0xb9, 0x0d, 0xde, 0x36, 0xe6, 0x25, 0x69, 0x83, 0xaf, 0xf9,
	0x5d, 0x0c, 0xbb, 0x9d, 0x4e, 0xbb, 0x67, 0xce, 0x4a, 0x13, 0x72, 0x87, 0xd6, 0x21, 0xcf, 0xe8,
	0x09, 0xf1, 0x6b, 0xa7, 0xb8, 0xdd, 0x25, 0x66, 0x4e, 0x08, 0x41, 0x1c, 0x3d, 0xe4, 0x27, 0xe8,
	0x25, 0x58, 0x8c, 0x28, 0xd4, 0xba, 0x61, 0xd3, 0x9c, 0x13, 0x4a, 0x0b, 0x03, 0xa5, 0x8f, 0xc3,
	0x26, 0xb2, 0x61, 0xe1, 0x14, 0x77, 0xdb, 0xac, 0xa6, 0xa9, 0x5e, 0x16, 0x5a, 0x79, 0x71, 0x78,
	0x57, 0xf2, 0xdd, 0x80, 0x2b, 0x52, 0x47, 0xb1, 0x9e, 0x97, 0xde, 0xc4, 0xd9, 0xfb, 0x82, 0xfa,
	0x2a, 0xe4, 0x3a, 0x38, 0x70, 0x59, 0xcf, 0x04, 0x49, 0x53, 0xee, 0xec, 0x2f, 0x0d, 0x5d, 0xe4,
	0x74, 0x36, 0xfb, 0xe5, 0xba, 0xac, 0xee, 0x89, 0xae, 0xd5, 0x66, 0xba, 0x56, 0x09, 0x74, 0xb5,
	0x0f, 0x91, 0x71, 0x32, 0xdc, 0x8e, 0xc4, 0x39, 0xad, 0xe3, 0x64, 0xb8, 0xad, 0xe3, 0xb4, 0x7f,
	0x9a, 0x85, 0x62, 0xd2, 0x8c, 0xba, 0x6e, 0xff, 0x79, 0xf1, 0x52, 0x39, 0xcf, 0x8d, 0xcf, 0xf9,
	0x5c, 0x46, 0xce, 0x2f, 0x47, 0x73, 0x8e, 0x0e, 0x61, 0xb5, 0x1b, 0x92, 0xa0, 0xa6, 0x52, 0x54,
	0xc3, 0x3a, 0x6a, 0x55, 0xb7, 0x02, 0x97, 0xea, 0x0c, 0x68, 0x19, 0x7a, 0x03, 0xac, 0xe1, 0x28,
	0x91, 0x52, 0x59, 0xd5, 0xe2, 0x30, 0x24, 0xbf, 0x44, 0x0e, 0x14, 0x62, 0x60, 0x1d, 0x57, 0x5e,
	0xc0, 0x96, 0x23, 0x30, 0x15, 0xdd, 0x11, 0x98, 0xc3, 0x00, 0xc2, 0xd7, 0x95, 0x14, 0x4b, 0x09,
	0xe2, 0x8e, 0x76, 0x60, 0x39, 0x86, 0x13, 0x29, 0x5f, 0x10, 0x80, 0xc5, 0x08, 0xa0, 0xc2, 0xb3,
	0xbf, 0x07, 0x2b, 0x29, 0x5d, 0xe1, 0xe0, 0xaa, 0xd0, 0x47, 0x09, 0x7d, 0x6e, 0xbe, 0x02, 0xa5,
	0x34, 0x04, 0x07, 0xf5, 0x5a, 0x40, 0x9a, 0x84, 0x78, 0xa4, 0x69, 0x2e, 0x0a, 0xac, 0x95, 0xc0,
	0x1e, 0x07, 0xf5, 0xaa, 0xd2, 0x40, 0xf7, 0xc1, 0xce, 0xb6, 0x21, 0x38, 0x2c, 0x09, 0x3b, 0xd7,
	0x47, 0xdb, 0xe1, 0x77, 0xf6, 0x6d, 0xfd, 0xe5, 0x4d, 0x36, 0xcf, 0xc4, 0xdf, 0x49, 0x0f, 0x6e,
	0x8e, 0xb1, 0xa0, 0xba, 0xf0, 0x5e, 0xaa, 0x0b, 0xb7, 0xc7, 0x76, 0xa1, 0xb6, 0xd1, 0x47, 0xda,
	0xaf, 0xc3, 0x66, 0xdc, 0xdd, 0x3d, 0xe2, 0x53, 0x4f, 0x37, 0xad, 0x62, 0x5b, 0x80, 0xd9, 0x26,
	0x3f, 0xd6, 0x7f, 0x62, 0x62, 0x63, 0xb7, 0xc1, 0xce, 0x82, 0x2a, 0x9a, 0x83, 0xe6, 0x33, 0xa2,
	0xcd, 0x37, 0xb2, 0x59, 0x07, 0x1d, 0x38, 0x13, 0xed, 0x40, 0xbb, 0x00, 0x48, 0x78, 0xfb, 0x50,
	0x4c, 0x1c, 0xfa, 0xcb, 0xfe, 0x00, 0xfe, 0x17, 0x3b, 0x55, 0x4e, 0xef, 0x88, 0x46, 0xc3, 0x9e,
	0xcc, 0x6e, 0x7e, 0xbf, 0x98, 0xca, 0x8c, 0x04, 0x54, 0xe6, 0x9f, 0xff, 0xb9, 0x3e, 0xf5, 0xec,
	0x9f, 0x1f, 0x77, 0x8c, 0xaa, 0x42, 0xec, 0xff, 0x7e, 0x05, 0x66, 0x85, 0x4d, 0xc4, 0x20, 0x27,
	0xd5, 0xd0, 0x8d, 0x14, 0x3e, 0xcd, 0xc5, 0xda, 0xca, 0x56, 0x92, 0xd4, 0xec, 0xf5, 0x2f, 0x7e,
	0xfb, 0xfb, 0xdb, 0xe9, 0xff, 0xa3, 0xa2, 0x33, 0x7c, 0x96, 0x42, 0x3f, 0x1b, 0xb0, 0x32, 0x34,
	0xa5, 0x68, 0x7f, 0xb8, 0x83, 0xac, 0xd2, 0x59, 0x07, 0x17, 0xc2, 0x28, 0x8e, 0x07, 0x82, 0xe3,
	0x2e, 0xba, 0x95, 0xe2, 0xd8, 0xff, 0xc6, 0x38, 0xfa, 0x06, 0x39, 0x4f, 0xc4, 0x6d, 0x78, 0x8a,
	0xbe, 0x33, 0x86, 0xfc, 0xc9, 0x96, 0xc7, 0xb8, 0x4f, 0xfc, 0x53, 0x5b, 0xce, 0xc4, 0xfa, 0x8a,
	0xaa, 0x2d, 0xa8, 0xae, 0x21, 0x6b, 0x34, 0x55, 0xf4, 0xab, 0x31, 0xfa, 0x8f, 0xe4, 0xf6, 0x84,
	0x0e, 0xe3, 0xfd, 0x6b, 0x1d, 0x5d, 0x14, 0xa6, 0xe8, 0x1e, 0x0a, 0xba, 0x65, 0xf4, 0x6a, 0x46,
	0x66, 0xd5, 0x97, 0xc0, 0x79, 0xa2, 0x16, 0x4f, 0xd1, 0xd7, 0x06, 0x5c, 0x8d, 0x8f, 0x8a, 0xe8,
	0xd6, 0x08, 0x02, 0xc3, 0x06, 0x4a, 0xeb, 0x95, 0xb1, 0xca, 0x7d, 0x82, 0x5b, 0x82, 0x60, 0x09,
	0xad, 0x39, 0x19, 0xc3, 0x3c, 0xfa, 0x9e, 0xd7, 0x3a, 0x31, 0xa2, 0xa3, 0xdd, 0xb1, 0x5e, 0xa2,
	0xa3, 0xbe, 0x55, 0x9e, 0x54, 0x5d, 0x31, 0xdb, 0x11, 0xcc, 0xb6, 0x90, 0x9d, 0xc5, 0xcc, 0x09,
	0x05, 0x95, 0x04, 0x3f, 0x31, 0xf5, 0x4e, 0xc0, 0x2f, 0x3a, 0x5e, 0x4f, 0xc0, 0x2f, 0x36, 0x4c,
	0x4f, 0xc8, 0x4f, 0x0c, 0xd2, 0xe8, 0x99, 0x01, 0x28, 0x3d, 0x44, 0x23, 0x67, 0x7c, 0x51, 0xe3,
	0xd7, 0xf0, 0x02, 0x85, 0x3d, 0x12, 0xf4, 0x5e, 0x43, 0xe5, 0x4c, 0x7a, 0xe9, 0xbb, 0xf7, 0x55,
	0x3c, 0x95, 0xf2, 0x55, 0xb3, 0x3d, 0xd6, 0xaf, 0x7a, 0xff, 0x58, 0x59, 0x53, 0xbc, 0xbd, 0x2b,
	0x38, 0xbd, 0x8c, 0x6e, 0x66, 0x72, 0xaa, 0xf7, 0x6a, 0xe2, 0xd5, 0x84, 0x7e, 0xe1, 0x7d, 0x3c,
	0xfc, 0x49, 0x83, 0x0e, 0x27, 0x4d, 0x5d, 0xac, 0xc6, 0xb7, 0x2f, 0x88, 0x1a, 0xdf, 0xc5, 0xc9,
	0x52, 0x0f, 0x32, 0x59, 0x79, 0xef, 0xf9, 0x59, 0xc9, 0x78, 0x71, 0x56, 0x32, 0xfe, 0x3a, 0x2b,
	0x19, 0xdf, 0x9c, 0x97, 0xa6, 0x5e, 0x9c, 0x97, 0xa6, 0xfe, 0x38, 0x2f, 0x4d, 0x7d, 0xba, 0xdb,
	0x72, 0xd9, 0xe7, 0xdd, 0x7a, 0xb9, 0x41, 0x3d, 0x61, 0x71, 0xd7, 0xa3, 0x3e, 0xe9, 0x49, 0xe3,
	0x8f, 0xa3, 0xe6, 0x59, 0xaf, 0x43, 0xc2, 0x7a, 0x4e, 0xbc, 0xa5, 0x0f, 0xfe, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x44, 0x44, 0x0c, 0xd5, 0x2f, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	ArbitrageDenomBalance(ctx context.Context, in *QueryArbitrageDenomBalanceRequest, opts ...grpc.CallOption) (*QueryArbitrageDenomBalanceResponse, error)
	ArbitrageBalance(ctx context.Context, in *QueryArbitrageBalancesRequest, opts ...grpc.CallOption) (*QueryArbitrageBalancesResponse, error)
	ArbitrageBalanceAddress(ctx context.Context, in *QueryArbitrageBalancesAddressRequest, opts ...grpc.CallOption) (*QueryArbitrageBalancesAddressResponse, error)
	AutomationsAll(ctx context.Context, in *QueryAutomationsAllRequest, opts ...grpc.CallOption) (*QueryAutomationsResponse, error)
	AutomationsStats(ctx context.Context, in *QueryAutomationsStatsRequest, opts ...grpc.CallOption) (*QueryAutomationsStatsResponse, error)
	AutomationsFunds(ctx context.Context, in *QueryAutomationsFundsRequest, opts ...grpc.CallOption) (*QueryAutomationsFundsResponse, error)
	AutomationsAddress(ctx context.Context, in *QueryAutomationsAddressRequest, opts ...grpc.CallOption) (*QueryAutomationsResponse, error)
	AutomationsIndex(ctx context.Context, in *QueryAutomationsByIndex, opts ...grpc.CallOption) (*Automation, error)
	AutomationsAddressFunds(ctx context.Context, in *QueryAutomationsAddressFundsRequest, opts ...grpc.CallOption) (*QueryAutomationsAddressFundsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ArbitrageDenomBalance(ctx context.Context, in *QueryArbitrageDenomBalanceRequest, opts ...grpc.CallOption) (*QueryArbitrageDenomBalanceResponse, error) {
	out := new(QueryArbitrageDenomBalanceResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/ArbitrageDenomBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ArbitrageBalance(ctx context.Context, in *QueryArbitrageBalancesRequest, opts ...grpc.CallOption) (*QueryArbitrageBalancesResponse, error) {
	out := new(QueryArbitrageBalancesResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/ArbitrageBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ArbitrageBalanceAddress(ctx context.Context, in *QueryArbitrageBalancesAddressRequest, opts ...grpc.CallOption) (*QueryArbitrageBalancesAddressResponse, error) {
	out := new(QueryArbitrageBalancesAddressResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/ArbitrageBalanceAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutomationsAll(ctx context.Context, in *QueryAutomationsAllRequest, opts ...grpc.CallOption) (*QueryAutomationsResponse, error) {
	out := new(QueryAutomationsResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/AutomationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutomationsStats(ctx context.Context, in *QueryAutomationsStatsRequest, opts ...grpc.CallOption) (*QueryAutomationsStatsResponse, error) {
	out := new(QueryAutomationsStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/AutomationsStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutomationsFunds(ctx context.Context, in *QueryAutomationsFundsRequest, opts ...grpc.CallOption) (*QueryAutomationsFundsResponse, error) {
	out := new(QueryAutomationsFundsResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/AutomationsFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutomationsAddress(ctx context.Context, in *QueryAutomationsAddressRequest, opts ...grpc.CallOption) (*QueryAutomationsResponse, error) {
	out := new(QueryAutomationsResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/AutomationsAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutomationsIndex(ctx context.Context, in *QueryAutomationsByIndex, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/AutomationsIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AutomationsAddressFunds(ctx context.Context, in *QueryAutomationsAddressFundsRequest, opts ...grpc.CallOption) (*QueryAutomationsAddressFundsResponse, error) {
	out := new(QueryAutomationsAddressFundsResponse)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Query/AutomationsAddressFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	ArbitrageDenomBalance(context.Context, *QueryArbitrageDenomBalanceRequest) (*QueryArbitrageDenomBalanceResponse, error)
	ArbitrageBalance(context.Context, *QueryArbitrageBalancesRequest) (*QueryArbitrageBalancesResponse, error)
	ArbitrageBalanceAddress(context.Context, *QueryArbitrageBalancesAddressRequest) (*QueryArbitrageBalancesAddressResponse, error)
	AutomationsAll(context.Context, *QueryAutomationsAllRequest) (*QueryAutomationsResponse, error)
	AutomationsStats(context.Context, *QueryAutomationsStatsRequest) (*QueryAutomationsStatsResponse, error)
	AutomationsFunds(context.Context, *QueryAutomationsFundsRequest) (*QueryAutomationsFundsResponse, error)
	AutomationsAddress(context.Context, *QueryAutomationsAddressRequest) (*QueryAutomationsResponse, error)
	AutomationsIndex(context.Context, *QueryAutomationsByIndex) (*Automation, error)
	AutomationsAddressFunds(context.Context, *QueryAutomationsAddressFundsRequest) (*QueryAutomationsAddressFundsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ArbitrageDenomBalance(ctx context.Context, req *QueryArbitrageDenomBalanceRequest) (*QueryArbitrageDenomBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageDenomBalance not implemented")
}
func (*UnimplementedQueryServer) ArbitrageBalance(ctx context.Context, req *QueryArbitrageBalancesRequest) (*QueryArbitrageBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageBalance not implemented")
}
func (*UnimplementedQueryServer) ArbitrageBalanceAddress(ctx context.Context, req *QueryArbitrageBalancesAddressRequest) (*QueryArbitrageBalancesAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageBalanceAddress not implemented")
}
func (*UnimplementedQueryServer) AutomationsAll(ctx context.Context, req *QueryAutomationsAllRequest) (*QueryAutomationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsAll not implemented")
}
func (*UnimplementedQueryServer) AutomationsStats(ctx context.Context, req *QueryAutomationsStatsRequest) (*QueryAutomationsStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsStats not implemented")
}
func (*UnimplementedQueryServer) AutomationsFunds(ctx context.Context, req *QueryAutomationsFundsRequest) (*QueryAutomationsFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsFunds not implemented")
}
func (*UnimplementedQueryServer) AutomationsAddress(ctx context.Context, req *QueryAutomationsAddressRequest) (*QueryAutomationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsAddress not implemented")
}
func (*UnimplementedQueryServer) AutomationsIndex(ctx context.Context, req *QueryAutomationsByIndex) (*Automation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsIndex not implemented")
}
func (*UnimplementedQueryServer) AutomationsAddressFunds(ctx context.Context, req *QueryAutomationsAddressFundsRequest) (*QueryAutomationsAddressFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsAddressFunds not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ArbitrageDenomBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArbitrageDenomBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ArbitrageDenomBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/ArbitrageDenomBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ArbitrageDenomBalance(ctx, req.(*QueryArbitrageDenomBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ArbitrageBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArbitrageBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ArbitrageBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/ArbitrageBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ArbitrageBalance(ctx, req.(*QueryArbitrageBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ArbitrageBalanceAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArbitrageBalancesAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ArbitrageBalanceAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/ArbitrageBalanceAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ArbitrageBalanceAddress(ctx, req.(*QueryArbitrageBalancesAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutomationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAutomationsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutomationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/AutomationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutomationsAll(ctx, req.(*QueryAutomationsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutomationsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAutomationsStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutomationsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/AutomationsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutomationsStats(ctx, req.(*QueryAutomationsStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutomationsFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAutomationsFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutomationsFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/AutomationsFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutomationsFunds(ctx, req.(*QueryAutomationsFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutomationsAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAutomationsAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutomationsAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/AutomationsAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutomationsAddress(ctx, req.(*QueryAutomationsAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutomationsIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAutomationsByIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutomationsIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/AutomationsIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutomationsIndex(ctx, req.(*QueryAutomationsByIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AutomationsAddressFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAutomationsAddressFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutomationsAddressFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Query/AutomationsAddressFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutomationsAddressFunds(ctx, req.(*QueryAutomationsAddressFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.strategies.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ArbitrageDenomBalance",
			Handler:    _Query_ArbitrageDenomBalance_Handler,
		},
		{
			MethodName: "ArbitrageBalance",
			Handler:    _Query_ArbitrageBalance_Handler,
		},
		{
			MethodName: "ArbitrageBalanceAddress",
			Handler:    _Query_ArbitrageBalanceAddress_Handler,
		},
		{
			MethodName: "AutomationsAll",
			Handler:    _Query_AutomationsAll_Handler,
		},
		{
			MethodName: "AutomationsStats",
			Handler:    _Query_AutomationsStats_Handler,
		},
		{
			MethodName: "AutomationsFunds",
			Handler:    _Query_AutomationsFunds_Handler,
		},
		{
			MethodName: "AutomationsAddress",
			Handler:    _Query_AutomationsAddress_Handler,
		},
		{
			MethodName: "AutomationsIndex",
			Handler:    _Query_AutomationsIndex_Handler,
		},
		{
			MethodName: "AutomationsAddressFunds",
			Handler:    _Query_AutomationsAddressFunds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/strategies/query.proto",
}

func (m *QueryAutomationsStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Active))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsByIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsByIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsByIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsAddressFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsAddressFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsAddressFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsAddressFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsAddressFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsAddressFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		i -= len(m.Funds)
		copy(dAtA[i:], m.Funds)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Funds)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAutomationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAutomationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAutomationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Automations) > 0 {
		for iNdEx := len(m.Automations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Automations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryArbitrageBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArbitrageBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArbitrageBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ArbitrageBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbitrageBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbitrageBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parity) > 0 {
		i -= len(m.Parity)
		copy(dAtA[i:], m.Parity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Parity)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.VaultKCoin) > 0 {
		i -= len(m.VaultKCoin)
		copy(dAtA[i:], m.VaultKCoin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultKCoin)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VaultCAsset) > 0 {
		i -= len(m.VaultCAsset)
		copy(dAtA[i:], m.VaultCAsset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultCAsset)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TokenValueUsd) > 0 {
		i -= len(m.TokenValueUsd)
		copy(dAtA[i:], m.TokenValueUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenValueUsd)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TokenValue) > 0 {
		i -= len(m.TokenValue)
		copy(dAtA[i:], m.TokenValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenValue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Supply) > 0 {
		i -= len(m.Supply)
		copy(dAtA[i:], m.Supply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Supply)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KCoin) > 0 {
		i -= len(m.KCoin)
		copy(dAtA[i:], m.KCoin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KCoin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CAsset) > 0 {
		i -= len(m.CAsset)
		copy(dAtA[i:], m.CAsset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryArbitrageBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArbitrageBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArbitrageBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalValueUsd) > 0 {
		i -= len(m.TotalValueUsd)
		copy(dAtA[i:], m.TotalValueUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalValueUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArbitrageBalanceAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbitrageBalanceAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbitrageBalanceAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserBalanceBaseArbRedeemedUsd) > 0 {
		i -= len(m.UserBalanceBaseArbRedeemedUsd)
		copy(dAtA[i:], m.UserBalanceBaseArbRedeemedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserBalanceBaseArbRedeemedUsd)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.UserBalanceBaseArbRedeemed) > 0 {
		i -= len(m.UserBalanceBaseArbRedeemed)
		copy(dAtA[i:], m.UserBalanceBaseArbRedeemed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserBalanceBaseArbRedeemed)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.UserBalanceBaseUsd) > 0 {
		i -= len(m.UserBalanceBaseUsd)
		copy(dAtA[i:], m.UserBalanceBaseUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserBalanceBaseUsd)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.UserBalanceBase) > 0 {
		i -= len(m.UserBalanceBase)
		copy(dAtA[i:], m.UserBalanceBase)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserBalanceBase)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UserBalanceCAssetUsd) > 0 {
		i -= len(m.UserBalanceCAssetUsd)
		copy(dAtA[i:], m.UserBalanceCAssetUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserBalanceCAssetUsd)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UserBalanceCAsset) > 0 {
		i -= len(m.UserBalanceCAsset)
		copy(dAtA[i:], m.UserBalanceCAsset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserBalanceCAsset)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UserBalanceArbitrageUsd) > 0 {
		i -= len(m.UserBalanceArbitrageUsd)
		copy(dAtA[i:], m.UserBalanceArbitrageUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserBalanceArbitrageUsd)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.UserBalanceArbitrage) > 0 {
		i -= len(m.UserBalanceArbitrage)
		copy(dAtA[i:], m.UserBalanceArbitrage)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserBalanceArbitrage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Parity) > 0 {
		i -= len(m.Parity)
		copy(dAtA[i:], m.Parity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Parity)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.VaultKCoin) > 0 {
		i -= len(m.VaultKCoin)
		copy(dAtA[i:], m.VaultKCoin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultKCoin)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VaultCAsset) > 0 {
		i -= len(m.VaultCAsset)
		copy(dAtA[i:], m.VaultCAsset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultCAsset)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Supply) > 0 {
		i -= len(m.Supply)
		copy(dAtA[i:], m.Supply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Supply)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KCoin) > 0 {
		i -= len(m.KCoin)
		copy(dAtA[i:], m.KCoin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KCoin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CAsset) > 0 {
		i -= len(m.CAsset)
		copy(dAtA[i:], m.CAsset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryArbitrageBalancesAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArbitrageBalancesAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArbitrageBalancesAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryArbitrageBalancesAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArbitrageBalancesAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArbitrageBalancesAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryArbitrageDenomBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArbitrageDenomBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArbitrageDenomBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryArbitrageDenomBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArbitrageDenomBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArbitrageDenomBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Supply) > 0 {
		i -= len(m.Supply)
		copy(dAtA[i:], m.Supply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Supply)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CAsset) > 0 {
		i -= len(m.CAsset)
		copy(dAtA[i:], m.CAsset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KCoin) > 0 {
		i -= len(m.KCoin)
		copy(dAtA[i:], m.KCoin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KCoin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAutomationsStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAutomationsStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovQuery(uint64(m.Total))
	}
	if m.Active != 0 {
		n += 1 + sovQuery(uint64(m.Active))
	}
	return n
}

func (m *QueryAutomationsFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAutomationsFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAutomationsByIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAutomationsAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAutomationsAddressFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAutomationsAddressFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Funds)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAutomationsAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAutomationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Automations) > 0 {
		for _, e := range m.Automations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryArbitrageBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ArbitrageBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CAsset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.KCoin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Supply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenValueUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VaultCAsset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VaultKCoin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Parity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryArbitrageBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.TotalValueUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ArbitrageBalanceAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CAsset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.KCoin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Supply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VaultCAsset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VaultKCoin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Parity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserBalanceArbitrage)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserBalanceArbitrageUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserBalanceCAsset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserBalanceCAssetUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserBalanceBase)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserBalanceBaseUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserBalanceBaseArbRedeemed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserBalanceBaseArbRedeemedUsd)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryArbitrageBalancesAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryArbitrageBalancesAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryArbitrageDenomBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryArbitrageDenomBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KCoin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CAsset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Supply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAutomationsStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			m.Active = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Active |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsByIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsByIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsByIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsAddressFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsAddressFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsAddressFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsAddressFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsAddressFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsAddressFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAutomationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAutomationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAutomationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Automations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Automations = append(m.Automations, &Automation{})
			if err := m.Automations[len(m.Automations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArbitrageBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArbitrageBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArbitrageBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbitrageBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbitrageBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbitrageBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenValueUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenValueUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultCAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultKCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultKCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArbitrageBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArbitrageBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArbitrageBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &ArbitrageBalance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValueUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalValueUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbitrageBalanceAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbitrageBalanceAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbitrageBalanceAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultCAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultKCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultKCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalanceArbitrage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalanceArbitrage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalanceArbitrageUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalanceArbitrageUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalanceCAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalanceCAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalanceCAssetUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalanceCAssetUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalanceBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalanceBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalanceBaseUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalanceBaseUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalanceBaseArbRedeemed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalanceBaseArbRedeemed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalanceBaseArbRedeemedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalanceBaseArbRedeemedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArbitrageBalancesAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArbitrageBalancesAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArbitrageBalancesAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArbitrageBalancesAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArbitrageBalancesAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArbitrageBalancesAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &ArbitrageBalanceAddress{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArbitrageDenomBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArbitrageDenomBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArbitrageDenomBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArbitrageDenomBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArbitrageDenomBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArbitrageDenomBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
