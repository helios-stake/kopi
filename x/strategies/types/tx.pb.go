// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/strategies/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Void struct {
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{0}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Void.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return m.Size()
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type MsgUpdateAutomationsCosts struct {
	Authority    string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	ConditionFee uint64 `protobuf:"varint,2,opt,name=condition_fee,json=conditionFee,proto3" json:"condition_fee,omitempty"`
	ActionFee    uint64 `protobuf:"varint,3,opt,name=action_fee,json=actionFee,proto3" json:"action_fee,omitempty"`
}

func (m *MsgUpdateAutomationsCosts) Reset()         { *m = MsgUpdateAutomationsCosts{} }
func (m *MsgUpdateAutomationsCosts) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAutomationsCosts) ProtoMessage()    {}
func (*MsgUpdateAutomationsCosts) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{1}
}
func (m *MsgUpdateAutomationsCosts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAutomationsCosts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAutomationsCosts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAutomationsCosts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAutomationsCosts.Merge(m, src)
}
func (m *MsgUpdateAutomationsCosts) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAutomationsCosts) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAutomationsCosts.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAutomationsCosts proto.InternalMessageInfo

func (m *MsgUpdateAutomationsCosts) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateAutomationsCosts) GetConditionFee() uint64 {
	if m != nil {
		return m.ConditionFee
	}
	return 0
}

func (m *MsgUpdateAutomationsCosts) GetActionFee() uint64 {
	if m != nil {
		return m.ActionFee
	}
	return 0
}

type MsgAutomationsWidthrawFunds struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgAutomationsWidthrawFunds) Reset()         { *m = MsgAutomationsWidthrawFunds{} }
func (m *MsgAutomationsWidthrawFunds) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsWidthrawFunds) ProtoMessage()    {}
func (*MsgAutomationsWidthrawFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{2}
}
func (m *MsgAutomationsWidthrawFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsWidthrawFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsWidthrawFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsWidthrawFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsWidthrawFunds.Merge(m, src)
}
func (m *MsgAutomationsWidthrawFunds) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsWidthrawFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsWidthrawFunds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsWidthrawFunds proto.InternalMessageInfo

func (m *MsgAutomationsWidthrawFunds) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsWidthrawFunds) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgAutomationsAddFunds struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgAutomationsAddFunds) Reset()         { *m = MsgAutomationsAddFunds{} }
func (m *MsgAutomationsAddFunds) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsAddFunds) ProtoMessage()    {}
func (*MsgAutomationsAddFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{3}
}
func (m *MsgAutomationsAddFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsAddFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsAddFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsAddFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsAddFunds.Merge(m, src)
}
func (m *MsgAutomationsAddFunds) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsAddFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsAddFunds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsAddFunds proto.InternalMessageInfo

func (m *MsgAutomationsAddFunds) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsAddFunds) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgAutomationsActive struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Active  bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *MsgAutomationsActive) Reset()         { *m = MsgAutomationsActive{} }
func (m *MsgAutomationsActive) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsActive) ProtoMessage()    {}
func (*MsgAutomationsActive) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{4}
}
func (m *MsgAutomationsActive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsActive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsActive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsActive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsActive.Merge(m, src)
}
func (m *MsgAutomationsActive) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsActive) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsActive.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsActive proto.InternalMessageInfo

func (m *MsgAutomationsActive) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsActive) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MsgAutomationsActive) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type MsgAutomationsActiveMultiple struct {
	Creator string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Indexes []uint64 `protobuf:"varint,2,rep,packed,name=indexes,proto3" json:"indexes,omitempty"`
	Active  bool     `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *MsgAutomationsActiveMultiple) Reset()         { *m = MsgAutomationsActiveMultiple{} }
func (m *MsgAutomationsActiveMultiple) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsActiveMultiple) ProtoMessage()    {}
func (*MsgAutomationsActiveMultiple) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{5}
}
func (m *MsgAutomationsActiveMultiple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsActiveMultiple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsActiveMultiple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsActiveMultiple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsActiveMultiple.Merge(m, src)
}
func (m *MsgAutomationsActiveMultiple) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsActiveMultiple) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsActiveMultiple.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsActiveMultiple proto.InternalMessageInfo

func (m *MsgAutomationsActiveMultiple) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsActiveMultiple) GetIndexes() []uint64 {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *MsgAutomationsActiveMultiple) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type MsgAutomationsAdd struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Title          string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	IntervalType   string `protobuf:"bytes,3,opt,name=interval_type,json=intervalType,proto3" json:"interval_type,omitempty"`
	IntervalLength string `protobuf:"bytes,4,opt,name=interval_length,json=intervalLength,proto3" json:"interval_length,omitempty"`
	ValidityType   string `protobuf:"bytes,5,opt,name=validity_type,json=validityType,proto3" json:"validity_type,omitempty"`
	ValidityValue  string `protobuf:"bytes,6,opt,name=validity_value,json=validityValue,proto3" json:"validity_value,omitempty"`
	Conditions     string `protobuf:"bytes,7,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Actions        string `protobuf:"bytes,8,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (m *MsgAutomationsAdd) Reset()         { *m = MsgAutomationsAdd{} }
func (m *MsgAutomationsAdd) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsAdd) ProtoMessage()    {}
func (*MsgAutomationsAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{6}
}
func (m *MsgAutomationsAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsAdd.Merge(m, src)
}
func (m *MsgAutomationsAdd) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsAdd.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsAdd proto.InternalMessageInfo

func (m *MsgAutomationsAdd) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsAdd) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgAutomationsAdd) GetIntervalType() string {
	if m != nil {
		return m.IntervalType
	}
	return ""
}

func (m *MsgAutomationsAdd) GetIntervalLength() string {
	if m != nil {
		return m.IntervalLength
	}
	return ""
}

func (m *MsgAutomationsAdd) GetValidityType() string {
	if m != nil {
		return m.ValidityType
	}
	return ""
}

func (m *MsgAutomationsAdd) GetValidityValue() string {
	if m != nil {
		return m.ValidityValue
	}
	return ""
}

func (m *MsgAutomationsAdd) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *MsgAutomationsAdd) GetActions() string {
	if m != nil {
		return m.Actions
	}
	return ""
}

type AutomationImport struct {
	Title          string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	IntervalType   string       `protobuf:"bytes,2,opt,name=interval_type,json=intervalType,proto3" json:"interval_type,omitempty"`
	IntervalLength string       `protobuf:"bytes,3,opt,name=interval_length,json=intervalLength,proto3" json:"interval_length,omitempty"`
	ValidityType   string       `protobuf:"bytes,4,opt,name=validity_type,json=validityType,proto3" json:"validity_type,omitempty"`
	ValidityValue  string       `protobuf:"bytes,5,opt,name=validity_value,json=validityValue,proto3" json:"validity_value,omitempty"`
	Conditions     []*Condition `protobuf:"bytes,6,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Actions        []*Action    `protobuf:"bytes,7,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (m *AutomationImport) Reset()         { *m = AutomationImport{} }
func (m *AutomationImport) String() string { return proto.CompactTextString(m) }
func (*AutomationImport) ProtoMessage()    {}
func (*AutomationImport) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{7}
}
func (m *AutomationImport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutomationImport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutomationImport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutomationImport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutomationImport.Merge(m, src)
}
func (m *AutomationImport) XXX_Size() int {
	return m.Size()
}
func (m *AutomationImport) XXX_DiscardUnknown() {
	xxx_messageInfo_AutomationImport.DiscardUnknown(m)
}

var xxx_messageInfo_AutomationImport proto.InternalMessageInfo

func (m *AutomationImport) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AutomationImport) GetIntervalType() string {
	if m != nil {
		return m.IntervalType
	}
	return ""
}

func (m *AutomationImport) GetIntervalLength() string {
	if m != nil {
		return m.IntervalLength
	}
	return ""
}

func (m *AutomationImport) GetValidityType() string {
	if m != nil {
		return m.ValidityType
	}
	return ""
}

func (m *AutomationImport) GetValidityValue() string {
	if m != nil {
		return m.ValidityValue
	}
	return ""
}

func (m *AutomationImport) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *AutomationImport) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type MsgAutomationsImport struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Automations string `protobuf:"bytes,2,opt,name=automations,proto3" json:"automations,omitempty"`
}

func (m *MsgAutomationsImport) Reset()         { *m = MsgAutomationsImport{} }
func (m *MsgAutomationsImport) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsImport) ProtoMessage()    {}
func (*MsgAutomationsImport) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{8}
}
func (m *MsgAutomationsImport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsImport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsImport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsImport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsImport.Merge(m, src)
}
func (m *MsgAutomationsImport) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsImport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsImport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsImport proto.InternalMessageInfo

func (m *MsgAutomationsImport) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsImport) GetAutomations() string {
	if m != nil {
		return m.Automations
	}
	return ""
}

type MsgAutomationsUpdate struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index          uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Title          string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	IntervalType   string `protobuf:"bytes,4,opt,name=interval_type,json=intervalType,proto3" json:"interval_type,omitempty"`
	IntervalLength string `protobuf:"bytes,5,opt,name=interval_length,json=intervalLength,proto3" json:"interval_length,omitempty"`
	ValidityType   string `protobuf:"bytes,6,opt,name=validity_type,json=validityType,proto3" json:"validity_type,omitempty"`
	ValidityValue  string `protobuf:"bytes,7,opt,name=validity_value,json=validityValue,proto3" json:"validity_value,omitempty"`
	Conditions     string `protobuf:"bytes,8,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Actions        string `protobuf:"bytes,9,opt,name=actions,proto3" json:"actions,omitempty"`
	Active         bool   `protobuf:"varint,10,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *MsgAutomationsUpdate) Reset()         { *m = MsgAutomationsUpdate{} }
func (m *MsgAutomationsUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsUpdate) ProtoMessage()    {}
func (*MsgAutomationsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{9}
}
func (m *MsgAutomationsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsUpdate.Merge(m, src)
}
func (m *MsgAutomationsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsUpdate proto.InternalMessageInfo

func (m *MsgAutomationsUpdate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsUpdate) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MsgAutomationsUpdate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgAutomationsUpdate) GetIntervalType() string {
	if m != nil {
		return m.IntervalType
	}
	return ""
}

func (m *MsgAutomationsUpdate) GetIntervalLength() string {
	if m != nil {
		return m.IntervalLength
	}
	return ""
}

func (m *MsgAutomationsUpdate) GetValidityType() string {
	if m != nil {
		return m.ValidityType
	}
	return ""
}

func (m *MsgAutomationsUpdate) GetValidityValue() string {
	if m != nil {
		return m.ValidityValue
	}
	return ""
}

func (m *MsgAutomationsUpdate) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *MsgAutomationsUpdate) GetActions() string {
	if m != nil {
		return m.Actions
	}
	return ""
}

func (m *MsgAutomationsUpdate) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type MsgAutomationsRemove struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgAutomationsRemove) Reset()         { *m = MsgAutomationsRemove{} }
func (m *MsgAutomationsRemove) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsRemove) ProtoMessage()    {}
func (*MsgAutomationsRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{10}
}
func (m *MsgAutomationsRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsRemove.Merge(m, src)
}
func (m *MsgAutomationsRemove) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsRemove.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsRemove proto.InternalMessageInfo

func (m *MsgAutomationsRemove) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsRemove) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type MsgAutomationsRemoveMultiple struct {
	Creator string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Indexes []uint64 `protobuf:"varint,2,rep,packed,name=indexes,proto3" json:"indexes,omitempty"`
}

func (m *MsgAutomationsRemoveMultiple) Reset()         { *m = MsgAutomationsRemoveMultiple{} }
func (m *MsgAutomationsRemoveMultiple) String() string { return proto.CompactTextString(m) }
func (*MsgAutomationsRemoveMultiple) ProtoMessage()    {}
func (*MsgAutomationsRemoveMultiple) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{11}
}
func (m *MsgAutomationsRemoveMultiple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAutomationsRemoveMultiple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAutomationsRemoveMultiple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAutomationsRemoveMultiple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAutomationsRemoveMultiple.Merge(m, src)
}
func (m *MsgAutomationsRemoveMultiple) XXX_Size() int {
	return m.Size()
}
func (m *MsgAutomationsRemoveMultiple) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAutomationsRemoveMultiple.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAutomationsRemoveMultiple proto.InternalMessageInfo

func (m *MsgAutomationsRemoveMultiple) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAutomationsRemoveMultiple) GetIndexes() []uint64 {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type MsgArbitrageDeposit struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount  string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgArbitrageDeposit) Reset()         { *m = MsgArbitrageDeposit{} }
func (m *MsgArbitrageDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgArbitrageDeposit) ProtoMessage()    {}
func (*MsgArbitrageDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{12}
}
func (m *MsgArbitrageDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitrageDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitrageDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitrageDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitrageDeposit.Merge(m, src)
}
func (m *MsgArbitrageDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitrageDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitrageDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitrageDeposit proto.InternalMessageInfo

func (m *MsgArbitrageDeposit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgArbitrageDeposit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgArbitrageDeposit) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgArbitrageRedeem struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom           string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount          string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	AllowIncomplete bool   `protobuf:"varint,4,opt,name=allow_incomplete,json=allowIncomplete,proto3" json:"allow_incomplete,omitempty"`
}

func (m *MsgArbitrageRedeem) Reset()         { *m = MsgArbitrageRedeem{} }
func (m *MsgArbitrageRedeem) String() string { return proto.CompactTextString(m) }
func (*MsgArbitrageRedeem) ProtoMessage()    {}
func (*MsgArbitrageRedeem) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f011fa8d927341b, []int{13}
}
func (m *MsgArbitrageRedeem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgArbitrageRedeem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgArbitrageRedeem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgArbitrageRedeem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgArbitrageRedeem.Merge(m, src)
}
func (m *MsgArbitrageRedeem) XXX_Size() int {
	return m.Size()
}
func (m *MsgArbitrageRedeem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgArbitrageRedeem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgArbitrageRedeem proto.InternalMessageInfo

func (m *MsgArbitrageRedeem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgArbitrageRedeem) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgArbitrageRedeem) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MsgArbitrageRedeem) GetAllowIncomplete() bool {
	if m != nil {
		return m.AllowIncomplete
	}
	return false
}

func init() {
	proto.RegisterType((*Void)(nil), "kopi.strategies.Void")
	proto.RegisterType((*MsgUpdateAutomationsCosts)(nil), "kopi.strategies.MsgUpdateAutomationsCosts")
	proto.RegisterType((*MsgAutomationsWidthrawFunds)(nil), "kopi.strategies.MsgAutomationsWidthrawFunds")
	proto.RegisterType((*MsgAutomationsAddFunds)(nil), "kopi.strategies.MsgAutomationsAddFunds")
	proto.RegisterType((*MsgAutomationsActive)(nil), "kopi.strategies.MsgAutomationsActive")
	proto.RegisterType((*MsgAutomationsActiveMultiple)(nil), "kopi.strategies.MsgAutomationsActiveMultiple")
	proto.RegisterType((*MsgAutomationsAdd)(nil), "kopi.strategies.MsgAutomationsAdd")
	proto.RegisterType((*AutomationImport)(nil), "kopi.strategies.AutomationImport")
	proto.RegisterType((*MsgAutomationsImport)(nil), "kopi.strategies.MsgAutomationsImport")
	proto.RegisterType((*MsgAutomationsUpdate)(nil), "kopi.strategies.MsgAutomationsUpdate")
	proto.RegisterType((*MsgAutomationsRemove)(nil), "kopi.strategies.MsgAutomationsRemove")
	proto.RegisterType((*MsgAutomationsRemoveMultiple)(nil), "kopi.strategies.MsgAutomationsRemoveMultiple")
	proto.RegisterType((*MsgArbitrageDeposit)(nil), "kopi.strategies.MsgArbitrageDeposit")
	proto.RegisterType((*MsgArbitrageRedeem)(nil), "kopi.strategies.MsgArbitrageRedeem")
}

func init() { proto.RegisterFile("kopi/strategies/tx.proto", fileDescriptor_4f011fa8d927341b) }

var fileDescriptor_4f011fa8d927341b = []byte{
	// 972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xfa, 0xdb, 0xaf, 0x21, 0x1f, 0xdb, 0x90, 0x6e, 0x4c, 0xb1, 0x8c, 0x4b, 0xd5, 0x60,
	0x61, 0x5b, 0x2d, 0x12, 0x87, 0x48, 0x1c, 0xd2, 0xa2, 0xa0, 0x0a, 0x2c, 0xc4, 0xd2, 0x16, 0x04,
	0x42, 0xee, 0xc4, 0x3b, 0xac, 0x47, 0xdd, 0xdd, 0x59, 0xed, 0x8c, 0xdd, 0xf8, 0x86, 0x38, 0x72,
	0xe2, 0xc2, 0x9d, 0x0b, 0xf7, 0x20, 0xf1, 0x47, 0x70, 0xac, 0x38, 0x54, 0x1c, 0x51, 0x72, 0xc8,
	0xbf, 0x81, 0x76, 0x66, 0x77, 0x6d, 0xaf, 0xbd, 0x1f, 0x55, 0x7b, 0x49, 0xfc, 0xde, 0xfc, 0xe6,
	0xf7, 0xde, 0xfc, 0xe6, 0xcd, 0x9b, 0x59, 0xd0, 0x9e, 0x51, 0x97, 0xf4, 0x19, 0xf7, 0x10, 0xc7,
	0x26, 0xc1, 0xac, 0xcf, 0xcf, 0x7a, 0xae, 0x47, 0x39, 0x55, 0xb7, 0xfd, 0x91, 0xde, 0x7c, 0xa4,
	0xb1, 0x8b, 0x6c, 0xe2, 0xd0, 0xbe, 0xf8, 0x2b, 0x31, 0x8d, 0x1b, 0x23, 0xca, 0x6c, 0xca, 0xfa,
	0x36, 0x33, 0xfb, 0xd3, 0xbb, 0xfe, 0xbf, 0x60, 0xe0, 0x40, 0x0e, 0x0c, 0x85, 0xd5, 0x97, 0x46,
	0x30, 0xb4, 0x67, 0x52, 0x93, 0x4a, 0xbf, 0xff, 0x2b, 0xf0, 0xde, 0x8c, 0xe7, 0xe1, 0x22, 0x0f,
	0xd9, 0xe1, 0x9c, 0xf7, 0xe2, 0xa3, 0x68, 0xc2, 0xa9, 0x8d, 0x38, 0xa1, 0x4e, 0x00, 0x69, 0x57,
	0xa0, 0xf4, 0x84, 0x12, 0xa3, 0xfd, 0x52, 0x81, 0x83, 0x01, 0x33, 0x1f, 0xbb, 0x06, 0xe2, 0xf8,
	0x78, 0x0e, 0x7b, 0x40, 0x19, 0x67, 0xea, 0xc7, 0x50, 0x47, 0x13, 0x3e, 0xa6, 0x1e, 0xe1, 0x33,
	0x4d, 0x69, 0x29, 0x87, 0xf5, 0xfb, 0xda, 0x3f, 0x7f, 0x75, 0xf7, 0x82, 0x0c, 0x8f, 0x0d, 0xc3,
	0xc3, 0x8c, 0x7d, 0xcd, 0x3d, 0xe2, 0x98, 0xfa, 0x1c, 0xaa, 0xde, 0x82, 0xb7, 0x46, 0xd4, 0x31,
	0x88, 0x4f, 0x35, 0xfc, 0x11, 0x63, 0xad, 0xd0, 0x52, 0x0e, 0x4b, 0xfa, 0x66, 0xe4, 0x3c, 0xc1,
	0x58, 0x7d, 0x17, 0x00, 0x8d, 0x22, 0x44, 0x51, 0x20, 0xea, 0xd2, 0x73, 0x82, 0xf1, 0xd1, 0x27,
	0x3f, 0x5f, 0x9d, 0x77, 0xe6, 0x9c, 0xbf, 0x5c, 0x9d, 0x77, 0x3a, 0x62, 0x5d, 0x67, 0x8b, 0x2b,
	0x5b, 0x93, 0xbb, 0x48, 0xbd, 0xfd, 0x03, 0xbc, 0x33, 0x60, 0xe6, 0xc2, 0x8a, 0xbe, 0x21, 0x06,
	0x1f, 0x7b, 0xe8, 0xf9, 0xc9, 0xc4, 0x31, 0x98, 0xaa, 0x41, 0x75, 0xe4, 0x61, 0xc4, 0xa9, 0x27,
	0xd7, 0xa5, 0x87, 0xa6, 0xba, 0x0f, 0x15, 0x64, 0xd3, 0x89, 0xc3, 0x45, 0xd2, 0x75, 0x3d, 0xb0,
	0x8e, 0x36, 0xfd, 0x7c, 0x42, 0x54, 0xfb, 0x5b, 0xd8, 0x5f, 0xa6, 0x3f, 0x36, 0x8c, 0x37, 0xc3,
	0x6c, 0xc1, 0x5e, 0x8c, 0x79, 0xc4, 0xc9, 0x14, 0xa7, 0xf0, 0xee, 0x41, 0x99, 0x38, 0x06, 0x3e,
	0x0b, 0x54, 0x96, 0x86, 0x88, 0x26, 0x66, 0x0a, 0x69, 0x6b, 0x7a, 0x60, 0xc5, 0xa2, 0x9d, 0xc1,
	0xcd, 0x75, 0xd1, 0x06, 0x13, 0x8b, 0x13, 0xd7, 0x4a, 0x8b, 0xaa, 0x41, 0x55, 0x04, 0xc2, 0x4c,
	0x2b, 0xb4, 0x8a, 0x87, 0x25, 0x3d, 0x34, 0x73, 0x46, 0xfe, 0xa3, 0x00, 0xbb, 0x2b, 0x12, 0xa6,
	0xaf, 0x92, 0x13, 0x6e, 0xe1, 0x40, 0x3c, 0x69, 0xf8, 0x95, 0x46, 0x1c, 0x8e, 0xbd, 0x29, 0xb2,
	0x86, 0x7c, 0xe6, 0xca, 0x90, 0x75, 0x7d, 0x33, 0x74, 0x3e, 0x9a, 0xb9, 0x58, 0xbd, 0x03, 0xdb,
	0x11, 0xc8, 0xc2, 0x8e, 0xc9, 0xc7, 0x5a, 0x49, 0xc0, 0xb6, 0x42, 0xf7, 0x17, 0xc2, 0xeb, 0xb3,
	0x4d, 0x91, 0x45, 0x0c, 0xc2, 0x67, 0x92, 0xad, 0x2c, 0xd9, 0x42, 0xa7, 0x60, 0xbb, 0x0d, 0x5b,
	0x11, 0x68, 0x8a, 0xac, 0x09, 0xd6, 0x2a, 0x02, 0x15, 0x4d, 0x7d, 0xe2, 0x3b, 0xd5, 0x26, 0x40,
	0x54, 0xee, 0x4c, 0xab, 0x0a, 0xc8, 0x82, 0xc7, 0x5f, 0xa9, 0x2c, 0x76, 0xa6, 0xd5, 0xe4, 0x4a,
	0x03, 0x33, 0xa6, 0xd3, 0x9f, 0x05, 0xd8, 0x99, 0x8b, 0xf4, 0xd0, 0x76, 0xa9, 0xc7, 0xe7, 0x62,
	0x28, 0xa9, 0x62, 0x14, 0xf2, 0x89, 0x51, 0xcc, 0x27, 0x46, 0x29, 0x97, 0x18, 0xe5, 0x75, 0x62,
	0x1c, 0x2d, 0x89, 0x51, 0x69, 0x15, 0x0f, 0xaf, 0xdd, 0x6b, 0xf4, 0x62, 0x2d, 0xb3, 0xf7, 0x20,
	0x84, 0x2c, 0x09, 0x75, 0x77, 0x2e, 0x54, 0x55, 0x4c, 0xbc, 0xb1, 0x32, 0xf1, 0x58, 0x8c, 0x47,
	0x0a, 0xb6, 0x9f, 0xc6, 0xcf, 0x50, 0x20, 0x5b, 0x72, 0x75, 0xb5, 0xe0, 0xda, 0x42, 0x93, 0x0c,
	0x84, 0x5b, 0x74, 0xc5, 0x76, 0xe5, 0x65, 0x21, 0x1e, 0x42, 0xb6, 0xa1, 0x57, 0x3e, 0xa6, 0xd1,
	0x4e, 0x16, 0x53, 0x77, 0xb2, 0x94, 0x6f, 0x27, 0xcb, 0xf9, 0x76, 0xb2, 0x92, 0x6b, 0x27, 0xab,
	0xd9, 0x65, 0x5d, 0x4b, 0x2b, 0xeb, 0xfa, 0x52, 0x59, 0x2f, 0xb4, 0x05, 0x48, 0x69, 0x0b, 0x8f,
	0xe2, 0xba, 0xea, 0xd8, 0xa6, 0xaf, 0xde, 0xfe, 0x62, 0xac, 0x4f, 0xe3, 0x6d, 0x4e, 0xb2, 0xbe,
	0x4e, 0x9b, 0x8b, 0x45, 0x78, 0x06, 0xd7, 0xfd, 0x08, 0xde, 0x29, 0xe1, 0x1e, 0x32, 0xf1, 0xa7,
	0xd8, 0xa5, 0x8c, 0xf0, 0xf4, 0xb4, 0x0d, 0xec, 0x50, 0x3b, 0xec, 0x67, 0xc2, 0x58, 0xb8, 0x23,
	0x8a, 0x29, 0x77, 0xc4, 0x6f, 0x0a, 0xa8, 0x8b, 0xd1, 0x74, 0x6c, 0x60, 0x6c, 0xbf, 0xa9, 0x60,
	0xea, 0x07, 0xb0, 0x83, 0x2c, 0x8b, 0x3e, 0x1f, 0x12, 0x67, 0x44, 0x6d, 0xd7, 0xc2, 0x5c, 0x16,
	0x60, 0x4d, 0xdf, 0x16, 0xfe, 0x87, 0x91, 0x7b, 0x39, 0xaf, 0x7b, 0xbf, 0xd7, 0xa0, 0x38, 0x60,
	0xa6, 0xfa, 0x25, 0xec, 0xac, 0x28, 0xf1, 0xfe, 0xca, 0xa9, 0x5d, 0xa3, 0x57, 0xe3, 0xed, 0x15,
	0x94, 0xff, 0x4c, 0x51, 0x07, 0xb0, 0x1d, 0x5f, 0xec, 0xad, 0x54, 0x3e, 0x09, 0x4a, 0xa2, 0xfb,
	0x1c, 0xb6, 0x62, 0xf7, 0x4e, 0x7b, 0x2d, 0xdb, 0x12, 0x26, 0x89, 0xec, 0x2b, 0xd8, 0x5d, 0xed,
	0x34, 0xb7, 0x33, 0xf8, 0x24, 0x2c, 0x1f, 0x65, 0xd0, 0x59, 0xb2, 0x28, 0x25, 0x2c, 0x1f, 0x65,
	0x70, 0xa8, 0xb2, 0x28, 0x25, 0x2c, 0x89, 0x12, 0xc1, 0x41, 0xf2, 0x89, 0xea, 0xe6, 0xa2, 0x0e,
	0xe1, 0xf9, 0xb2, 0x0e, 0x5e, 0x42, 0x59, 0x59, 0x4b, 0x58, 0xbe, 0xac, 0x63, 0xcf, 0x9d, 0x6e,
	0x2e, 0xea, 0xac, 0xac, 0x1f, 0xc3, 0xf5, 0x75, 0x2f, 0xc3, 0x3b, 0xd9, 0x35, 0x26, 0x80, 0x49,
	0xb4, 0x43, 0xd0, 0x96, 0xde, 0xb3, 0x7c, 0x6c, 0x44, 0xef, 0xd9, 0x0f, 0x33, 0xb8, 0x97, 0x5e,
	0xbf, 0x49, 0x01, 0xbe, 0x87, 0xfd, 0x84, 0x0f, 0x81, 0xce, 0x3a, 0xfa, 0xf5, 0xd8, 0x04, 0xf2,
	0x46, 0xf9, 0xa7, 0xab, 0xf3, 0x8e, 0x72, 0xff, 0xb3, 0xbf, 0x2f, 0x9a, 0xca, 0x8b, 0x8b, 0xa6,
	0xf2, 0xdf, 0x45, 0x53, 0xf9, 0xf5, 0xb2, 0xb9, 0xf1, 0xe2, 0xb2, 0xb9, 0xf1, 0xef, 0x65, 0x73,
	0xe3, 0xbb, 0xae, 0x49, 0xf8, 0x78, 0x72, 0xda, 0x1b, 0x51, 0xbb, 0xef, 0x33, 0x74, 0x6d, 0xea,
	0xe0, 0x59, 0x7f, 0xf5, 0xcd, 0xef, 0x5f, 0x61, 0xec, 0xb4, 0x22, 0x3e, 0x64, 0x3e, 0xfa, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x05, 0x91, 0x97, 0x14, 0x93, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ArbitrageDeposit(ctx context.Context, in *MsgArbitrageDeposit, opts ...grpc.CallOption) (*Void, error)
	ArbitrageRedeem(ctx context.Context, in *MsgArbitrageRedeem, opts ...grpc.CallOption) (*Void, error)
	AutomationsAdd(ctx context.Context, in *MsgAutomationsAdd, opts ...grpc.CallOption) (*Void, error)
	AutomationsImport(ctx context.Context, in *MsgAutomationsImport, opts ...grpc.CallOption) (*Void, error)
	AutomationsUpdate(ctx context.Context, in *MsgAutomationsUpdate, opts ...grpc.CallOption) (*Void, error)
	AutomationsRemove(ctx context.Context, in *MsgAutomationsRemove, opts ...grpc.CallOption) (*Void, error)
	AutomationsRemoveMultiple(ctx context.Context, in *MsgAutomationsRemoveMultiple, opts ...grpc.CallOption) (*Void, error)
	AutomationsActive(ctx context.Context, in *MsgAutomationsActive, opts ...grpc.CallOption) (*Void, error)
	AutomationsActiveMultiple(ctx context.Context, in *MsgAutomationsActiveMultiple, opts ...grpc.CallOption) (*Void, error)
	AutomationsAddFunds(ctx context.Context, in *MsgAutomationsAddFunds, opts ...grpc.CallOption) (*Void, error)
	AutomationsWithdrawFunds(ctx context.Context, in *MsgAutomationsWidthrawFunds, opts ...grpc.CallOption) (*Void, error)
	UpdateAutomationsCosts(ctx context.Context, in *MsgUpdateAutomationsCosts, opts ...grpc.CallOption) (*Void, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ArbitrageDeposit(ctx context.Context, in *MsgArbitrageDeposit, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/ArbitrageDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArbitrageRedeem(ctx context.Context, in *MsgArbitrageRedeem, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/ArbitrageRedeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsAdd(ctx context.Context, in *MsgAutomationsAdd, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsImport(ctx context.Context, in *MsgAutomationsImport, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsUpdate(ctx context.Context, in *MsgAutomationsUpdate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsRemove(ctx context.Context, in *MsgAutomationsRemove, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsRemoveMultiple(ctx context.Context, in *MsgAutomationsRemoveMultiple, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsRemoveMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsActive(ctx context.Context, in *MsgAutomationsActive, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsActiveMultiple(ctx context.Context, in *MsgAutomationsActiveMultiple, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsActiveMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsAddFunds(ctx context.Context, in *MsgAutomationsAddFunds, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsAddFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AutomationsWithdrawFunds(ctx context.Context, in *MsgAutomationsWidthrawFunds, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/AutomationsWithdrawFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAutomationsCosts(ctx context.Context, in *MsgUpdateAutomationsCosts, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kopi.strategies.Msg/UpdateAutomationsCosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ArbitrageDeposit(context.Context, *MsgArbitrageDeposit) (*Void, error)
	ArbitrageRedeem(context.Context, *MsgArbitrageRedeem) (*Void, error)
	AutomationsAdd(context.Context, *MsgAutomationsAdd) (*Void, error)
	AutomationsImport(context.Context, *MsgAutomationsImport) (*Void, error)
	AutomationsUpdate(context.Context, *MsgAutomationsUpdate) (*Void, error)
	AutomationsRemove(context.Context, *MsgAutomationsRemove) (*Void, error)
	AutomationsRemoveMultiple(context.Context, *MsgAutomationsRemoveMultiple) (*Void, error)
	AutomationsActive(context.Context, *MsgAutomationsActive) (*Void, error)
	AutomationsActiveMultiple(context.Context, *MsgAutomationsActiveMultiple) (*Void, error)
	AutomationsAddFunds(context.Context, *MsgAutomationsAddFunds) (*Void, error)
	AutomationsWithdrawFunds(context.Context, *MsgAutomationsWidthrawFunds) (*Void, error)
	UpdateAutomationsCosts(context.Context, *MsgUpdateAutomationsCosts) (*Void, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ArbitrageDeposit(ctx context.Context, req *MsgArbitrageDeposit) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageDeposit not implemented")
}
func (*UnimplementedMsgServer) ArbitrageRedeem(ctx context.Context, req *MsgArbitrageRedeem) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbitrageRedeem not implemented")
}
func (*UnimplementedMsgServer) AutomationsAdd(ctx context.Context, req *MsgAutomationsAdd) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsAdd not implemented")
}
func (*UnimplementedMsgServer) AutomationsImport(ctx context.Context, req *MsgAutomationsImport) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsImport not implemented")
}
func (*UnimplementedMsgServer) AutomationsUpdate(ctx context.Context, req *MsgAutomationsUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsUpdate not implemented")
}
func (*UnimplementedMsgServer) AutomationsRemove(ctx context.Context, req *MsgAutomationsRemove) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsRemove not implemented")
}
func (*UnimplementedMsgServer) AutomationsRemoveMultiple(ctx context.Context, req *MsgAutomationsRemoveMultiple) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsRemoveMultiple not implemented")
}
func (*UnimplementedMsgServer) AutomationsActive(ctx context.Context, req *MsgAutomationsActive) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsActive not implemented")
}
func (*UnimplementedMsgServer) AutomationsActiveMultiple(ctx context.Context, req *MsgAutomationsActiveMultiple) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsActiveMultiple not implemented")
}
func (*UnimplementedMsgServer) AutomationsAddFunds(ctx context.Context, req *MsgAutomationsAddFunds) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsAddFunds not implemented")
}
func (*UnimplementedMsgServer) AutomationsWithdrawFunds(ctx context.Context, req *MsgAutomationsWidthrawFunds) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomationsWithdrawFunds not implemented")
}
func (*UnimplementedMsgServer) UpdateAutomationsCosts(ctx context.Context, req *MsgUpdateAutomationsCosts) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutomationsCosts not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ArbitrageDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/ArbitrageDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageDeposit(ctx, req.(*MsgArbitrageDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArbitrageRedeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArbitrageRedeem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArbitrageRedeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/ArbitrageRedeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArbitrageRedeem(ctx, req.(*MsgArbitrageRedeem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsAdd(ctx, req.(*MsgAutomationsAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsImport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsImport(ctx, req.(*MsgAutomationsImport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsUpdate(ctx, req.(*MsgAutomationsUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsRemove(ctx, req.(*MsgAutomationsRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsRemoveMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsRemoveMultiple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsRemoveMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsRemoveMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsRemoveMultiple(ctx, req.(*MsgAutomationsRemoveMultiple))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsActive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsActive(ctx, req.(*MsgAutomationsActive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsActiveMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsActiveMultiple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsActiveMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsActiveMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsActiveMultiple(ctx, req.(*MsgAutomationsActiveMultiple))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsAddFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsAddFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsAddFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsAddFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsAddFunds(ctx, req.(*MsgAutomationsAddFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AutomationsWithdrawFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAutomationsWidthrawFunds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AutomationsWithdrawFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/AutomationsWithdrawFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AutomationsWithdrawFunds(ctx, req.(*MsgAutomationsWidthrawFunds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAutomationsCosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAutomationsCosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAutomationsCosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.strategies.Msg/UpdateAutomationsCosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAutomationsCosts(ctx, req.(*MsgUpdateAutomationsCosts))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.strategies.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ArbitrageDeposit",
			Handler:    _Msg_ArbitrageDeposit_Handler,
		},
		{
			MethodName: "ArbitrageRedeem",
			Handler:    _Msg_ArbitrageRedeem_Handler,
		},
		{
			MethodName: "AutomationsAdd",
			Handler:    _Msg_AutomationsAdd_Handler,
		},
		{
			MethodName: "AutomationsImport",
			Handler:    _Msg_AutomationsImport_Handler,
		},
		{
			MethodName: "AutomationsUpdate",
			Handler:    _Msg_AutomationsUpdate_Handler,
		},
		{
			MethodName: "AutomationsRemove",
			Handler:    _Msg_AutomationsRemove_Handler,
		},
		{
			MethodName: "AutomationsRemoveMultiple",
			Handler:    _Msg_AutomationsRemoveMultiple_Handler,
		},
		{
			MethodName: "AutomationsActive",
			Handler:    _Msg_AutomationsActive_Handler,
		},
		{
			MethodName: "AutomationsActiveMultiple",
			Handler:    _Msg_AutomationsActiveMultiple_Handler,
		},
		{
			MethodName: "AutomationsAddFunds",
			Handler:    _Msg_AutomationsAddFunds_Handler,
		},
		{
			MethodName: "AutomationsWithdrawFunds",
			Handler:    _Msg_AutomationsWithdrawFunds_Handler,
		},
		{
			MethodName: "UpdateAutomationsCosts",
			Handler:    _Msg_UpdateAutomationsCosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/strategies/tx.proto",
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Void) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAutomationsCosts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAutomationsCosts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAutomationsCosts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ActionFee))
		i--
		dAtA[i] = 0x18
	}
	if m.ConditionFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ConditionFee))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsWidthrawFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsWidthrawFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsWidthrawFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsAddFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsAddFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsAddFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsActive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsActiveMultiple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsActiveMultiple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsActiveMultiple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Indexes) > 0 {
		dAtA2 := make([]byte, len(m.Indexes)*10)
		var j1 int
		for _, num := range m.Indexes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		i -= len(m.Actions)
		copy(dAtA[i:], m.Actions)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Actions)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Conditions) > 0 {
		i -= len(m.Conditions)
		copy(dAtA[i:], m.Conditions)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Conditions)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ValidityValue) > 0 {
		i -= len(m.ValidityValue)
		copy(dAtA[i:], m.ValidityValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidityValue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidityType) > 0 {
		i -= len(m.ValidityType)
		copy(dAtA[i:], m.ValidityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidityType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IntervalLength) > 0 {
		i -= len(m.IntervalLength)
		copy(dAtA[i:], m.IntervalLength)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntervalLength)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IntervalType) > 0 {
		i -= len(m.IntervalType)
		copy(dAtA[i:], m.IntervalType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntervalType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutomationImport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutomationImport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutomationImport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ValidityValue) > 0 {
		i -= len(m.ValidityValue)
		copy(dAtA[i:], m.ValidityValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidityValue)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidityType) > 0 {
		i -= len(m.ValidityType)
		copy(dAtA[i:], m.ValidityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidityType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IntervalLength) > 0 {
		i -= len(m.IntervalLength)
		copy(dAtA[i:], m.IntervalLength)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntervalLength)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IntervalType) > 0 {
		i -= len(m.IntervalType)
		copy(dAtA[i:], m.IntervalType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntervalType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsImport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsImport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsImport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Automations) > 0 {
		i -= len(m.Automations)
		copy(dAtA[i:], m.Automations)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Automations)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Actions) > 0 {
		i -= len(m.Actions)
		copy(dAtA[i:], m.Actions)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Actions)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Conditions) > 0 {
		i -= len(m.Conditions)
		copy(dAtA[i:], m.Conditions)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Conditions)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ValidityValue) > 0 {
		i -= len(m.ValidityValue)
		copy(dAtA[i:], m.ValidityValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidityValue)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ValidityType) > 0 {
		i -= len(m.ValidityType)
		copy(dAtA[i:], m.ValidityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidityType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IntervalLength) > 0 {
		i -= len(m.IntervalLength)
		copy(dAtA[i:], m.IntervalLength)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntervalLength)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IntervalType) > 0 {
		i -= len(m.IntervalType)
		copy(dAtA[i:], m.IntervalType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntervalType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAutomationsRemoveMultiple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAutomationsRemoveMultiple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAutomationsRemoveMultiple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indexes) > 0 {
		dAtA4 := make([]byte, len(m.Indexes)*10)
		var j3 int
		for _, num := range m.Indexes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTx(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitrageDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitrageDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitrageDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgArbitrageRedeem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgArbitrageRedeem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgArbitrageRedeem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowIncomplete {
		i--
		if m.AllowIncomplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Void) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAutomationsCosts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ConditionFee != 0 {
		n += 1 + sovTx(uint64(m.ConditionFee))
	}
	if m.ActionFee != 0 {
		n += 1 + sovTx(uint64(m.ActionFee))
	}
	return n
}

func (m *MsgAutomationsWidthrawFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAutomationsAddFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAutomationsActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTx(uint64(m.Index))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *MsgAutomationsActiveMultiple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Indexes) > 0 {
		l = 0
		for _, e := range m.Indexes {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *MsgAutomationsAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IntervalType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IntervalLength)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidityValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Actions)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *AutomationImport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IntervalType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IntervalLength)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidityValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAutomationsImport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Automations)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAutomationsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTx(uint64(m.Index))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IntervalType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IntervalLength)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidityValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Actions)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *MsgAutomationsRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTx(uint64(m.Index))
	}
	return n
}

func (m *MsgAutomationsRemoveMultiple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Indexes) > 0 {
		l = 0
		for _, e := range m.Indexes {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgArbitrageDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgArbitrageRedeem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AllowIncomplete {
		n += 2
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAutomationsCosts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAutomationsCosts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAutomationsCosts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionFee", wireType)
			}
			m.ConditionFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConditionFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionFee", wireType)
			}
			m.ActionFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsWidthrawFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsWidthrawFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsWidthrawFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsAddFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsAddFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsAddFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsActive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsActive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsActive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsActiveMultiple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsActiveMultiple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsActiveMultiple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indexes = append(m.Indexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indexes) == 0 {
					m.Indexes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indexes = append(m.Indexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntervalType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntervalLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutomationImport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutomationImport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutomationImport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntervalType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntervalLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsImport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsImport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsImport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Automations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Automations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntervalType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntervalLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAutomationsRemoveMultiple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAutomationsRemoveMultiple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAutomationsRemoveMultiple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indexes = append(m.Indexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indexes) == 0 {
					m.Indexes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indexes = append(m.Indexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitrageDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitrageDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitrageDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgArbitrageRedeem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgArbitrageRedeem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgArbitrageRedeem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowIncomplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowIncomplete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
