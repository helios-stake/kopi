// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/dex/wallet_trade_amount.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WalletTradeAmount struct {
	Address string                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"amount"`
}

func (m *WalletTradeAmount) Reset()         { *m = WalletTradeAmount{} }
func (m *WalletTradeAmount) String() string { return proto.CompactTextString(m) }
func (*WalletTradeAmount) ProtoMessage()    {}
func (*WalletTradeAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f528a3d7d783918, []int{0}
}
func (m *WalletTradeAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletTradeAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletTradeAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletTradeAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletTradeAmount.Merge(m, src)
}
func (m *WalletTradeAmount) XXX_Size() int {
	return m.Size()
}
func (m *WalletTradeAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletTradeAmount.DiscardUnknown(m)
}

var xxx_messageInfo_WalletTradeAmount proto.InternalMessageInfo

func (m *WalletTradeAmount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*WalletTradeAmount)(nil), "kopi.dex.WalletTradeAmount")
}

func init() {
	proto.RegisterFile("kopi/dex/wallet_trade_amount.proto", fileDescriptor_6f528a3d7d783918)
}

var fileDescriptor_6f528a3d7d783918 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xca, 0xce, 0x2f, 0xc8,
	0xd4, 0x4f, 0x49, 0xad, 0xd0, 0x2f, 0x4f, 0xcc, 0xc9, 0x49, 0x2d, 0x89, 0x2f, 0x29, 0x4a, 0x4c,
	0x49, 0x8d, 0x4f, 0xcc, 0xcd, 0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x00, 0xa9, 0xd1, 0x4b, 0x49, 0xad, 0x90, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x0b, 0xea, 0x83,
	0x58, 0x10, 0x79, 0xa5, 0x2c, 0x2e, 0xc1, 0x70, 0xb0, 0xe6, 0x10, 0x90, 0x5e, 0x47, 0xb0, 0x56,
	0x21, 0x09, 0x2e, 0xf6, 0xc4, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x18, 0x57, 0xc8, 0x9a, 0x8b, 0x0d, 0x62, 0xbc, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x8f,
	0x93, 0xf2, 0x89, 0x7b, 0xf2, 0x0c, 0xb7, 0xee, 0xc9, 0x4b, 0x27, 0xe7, 0x17, 0xe7, 0xe6, 0x17,
	0x17, 0xa7, 0x64, 0xeb, 0x65, 0xe6, 0xeb, 0xe7, 0x26, 0x96, 0x64, 0xe8, 0xf9, 0xa4, 0xa6, 0x27,
	0x26, 0x57, 0xba, 0xa4, 0x26, 0x07, 0x41, 0xb5, 0x38, 0x39, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1,
	0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70,
	0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x5a, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae,
	0x3e, 0xc8, 0xc1, 0xba, 0xb9, 0xf9, 0x79, 0xa9, 0x95, 0x60, 0xa6, 0x7e, 0x05, 0xd8, 0x87, 0x25,
	0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x47, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x73,
	0xca, 0xfb, 0xdf, 0xfa, 0x00, 0x00, 0x00,
}

func (m *WalletTradeAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletTradeAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletTradeAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintWalletTradeAmount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWalletTradeAmount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWalletTradeAmount(dAtA []byte, offset int, v uint64) int {
	offset -= sovWalletTradeAmount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WalletTradeAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWalletTradeAmount(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovWalletTradeAmount(uint64(l))
	return n
}

func sovWalletTradeAmount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWalletTradeAmount(x uint64) (n int) {
	return sovWalletTradeAmount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WalletTradeAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalletTradeAmount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletTradeAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletTradeAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalletTradeAmount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalletTradeAmount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalletTradeAmount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalletTradeAmount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWalletTradeAmount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWalletTradeAmount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalletTradeAmount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWalletTradeAmount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWalletTradeAmount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWalletTradeAmount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWalletTradeAmount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWalletTradeAmount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWalletTradeAmount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWalletTradeAmount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWalletTradeAmount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWalletTradeAmount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWalletTradeAmount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWalletTradeAmount = fmt.Errorf("proto: unexpected end of group")
)
