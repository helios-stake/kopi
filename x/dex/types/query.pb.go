// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/dex/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLiquidityPoolRequest struct {
}

func (m *QueryLiquidityPoolRequest) Reset()         { *m = QueryLiquidityPoolRequest{} }
func (m *QueryLiquidityPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolRequest) ProtoMessage()    {}
func (*QueryLiquidityPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{0}
}
func (m *QueryLiquidityPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolRequest.Merge(m, src)
}
func (m *QueryLiquidityPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolRequest proto.InternalMessageInfo

type LiquidityPoolEntry struct {
	Denom        string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAmount   string `protobuf:"bytes,2,opt,name=pool_amount,json=poolAmount,proto3" json:"pool_amount,omitempty"`
	LiquiditySum string `protobuf:"bytes,3,opt,name=liquidity_sum,json=liquiditySum,proto3" json:"liquidity_sum,omitempty"`
	EntriesSum   string `protobuf:"bytes,4,opt,name=entries_sum,json=entriesSum,proto3" json:"entries_sum,omitempty"`
}

func (m *LiquidityPoolEntry) Reset()         { *m = LiquidityPoolEntry{} }
func (m *LiquidityPoolEntry) String() string { return proto.CompactTextString(m) }
func (*LiquidityPoolEntry) ProtoMessage()    {}
func (*LiquidityPoolEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{1}
}
func (m *LiquidityPoolEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPoolEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPoolEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPoolEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPoolEntry.Merge(m, src)
}
func (m *LiquidityPoolEntry) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPoolEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPoolEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPoolEntry proto.InternalMessageInfo

func (m *LiquidityPoolEntry) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *LiquidityPoolEntry) GetPoolAmount() string {
	if m != nil {
		return m.PoolAmount
	}
	return ""
}

func (m *LiquidityPoolEntry) GetLiquiditySum() string {
	if m != nil {
		return m.LiquiditySum
	}
	return ""
}

func (m *LiquidityPoolEntry) GetEntriesSum() string {
	if m != nil {
		return m.EntriesSum
	}
	return ""
}

type QueryLiquidityPoolResponse struct {
	Entries []*LiquidityPoolEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *QueryLiquidityPoolResponse) Reset()         { *m = QueryLiquidityPoolResponse{} }
func (m *QueryLiquidityPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityPoolResponse) ProtoMessage()    {}
func (*QueryLiquidityPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{2}
}
func (m *QueryLiquidityPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityPoolResponse.Merge(m, src)
}
func (m *QueryLiquidityPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityPoolResponse proto.InternalMessageInfo

func (m *QueryLiquidityPoolResponse) GetEntries() []*LiquidityPoolEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type OrdersByPairRequest struct {
	DenomGiving    string `protobuf:"bytes,1,opt,name=denom_giving,json=denomGiving,proto3" json:"denom_giving,omitempty"`
	DenomReceiving string `protobuf:"bytes,2,opt,name=denom_receiving,json=denomReceiving,proto3" json:"denom_receiving,omitempty"`
}

func (m *OrdersByPairRequest) Reset()         { *m = OrdersByPairRequest{} }
func (m *OrdersByPairRequest) String() string { return proto.CompactTextString(m) }
func (*OrdersByPairRequest) ProtoMessage()    {}
func (*OrdersByPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{3}
}
func (m *OrdersByPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrdersByPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrdersByPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrdersByPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersByPairRequest.Merge(m, src)
}
func (m *OrdersByPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrdersByPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersByPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersByPairRequest proto.InternalMessageInfo

func (m *OrdersByPairRequest) GetDenomGiving() string {
	if m != nil {
		return m.DenomGiving
	}
	return ""
}

func (m *OrdersByPairRequest) GetDenomReceiving() string {
	if m != nil {
		return m.DenomReceiving
	}
	return ""
}

type QueryOrdersByPairResponse struct {
	Bids []*OrderResponse `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks []*OrderResponse `protobuf:"bytes,2,rep,name=asks,proto3" json:"asks,omitempty"`
}

func (m *QueryOrdersByPairResponse) Reset()         { *m = QueryOrdersByPairResponse{} }
func (m *QueryOrdersByPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersByPairResponse) ProtoMessage()    {}
func (*QueryOrdersByPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{4}
}
func (m *QueryOrdersByPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersByPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersByPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersByPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersByPairResponse.Merge(m, src)
}
func (m *QueryOrdersByPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersByPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersByPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersByPairResponse proto.InternalMessageInfo

func (m *QueryOrdersByPairResponse) GetBids() []*OrderResponse {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *QueryOrdersByPairResponse) GetAsks() []*OrderResponse {
	if m != nil {
		return m.Asks
	}
	return nil
}

type QueryReserveFundsRequest struct {
}

func (m *QueryReserveFundsRequest) Reset()         { *m = QueryReserveFundsRequest{} }
func (m *QueryReserveFundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReserveFundsRequest) ProtoMessage()    {}
func (*QueryReserveFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{5}
}
func (m *QueryReserveFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveFundsRequest.Merge(m, src)
}
func (m *QueryReserveFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveFundsRequest proto.InternalMessageInfo

type QueryReserveFundsPerDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryReserveFundsPerDenomRequest) Reset()         { *m = QueryReserveFundsPerDenomRequest{} }
func (m *QueryReserveFundsPerDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReserveFundsPerDenomRequest) ProtoMessage()    {}
func (*QueryReserveFundsPerDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{6}
}
func (m *QueryReserveFundsPerDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveFundsPerDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveFundsPerDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveFundsPerDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveFundsPerDenomRequest.Merge(m, src)
}
func (m *QueryReserveFundsPerDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveFundsPerDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveFundsPerDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveFundsPerDenomRequest proto.InternalMessageInfo

func (m *QueryReserveFundsPerDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type Denom struct {
	Denom     string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount    string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountUsd string `protobuf:"bytes,3,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
}

func (m *Denom) Reset()         { *m = Denom{} }
func (m *Denom) String() string { return proto.CompactTextString(m) }
func (*Denom) ProtoMessage()    {}
func (*Denom) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{7}
}
func (m *Denom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Denom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Denom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Denom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Denom.Merge(m, src)
}
func (m *Denom) XXX_Size() int {
	return m.Size()
}
func (m *Denom) XXX_DiscardUnknown() {
	xxx_messageInfo_Denom.DiscardUnknown(m)
}

var xxx_messageInfo_Denom proto.InternalMessageInfo

func (m *Denom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Denom) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Denom) GetAmountUsd() string {
	if m != nil {
		return m.AmountUsd
	}
	return ""
}

type QueryReserveFundsResponse struct {
	Funds []*Denom `protobuf:"bytes,1,rep,name=funds,proto3" json:"funds,omitempty"`
}

func (m *QueryReserveFundsResponse) Reset()         { *m = QueryReserveFundsResponse{} }
func (m *QueryReserveFundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReserveFundsResponse) ProtoMessage()    {}
func (*QueryReserveFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{8}
}
func (m *QueryReserveFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveFundsResponse.Merge(m, src)
}
func (m *QueryReserveFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveFundsResponse proto.InternalMessageInfo

func (m *QueryReserveFundsResponse) GetFunds() []*Denom {
	if m != nil {
		return m.Funds
	}
	return nil
}

type QueryPriceRequest struct {
	DenomGiving    string `protobuf:"bytes,1,opt,name=denom_giving,json=denomGiving,proto3" json:"denom_giving,omitempty"`
	DenomReceiving string `protobuf:"bytes,2,opt,name=denom_receiving,json=denomReceiving,proto3" json:"denom_receiving,omitempty"`
}

func (m *QueryPriceRequest) Reset()         { *m = QueryPriceRequest{} }
func (m *QueryPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPriceRequest) ProtoMessage()    {}
func (*QueryPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{9}
}
func (m *QueryPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceRequest.Merge(m, src)
}
func (m *QueryPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceRequest proto.InternalMessageInfo

func (m *QueryPriceRequest) GetDenomGiving() string {
	if m != nil {
		return m.DenomGiving
	}
	return ""
}

func (m *QueryPriceRequest) GetDenomReceiving() string {
	if m != nil {
		return m.DenomReceiving
	}
	return ""
}

type QueryPriceResponse struct {
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *QueryPriceResponse) Reset()         { *m = QueryPriceResponse{} }
func (m *QueryPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPriceResponse) ProtoMessage()    {}
func (*QueryPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{10}
}
func (m *QueryPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceResponse.Merge(m, src)
}
func (m *QueryPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceResponse proto.InternalMessageInfo

func (m *QueryPriceResponse) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{11}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{12}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetLiquiditySumRequest struct {
}

func (m *QueryGetLiquiditySumRequest) Reset()         { *m = QueryGetLiquiditySumRequest{} }
func (m *QueryGetLiquiditySumRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquiditySumRequest) ProtoMessage()    {}
func (*QueryGetLiquiditySumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{13}
}
func (m *QueryGetLiquiditySumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquiditySumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquiditySumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquiditySumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquiditySumRequest.Merge(m, src)
}
func (m *QueryGetLiquiditySumRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquiditySumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquiditySumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquiditySumRequest proto.InternalMessageInfo

type QueryGetLiquiditySumResponse struct {
	ValueUsd string `protobuf:"bytes,1,opt,name=value_usd,json=valueUsd,proto3" json:"value_usd,omitempty"`
}

func (m *QueryGetLiquiditySumResponse) Reset()         { *m = QueryGetLiquiditySumResponse{} }
func (m *QueryGetLiquiditySumResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquiditySumResponse) ProtoMessage()    {}
func (*QueryGetLiquiditySumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{14}
}
func (m *QueryGetLiquiditySumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquiditySumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquiditySumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquiditySumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquiditySumResponse.Merge(m, src)
}
func (m *QueryGetLiquiditySumResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquiditySumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquiditySumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquiditySumResponse proto.InternalMessageInfo

func (m *QueryGetLiquiditySumResponse) GetValueUsd() string {
	if m != nil {
		return m.ValueUsd
	}
	return ""
}

type QueryGetLiquidityAllRequest struct {
}

func (m *QueryGetLiquidityAllRequest) Reset()         { *m = QueryGetLiquidityAllRequest{} }
func (m *QueryGetLiquidityAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityAllRequest) ProtoMessage()    {}
func (*QueryGetLiquidityAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{15}
}
func (m *QueryGetLiquidityAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityAllRequest.Merge(m, src)
}
func (m *QueryGetLiquidityAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityAllRequest proto.InternalMessageInfo

type QueryGetLiquidityAllResponseEntry struct {
	Denom     string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount    string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountUsd string `protobuf:"bytes,3,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
}

func (m *QueryGetLiquidityAllResponseEntry) Reset()         { *m = QueryGetLiquidityAllResponseEntry{} }
func (m *QueryGetLiquidityAllResponseEntry) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityAllResponseEntry) ProtoMessage()    {}
func (*QueryGetLiquidityAllResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{16}
}
func (m *QueryGetLiquidityAllResponseEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityAllResponseEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityAllResponseEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityAllResponseEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityAllResponseEntry.Merge(m, src)
}
func (m *QueryGetLiquidityAllResponseEntry) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityAllResponseEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityAllResponseEntry.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityAllResponseEntry proto.InternalMessageInfo

func (m *QueryGetLiquidityAllResponseEntry) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetLiquidityAllResponseEntry) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryGetLiquidityAllResponseEntry) GetAmountUsd() string {
	if m != nil {
		return m.AmountUsd
	}
	return ""
}

type QueryGetLiquidityAllResponse struct {
	Denoms []*QueryGetLiquidityAllResponseEntry `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QueryGetLiquidityAllResponse) Reset()         { *m = QueryGetLiquidityAllResponse{} }
func (m *QueryGetLiquidityAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityAllResponse) ProtoMessage()    {}
func (*QueryGetLiquidityAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{17}
}
func (m *QueryGetLiquidityAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityAllResponse.Merge(m, src)
}
func (m *QueryGetLiquidityAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityAllResponse proto.InternalMessageInfo

func (m *QueryGetLiquidityAllResponse) GetDenoms() []*QueryGetLiquidityAllResponseEntry {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type QueryGetLiquidityRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetLiquidityRequest) Reset()         { *m = QueryGetLiquidityRequest{} }
func (m *QueryGetLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityRequest) ProtoMessage()    {}
func (*QueryGetLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{18}
}
func (m *QueryGetLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityRequest.Merge(m, src)
}
func (m *QueryGetLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityRequest proto.InternalMessageInfo

func (m *QueryGetLiquidityRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetLiquidityResponse struct {
	Amount       string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	VirtualOther string `protobuf:"bytes,2,opt,name=virtual_other,json=virtualOther,proto3" json:"virtual_other,omitempty"`
	VirtualBase  string `protobuf:"bytes,3,opt,name=virtual_base,json=virtualBase,proto3" json:"virtual_base,omitempty"`
	Sum          string `protobuf:"bytes,4,opt,name=sum,proto3" json:"sum,omitempty"`
	Pool         string `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryGetLiquidityResponse) Reset()         { *m = QueryGetLiquidityResponse{} }
func (m *QueryGetLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityResponse) ProtoMessage()    {}
func (*QueryGetLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{19}
}
func (m *QueryGetLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityResponse.Merge(m, src)
}
func (m *QueryGetLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityResponse proto.InternalMessageInfo

func (m *QueryGetLiquidityResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryGetLiquidityResponse) GetVirtualOther() string {
	if m != nil {
		return m.VirtualOther
	}
	return ""
}

func (m *QueryGetLiquidityResponse) GetVirtualBase() string {
	if m != nil {
		return m.VirtualBase
	}
	return ""
}

func (m *QueryGetLiquidityResponse) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

func (m *QueryGetLiquidityResponse) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

type LiquidityEntry struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *LiquidityEntry) Reset()         { *m = LiquidityEntry{} }
func (m *LiquidityEntry) String() string { return proto.CompactTextString(m) }
func (*LiquidityEntry) ProtoMessage()    {}
func (*LiquidityEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{20}
}
func (m *LiquidityEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityEntry.Merge(m, src)
}
func (m *LiquidityEntry) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityEntry proto.InternalMessageInfo

func (m *LiquidityEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LiquidityEntry) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QueryGetLiquidityQueueRequest struct {
	Denom      string             `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetLiquidityQueueRequest) Reset()         { *m = QueryGetLiquidityQueueRequest{} }
func (m *QueryGetLiquidityQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityQueueRequest) ProtoMessage()    {}
func (*QueryGetLiquidityQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{21}
}
func (m *QueryGetLiquidityQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityQueueRequest.Merge(m, src)
}
func (m *QueryGetLiquidityQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityQueueRequest proto.InternalMessageInfo

func (m *QueryGetLiquidityQueueRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetLiquidityQueueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLiquidityQueueResponse struct {
	Entries    []*LiquidityEntry   `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetLiquidityQueueResponse) Reset()         { *m = QueryGetLiquidityQueueResponse{} }
func (m *QueryGetLiquidityQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityQueueResponse) ProtoMessage()    {}
func (*QueryGetLiquidityQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{22}
}
func (m *QueryGetLiquidityQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityQueueResponse.Merge(m, src)
}
func (m *QueryGetLiquidityQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityQueueResponse proto.InternalMessageInfo

func (m *QueryGetLiquidityQueueResponse) GetEntries() []*LiquidityEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *QueryGetLiquidityQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLiquidityShareRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetLiquidityShareRequest) Reset()         { *m = QueryGetLiquidityShareRequest{} }
func (m *QueryGetLiquidityShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityShareRequest) ProtoMessage()    {}
func (*QueryGetLiquidityShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{23}
}
func (m *QueryGetLiquidityShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityShareRequest.Merge(m, src)
}
func (m *QueryGetLiquidityShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityShareRequest proto.InternalMessageInfo

func (m *QueryGetLiquidityShareRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetLiquidityPairRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetLiquidityPairRequest) Reset()         { *m = QueryGetLiquidityPairRequest{} }
func (m *QueryGetLiquidityPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityPairRequest) ProtoMessage()    {}
func (*QueryGetLiquidityPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{24}
}
func (m *QueryGetLiquidityPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityPairRequest.Merge(m, src)
}
func (m *QueryGetLiquidityPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityPairRequest proto.InternalMessageInfo

func (m *QueryGetLiquidityPairRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetLiquidityPairResponse struct {
	Denom        string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	VirtualBase  string `protobuf:"bytes,2,opt,name=virtual_base,json=virtualBase,proto3" json:"virtual_base,omitempty"`
	VirtualOther string `protobuf:"bytes,3,opt,name=virtual_other,json=virtualOther,proto3" json:"virtual_other,omitempty"`
	FullBase     string `protobuf:"bytes,4,opt,name=full_base,json=fullBase,proto3" json:"full_base,omitempty"`
	FullOther    string `protobuf:"bytes,5,opt,name=full_other,json=fullOther,proto3" json:"full_other,omitempty"`
}

func (m *QueryGetLiquidityPairResponse) Reset()         { *m = QueryGetLiquidityPairResponse{} }
func (m *QueryGetLiquidityPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidityPairResponse) ProtoMessage()    {}
func (*QueryGetLiquidityPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{25}
}
func (m *QueryGetLiquidityPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidityPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidityPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidityPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidityPairResponse.Merge(m, src)
}
func (m *QueryGetLiquidityPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidityPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidityPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidityPairResponse proto.InternalMessageInfo

func (m *QueryGetLiquidityPairResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetLiquidityPairResponse) GetVirtualBase() string {
	if m != nil {
		return m.VirtualBase
	}
	return ""
}

func (m *QueryGetLiquidityPairResponse) GetVirtualOther() string {
	if m != nil {
		return m.VirtualOther
	}
	return ""
}

func (m *QueryGetLiquidityPairResponse) GetFullBase() string {
	if m != nil {
		return m.FullBase
	}
	return ""
}

func (m *QueryGetLiquidityPairResponse) GetFullOther() string {
	if m != nil {
		return m.FullOther
	}
	return ""
}

type QueryAllLiquidityPairRequest struct {
}

func (m *QueryAllLiquidityPairRequest) Reset()         { *m = QueryAllLiquidityPairRequest{} }
func (m *QueryAllLiquidityPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidityPairRequest) ProtoMessage()    {}
func (*QueryAllLiquidityPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{26}
}
func (m *QueryAllLiquidityPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidityPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidityPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidityPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidityPairRequest.Merge(m, src)
}
func (m *QueryAllLiquidityPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidityPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidityPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidityPairRequest proto.InternalMessageInfo

type QueryAllLiquidityPairResponse struct {
	LiquidityPair []LiquidityPair `protobuf:"bytes,1,rep,name=liquidity_pair,json=liquidityPair,proto3" json:"liquidity_pair"`
}

func (m *QueryAllLiquidityPairResponse) Reset()         { *m = QueryAllLiquidityPairResponse{} }
func (m *QueryAllLiquidityPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidityPairResponse) ProtoMessage()    {}
func (*QueryAllLiquidityPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{27}
}
func (m *QueryAllLiquidityPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidityPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidityPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidityPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidityPairResponse.Merge(m, src)
}
func (m *QueryAllLiquidityPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidityPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidityPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidityPairResponse proto.InternalMessageInfo

func (m *QueryAllLiquidityPairResponse) GetLiquidityPair() []LiquidityPair {
	if m != nil {
		return m.LiquidityPair
	}
	return nil
}

type QueryTradeRequest struct {
}

func (m *QueryTradeRequest) Reset()         { *m = QueryTradeRequest{} }
func (m *QueryTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRequest) ProtoMessage()    {}
func (*QueryTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{28}
}
func (m *QueryTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRequest.Merge(m, src)
}
func (m *QueryTradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRequest proto.InternalMessageInfo

// this line is used by starport scaffolding # 3
type QueryLiquidityForAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLiquidityForAddressRequest) Reset()         { *m = QueryLiquidityForAddressRequest{} }
func (m *QueryLiquidityForAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityForAddressRequest) ProtoMessage()    {}
func (*QueryLiquidityForAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{29}
}
func (m *QueryLiquidityForAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityForAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityForAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityForAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityForAddressRequest.Merge(m, src)
}
func (m *QueryLiquidityForAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityForAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityForAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityForAddressRequest proto.InternalMessageInfo

func (m *QueryLiquidityForAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddressLiquidity struct {
	Denom               string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	UserAmount          string `protobuf:"bytes,2,opt,name=user_amount,json=userAmount,proto3" json:"user_amount,omitempty"`
	UserAmountUsd       string `protobuf:"bytes,3,opt,name=user_amount_usd,json=userAmountUsd,proto3" json:"user_amount_usd,omitempty"`
	Total               string `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	TotalUsd            string `protobuf:"bytes,5,opt,name=total_usd,json=totalUsd,proto3" json:"total_usd,omitempty"`
	AvailableBalance    string `protobuf:"bytes,6,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	AvailableBalanceUsd string `protobuf:"bytes,7,opt,name=available_balance_usd,json=availableBalanceUsd,proto3" json:"available_balance_usd,omitempty"`
}

func (m *AddressLiquidity) Reset()         { *m = AddressLiquidity{} }
func (m *AddressLiquidity) String() string { return proto.CompactTextString(m) }
func (*AddressLiquidity) ProtoMessage()    {}
func (*AddressLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{30}
}
func (m *AddressLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressLiquidity.Merge(m, src)
}
func (m *AddressLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *AddressLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_AddressLiquidity proto.InternalMessageInfo

func (m *AddressLiquidity) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AddressLiquidity) GetUserAmount() string {
	if m != nil {
		return m.UserAmount
	}
	return ""
}

func (m *AddressLiquidity) GetUserAmountUsd() string {
	if m != nil {
		return m.UserAmountUsd
	}
	return ""
}

func (m *AddressLiquidity) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *AddressLiquidity) GetTotalUsd() string {
	if m != nil {
		return m.TotalUsd
	}
	return ""
}

func (m *AddressLiquidity) GetAvailableBalance() string {
	if m != nil {
		return m.AvailableBalance
	}
	return ""
}

func (m *AddressLiquidity) GetAvailableBalanceUsd() string {
	if m != nil {
		return m.AvailableBalanceUsd
	}
	return ""
}

type QueryLiquidityForAddressResponse struct {
	Liquidity []*AddressLiquidity `protobuf:"bytes,1,rep,name=liquidity,proto3" json:"liquidity,omitempty"`
}

func (m *QueryLiquidityForAddressResponse) Reset()         { *m = QueryLiquidityForAddressResponse{} }
func (m *QueryLiquidityForAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityForAddressResponse) ProtoMessage()    {}
func (*QueryLiquidityForAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{31}
}
func (m *QueryLiquidityForAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityForAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityForAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityForAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityForAddressResponse.Merge(m, src)
}
func (m *QueryLiquidityForAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityForAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityForAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityForAddressResponse proto.InternalMessageInfo

func (m *QueryLiquidityForAddressResponse) GetLiquidity() []*AddressLiquidity {
	if m != nil {
		return m.Liquidity
	}
	return nil
}

type QueryPriceUsdRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryPriceUsdRequest) Reset()         { *m = QueryPriceUsdRequest{} }
func (m *QueryPriceUsdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPriceUsdRequest) ProtoMessage()    {}
func (*QueryPriceUsdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{32}
}
func (m *QueryPriceUsdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceUsdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceUsdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceUsdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceUsdRequest.Merge(m, src)
}
func (m *QueryPriceUsdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceUsdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceUsdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceUsdRequest proto.InternalMessageInfo

func (m *QueryPriceUsdRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryPriceUsdResponse struct {
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *QueryPriceUsdResponse) Reset()         { *m = QueryPriceUsdResponse{} }
func (m *QueryPriceUsdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPriceUsdResponse) ProtoMessage()    {}
func (*QueryPriceUsdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{33}
}
func (m *QueryPriceUsdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceUsdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceUsdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceUsdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceUsdResponse.Merge(m, src)
}
func (m *QueryPriceUsdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceUsdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceUsdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceUsdResponse proto.InternalMessageInfo

func (m *QueryPriceUsdResponse) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

type QueryGetOrderRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetOrderRequest) Reset()         { *m = QueryGetOrderRequest{} }
func (m *QueryGetOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderRequest) ProtoMessage()    {}
func (*QueryGetOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{34}
}
func (m *QueryGetOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderRequest.Merge(m, src)
}
func (m *QueryGetOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderRequest proto.InternalMessageInfo

func (m *QueryGetOrderRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetOrderResponse struct {
	Order Order `protobuf:"bytes,1,opt,name=Order,proto3" json:"Order"`
}

func (m *QueryGetOrderResponse) Reset()         { *m = QueryGetOrderResponse{} }
func (m *QueryGetOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderResponse) ProtoMessage()    {}
func (*QueryGetOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{35}
}
func (m *QueryGetOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderResponse.Merge(m, src)
}
func (m *QueryGetOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderResponse proto.InternalMessageInfo

func (m *QueryGetOrderResponse) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order{}
}

type QueryOrdersAddressRequest struct {
	Address        string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	DenomGiving    string             `protobuf:"bytes,2,opt,name=denom_giving,json=denomGiving,proto3" json:"denom_giving,omitempty"`
	DenomReceiving string             `protobuf:"bytes,3,opt,name=denom_receiving,json=denomReceiving,proto3" json:"denom_receiving,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOrdersAddressRequest) Reset()         { *m = QueryOrdersAddressRequest{} }
func (m *QueryOrdersAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersAddressRequest) ProtoMessage()    {}
func (*QueryOrdersAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{36}
}
func (m *QueryOrdersAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersAddressRequest.Merge(m, src)
}
func (m *QueryOrdersAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersAddressRequest proto.InternalMessageInfo

func (m *QueryOrdersAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryOrdersAddressRequest) GetDenomGiving() string {
	if m != nil {
		return m.DenomGiving
	}
	return ""
}

func (m *QueryOrdersAddressRequest) GetDenomReceiving() string {
	if m != nil {
		return m.DenomReceiving
	}
	return ""
}

func (m *QueryOrdersAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOrdersAddressResponse struct {
	Orders     []*OrderResponse    `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOrdersAddressResponse) Reset()         { *m = QueryOrdersAddressResponse{} }
func (m *QueryOrdersAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersAddressResponse) ProtoMessage()    {}
func (*QueryOrdersAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{37}
}
func (m *QueryOrdersAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersAddressResponse.Merge(m, src)
}
func (m *QueryOrdersAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersAddressResponse proto.InternalMessageInfo

func (m *QueryOrdersAddressResponse) GetOrders() []*OrderResponse {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *QueryOrdersAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOrdersNumRequest struct {
}

func (m *QueryOrdersNumRequest) Reset()         { *m = QueryOrdersNumRequest{} }
func (m *QueryOrdersNumRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersNumRequest) ProtoMessage()    {}
func (*QueryOrdersNumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{38}
}
func (m *QueryOrdersNumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersNumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersNumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersNumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersNumRequest.Merge(m, src)
}
func (m *QueryOrdersNumRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersNumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersNumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersNumRequest proto.InternalMessageInfo

type QueryOrdersNumResponse struct {
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *QueryOrdersNumResponse) Reset()         { *m = QueryOrdersNumResponse{} }
func (m *QueryOrdersNumResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersNumResponse) ProtoMessage()    {}
func (*QueryOrdersNumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{39}
}
func (m *QueryOrdersNumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersNumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersNumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersNumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersNumResponse.Merge(m, src)
}
func (m *QueryOrdersNumResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersNumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersNumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersNumResponse proto.InternalMessageInfo

func (m *QueryOrdersNumResponse) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type QueryOrdersSumRequest struct {
}

func (m *QueryOrdersSumRequest) Reset()         { *m = QueryOrdersSumRequest{} }
func (m *QueryOrdersSumRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersSumRequest) ProtoMessage()    {}
func (*QueryOrdersSumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{40}
}
func (m *QueryOrdersSumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersSumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersSumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersSumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersSumRequest.Merge(m, src)
}
func (m *QueryOrdersSumRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersSumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersSumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersSumRequest proto.InternalMessageInfo

type QueryOrdersSumResponse struct {
	Sum string `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *QueryOrdersSumResponse) Reset()         { *m = QueryOrdersSumResponse{} }
func (m *QueryOrdersSumResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersSumResponse) ProtoMessage()    {}
func (*QueryOrdersSumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{41}
}
func (m *QueryOrdersSumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersSumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersSumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersSumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersSumResponse.Merge(m, src)
}
func (m *QueryOrdersSumResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersSumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersSumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersSumResponse proto.InternalMessageInfo

func (m *QueryOrdersSumResponse) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

type QueryOrdersDenomSumRequest struct {
}

func (m *QueryOrdersDenomSumRequest) Reset()         { *m = QueryOrdersDenomSumRequest{} }
func (m *QueryOrdersDenomSumRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersDenomSumRequest) ProtoMessage()    {}
func (*QueryOrdersDenomSumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{42}
}
func (m *QueryOrdersDenomSumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersDenomSumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersDenomSumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersDenomSumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersDenomSumRequest.Merge(m, src)
}
func (m *QueryOrdersDenomSumRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersDenomSumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersDenomSumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersDenomSumRequest proto.InternalMessageInfo

type OrdersSum struct {
	DenomGiving string `protobuf:"bytes,1,opt,name=denom_giving,json=denomGiving,proto3" json:"denom_giving,omitempty"`
	Sum         string `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *OrdersSum) Reset()         { *m = OrdersSum{} }
func (m *OrdersSum) String() string { return proto.CompactTextString(m) }
func (*OrdersSum) ProtoMessage()    {}
func (*OrdersSum) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{43}
}
func (m *OrdersSum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrdersSum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrdersSum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrdersSum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersSum.Merge(m, src)
}
func (m *OrdersSum) XXX_Size() int {
	return m.Size()
}
func (m *OrdersSum) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersSum.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersSum proto.InternalMessageInfo

func (m *OrdersSum) GetDenomGiving() string {
	if m != nil {
		return m.DenomGiving
	}
	return ""
}

func (m *OrdersSum) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

type QueryOrdersDenomSumResponse struct {
	Denoms []*OrdersSum `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QueryOrdersDenomSumResponse) Reset()         { *m = QueryOrdersDenomSumResponse{} }
func (m *QueryOrdersDenomSumResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersDenomSumResponse) ProtoMessage()    {}
func (*QueryOrdersDenomSumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{44}
}
func (m *QueryOrdersDenomSumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersDenomSumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersDenomSumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersDenomSumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersDenomSumResponse.Merge(m, src)
}
func (m *QueryOrdersDenomSumResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersDenomSumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersDenomSumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersDenomSumResponse proto.InternalMessageInfo

func (m *QueryOrdersDenomSumResponse) GetDenoms() []*OrdersSum {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type QuerySimulateTradeRequest struct {
	DenomGiving    string `protobuf:"bytes,1,opt,name=denom_giving,json=denomGiving,proto3" json:"denom_giving,omitempty"`
	DenomReceiving string `protobuf:"bytes,2,opt,name=denom_receiving,json=denomReceiving,proto3" json:"denom_receiving,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount         string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QuerySimulateTradeRequest) Reset()         { *m = QuerySimulateTradeRequest{} }
func (m *QuerySimulateTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateTradeRequest) ProtoMessage()    {}
func (*QuerySimulateTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{45}
}
func (m *QuerySimulateTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateTradeRequest.Merge(m, src)
}
func (m *QuerySimulateTradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateTradeRequest proto.InternalMessageInfo

func (m *QuerySimulateTradeRequest) GetDenomGiving() string {
	if m != nil {
		return m.DenomGiving
	}
	return ""
}

func (m *QuerySimulateTradeRequest) GetDenomReceiving() string {
	if m != nil {
		return m.DenomReceiving
	}
	return ""
}

func (m *QuerySimulateTradeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QuerySimulateTradeRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QuerySimulateTradeResponse struct {
	AmountGiven         int64  `protobuf:"varint,1,opt,name=amount_given,json=amountGiven,proto3" json:"amount_given,omitempty"`
	AmountGivenInUsd    int64  `protobuf:"varint,2,opt,name=amount_given_in_usd,json=amountGivenInUsd,proto3" json:"amount_given_in_usd,omitempty"`
	AmountReceived      int64  `protobuf:"varint,3,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	AmountReceivedInUsd int64  `protobuf:"varint,4,opt,name=amount_received_in_usd,json=amountReceivedInUsd,proto3" json:"amount_received_in_usd,omitempty"`
	Fee                 int64  `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	Price               string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	PriceGivenInUsd     string `protobuf:"bytes,7,opt,name=price_given_in_usd,json=priceGivenInUsd,proto3" json:"price_given_in_usd,omitempty"`
	PriceReceivedInUsd  string `protobuf:"bytes,8,opt,name=price_received_in_usd,json=priceReceivedInUsd,proto3" json:"price_received_in_usd,omitempty"`
}

func (m *QuerySimulateTradeResponse) Reset()         { *m = QuerySimulateTradeResponse{} }
func (m *QuerySimulateTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateTradeResponse) ProtoMessage()    {}
func (*QuerySimulateTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{46}
}
func (m *QuerySimulateTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateTradeResponse.Merge(m, src)
}
func (m *QuerySimulateTradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateTradeResponse proto.InternalMessageInfo

func (m *QuerySimulateTradeResponse) GetAmountGiven() int64 {
	if m != nil {
		return m.AmountGiven
	}
	return 0
}

func (m *QuerySimulateTradeResponse) GetAmountGivenInUsd() int64 {
	if m != nil {
		return m.AmountGivenInUsd
	}
	return 0
}

func (m *QuerySimulateTradeResponse) GetAmountReceived() int64 {
	if m != nil {
		return m.AmountReceived
	}
	return 0
}

func (m *QuerySimulateTradeResponse) GetAmountReceivedInUsd() int64 {
	if m != nil {
		return m.AmountReceivedInUsd
	}
	return 0
}

func (m *QuerySimulateTradeResponse) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *QuerySimulateTradeResponse) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *QuerySimulateTradeResponse) GetPriceGivenInUsd() string {
	if m != nil {
		return m.PriceGivenInUsd
	}
	return ""
}

func (m *QuerySimulateTradeResponse) GetPriceReceivedInUsd() string {
	if m != nil {
		return m.PriceReceivedInUsd
	}
	return ""
}

type OrderBookSum struct {
	Denom     string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Price     string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	PriceBase string `protobuf:"bytes,3,opt,name=price_base,json=priceBase,proto3" json:"price_base,omitempty"`
	Sum       string `protobuf:"bytes,4,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *OrderBookSum) Reset()         { *m = OrderBookSum{} }
func (m *OrderBookSum) String() string { return proto.CompactTextString(m) }
func (*OrderBookSum) ProtoMessage()    {}
func (*OrderBookSum) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{47}
}
func (m *OrderBookSum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBookSum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBookSum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBookSum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookSum.Merge(m, src)
}
func (m *OrderBookSum) XXX_Size() int {
	return m.Size()
}
func (m *OrderBookSum) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookSum.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookSum proto.InternalMessageInfo

func (m *OrderBookSum) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *OrderBookSum) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *OrderBookSum) GetPriceBase() string {
	if m != nil {
		return m.PriceBase
	}
	return ""
}

func (m *OrderBookSum) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

type QueryDepthToRequest struct {
	DenomReceiving string `protobuf:"bytes,1,opt,name=denom_receiving,json=denomReceiving,proto3" json:"denom_receiving,omitempty"`
}

func (m *QueryDepthToRequest) Reset()         { *m = QueryDepthToRequest{} }
func (m *QueryDepthToRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepthToRequest) ProtoMessage()    {}
func (*QueryDepthToRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{48}
}
func (m *QueryDepthToRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepthToRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepthToRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepthToRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepthToRequest.Merge(m, src)
}
func (m *QueryDepthToRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepthToRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepthToRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepthToRequest proto.InternalMessageInfo

func (m *QueryDepthToRequest) GetDenomReceiving() string {
	if m != nil {
		return m.DenomReceiving
	}
	return ""
}

type QueryDepthToResponse struct {
	Orders []*OrderBookSum `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryDepthToResponse) Reset()         { *m = QueryDepthToResponse{} }
func (m *QueryDepthToResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepthToResponse) ProtoMessage()    {}
func (*QueryDepthToResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{49}
}
func (m *QueryDepthToResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepthToResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepthToResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepthToResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepthToResponse.Merge(m, src)
}
func (m *QueryDepthToResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepthToResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepthToResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepthToResponse proto.InternalMessageInfo

func (m *QueryDepthToResponse) GetOrders() []*OrderBookSum {
	if m != nil {
		return m.Orders
	}
	return nil
}

type QueryDepthFromRequest struct {
	DenomGiving string `protobuf:"bytes,1,opt,name=denom_giving,json=denomGiving,proto3" json:"denom_giving,omitempty"`
}

func (m *QueryDepthFromRequest) Reset()         { *m = QueryDepthFromRequest{} }
func (m *QueryDepthFromRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepthFromRequest) ProtoMessage()    {}
func (*QueryDepthFromRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{50}
}
func (m *QueryDepthFromRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepthFromRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepthFromRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepthFromRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepthFromRequest.Merge(m, src)
}
func (m *QueryDepthFromRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepthFromRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepthFromRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepthFromRequest proto.InternalMessageInfo

func (m *QueryDepthFromRequest) GetDenomGiving() string {
	if m != nil {
		return m.DenomGiving
	}
	return ""
}

type QueryDepthFromResponse struct {
	Orders []*OrderBookSum `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryDepthFromResponse) Reset()         { *m = QueryDepthFromResponse{} }
func (m *QueryDepthFromResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepthFromResponse) ProtoMessage()    {}
func (*QueryDepthFromResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{51}
}
func (m *QueryDepthFromResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepthFromResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepthFromResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepthFromResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepthFromResponse.Merge(m, src)
}
func (m *QueryDepthFromResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepthFromResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepthFromResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepthFromResponse proto.InternalMessageInfo

func (m *QueryDepthFromResponse) GetOrders() []*OrderBookSum {
	if m != nil {
		return m.Orders
	}
	return nil
}

type QueryOrdersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOrdersRequest) Reset()         { *m = QueryOrdersRequest{} }
func (m *QueryOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersRequest) ProtoMessage()    {}
func (*QueryOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{52}
}
func (m *QueryOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersRequest.Merge(m, src)
}
func (m *QueryOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersRequest proto.InternalMessageInfo

func (m *QueryOrdersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type OrderResponse struct {
	Index             uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Address           string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	DenomGiving       string `protobuf:"bytes,3,opt,name=denom_giving,json=denomGiving,proto3" json:"denom_giving,omitempty"`
	DenomReceiving    string `protobuf:"bytes,4,opt,name=denom_receiving,json=denomReceiving,proto3" json:"denom_receiving,omitempty"`
	AmountGiven       string `protobuf:"bytes,5,opt,name=amount_given,json=amountGiven,proto3" json:"amount_given,omitempty"`
	AmountLeft        string `protobuf:"bytes,6,opt,name=amount_left,json=amountLeft,proto3" json:"amount_left,omitempty"`
	AmountLeftUsd     string `protobuf:"bytes,7,opt,name=amount_left_usd,json=amountLeftUsd,proto3" json:"amount_left_usd,omitempty"`
	AmountReceived    string `protobuf:"bytes,8,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	AmountReceivedUsd string `protobuf:"bytes,9,opt,name=amount_received_usd,json=amountReceivedUsd,proto3" json:"amount_received_usd,omitempty"`
	TradeAmount       string `protobuf:"bytes,10,opt,name=trade_amount,json=tradeAmount,proto3" json:"trade_amount,omitempty"`
	MaxPrice          string `protobuf:"bytes,11,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	MaxPriceUsd       string `protobuf:"bytes,12,opt,name=max_price_usd,json=maxPriceUsd,proto3" json:"max_price_usd,omitempty"`
	NumBlocks         uint64 `protobuf:"varint,13,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	BlockEnd          uint64 `protobuf:"varint,14,opt,name=block_end,json=blockEnd,proto3" json:"block_end,omitempty"`
	AllowIncomplete   bool   `protobuf:"varint,15,opt,name=allow_incomplete,json=allowIncomplete,proto3" json:"allow_incomplete,omitempty"`
}

func (m *OrderResponse) Reset()         { *m = OrderResponse{} }
func (m *OrderResponse) String() string { return proto.CompactTextString(m) }
func (*OrderResponse) ProtoMessage()    {}
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{53}
}
func (m *OrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderResponse.Merge(m, src)
}
func (m *OrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *OrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderResponse proto.InternalMessageInfo

func (m *OrderResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *OrderResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OrderResponse) GetDenomGiving() string {
	if m != nil {
		return m.DenomGiving
	}
	return ""
}

func (m *OrderResponse) GetDenomReceiving() string {
	if m != nil {
		return m.DenomReceiving
	}
	return ""
}

func (m *OrderResponse) GetAmountGiven() string {
	if m != nil {
		return m.AmountGiven
	}
	return ""
}

func (m *OrderResponse) GetAmountLeft() string {
	if m != nil {
		return m.AmountLeft
	}
	return ""
}

func (m *OrderResponse) GetAmountLeftUsd() string {
	if m != nil {
		return m.AmountLeftUsd
	}
	return ""
}

func (m *OrderResponse) GetAmountReceived() string {
	if m != nil {
		return m.AmountReceived
	}
	return ""
}

func (m *OrderResponse) GetAmountReceivedUsd() string {
	if m != nil {
		return m.AmountReceivedUsd
	}
	return ""
}

func (m *OrderResponse) GetTradeAmount() string {
	if m != nil {
		return m.TradeAmount
	}
	return ""
}

func (m *OrderResponse) GetMaxPrice() string {
	if m != nil {
		return m.MaxPrice
	}
	return ""
}

func (m *OrderResponse) GetMaxPriceUsd() string {
	if m != nil {
		return m.MaxPriceUsd
	}
	return ""
}

func (m *OrderResponse) GetNumBlocks() uint64 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

func (m *OrderResponse) GetBlockEnd() uint64 {
	if m != nil {
		return m.BlockEnd
	}
	return 0
}

func (m *OrderResponse) GetAllowIncomplete() bool {
	if m != nil {
		return m.AllowIncomplete
	}
	return false
}

type QueryOrdersResponse struct {
	Orders     []*OrderResponse    `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOrdersResponse) Reset()         { *m = QueryOrdersResponse{} }
func (m *QueryOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersResponse) ProtoMessage()    {}
func (*QueryOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{54}
}
func (m *QueryOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersResponse.Merge(m, src)
}
func (m *QueryOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersResponse proto.InternalMessageInfo

func (m *QueryOrdersResponse) GetOrders() []*OrderResponse {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *QueryOrdersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOrderRequest struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryOrderRequest) Reset()         { *m = QueryOrderRequest{} }
func (m *QueryOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderRequest) ProtoMessage()    {}
func (*QueryOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{55}
}
func (m *QueryOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderRequest.Merge(m, src)
}
func (m *QueryOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderRequest proto.InternalMessageInfo

func (m *QueryOrderRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryOrderResponse struct {
	Order *OrderResponse `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *QueryOrderResponse) Reset()         { *m = QueryOrderResponse{} }
func (m *QueryOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderResponse) ProtoMessage()    {}
func (*QueryOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{56}
}
func (m *QueryOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderResponse.Merge(m, src)
}
func (m *QueryOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderResponse proto.InternalMessageInfo

func (m *QueryOrderResponse) GetOrder() *OrderResponse {
	if m != nil {
		return m.Order
	}
	return nil
}

type QueryOrderPoolRequest struct {
}

func (m *QueryOrderPoolRequest) Reset()         { *m = QueryOrderPoolRequest{} }
func (m *QueryOrderPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderPoolRequest) ProtoMessage()    {}
func (*QueryOrderPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{57}
}
func (m *QueryOrderPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderPoolRequest.Merge(m, src)
}
func (m *QueryOrderPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderPoolRequest proto.InternalMessageInfo

type OrderBalance struct {
	Denom      string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	SumOrder   string `protobuf:"bytes,2,opt,name=sum_order,json=sumOrder,proto3" json:"sum_order,omitempty"`
	PoolAmount string `protobuf:"bytes,3,opt,name=pool_amount,json=poolAmount,proto3" json:"pool_amount,omitempty"`
}

func (m *OrderBalance) Reset()         { *m = OrderBalance{} }
func (m *OrderBalance) String() string { return proto.CompactTextString(m) }
func (*OrderBalance) ProtoMessage()    {}
func (*OrderBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{58}
}
func (m *OrderBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBalance.Merge(m, src)
}
func (m *OrderBalance) XXX_Size() int {
	return m.Size()
}
func (m *OrderBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBalance.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBalance proto.InternalMessageInfo

func (m *OrderBalance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *OrderBalance) GetSumOrder() string {
	if m != nil {
		return m.SumOrder
	}
	return ""
}

func (m *OrderBalance) GetPoolAmount() string {
	if m != nil {
		return m.PoolAmount
	}
	return ""
}

type QueryOrderPoolResponse struct {
	Balance []*OrderBalance `protobuf:"bytes,1,rep,name=balance,proto3" json:"balance,omitempty"`
}

func (m *QueryOrderPoolResponse) Reset()         { *m = QueryOrderPoolResponse{} }
func (m *QueryOrderPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderPoolResponse) ProtoMessage()    {}
func (*QueryOrderPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{59}
}
func (m *QueryOrderPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderPoolResponse.Merge(m, src)
}
func (m *QueryOrderPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderPoolResponse proto.InternalMessageInfo

func (m *QueryOrderPoolResponse) GetBalance() []*OrderBalance {
	if m != nil {
		return m.Balance
	}
	return nil
}

type QueryValueKCoinsRequest struct {
}

func (m *QueryValueKCoinsRequest) Reset()         { *m = QueryValueKCoinsRequest{} }
func (m *QueryValueKCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValueKCoinsRequest) ProtoMessage()    {}
func (*QueryValueKCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{60}
}
func (m *QueryValueKCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValueKCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValueKCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValueKCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValueKCoinsRequest.Merge(m, src)
}
func (m *QueryValueKCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValueKCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValueKCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValueKCoinsRequest proto.InternalMessageInfo

type QueryValueKCoinsResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryValueKCoinsResponse) Reset()         { *m = QueryValueKCoinsResponse{} }
func (m *QueryValueKCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValueKCoinsResponse) ProtoMessage()    {}
func (*QueryValueKCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcd3c9a4f92ffe4a, []int{61}
}
func (m *QueryValueKCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValueKCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValueKCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValueKCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValueKCoinsResponse.Merge(m, src)
}
func (m *QueryValueKCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValueKCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValueKCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValueKCoinsResponse proto.InternalMessageInfo

func (m *QueryValueKCoinsResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryLiquidityPoolRequest)(nil), "kopi.dex.QueryLiquidityPoolRequest")
	proto.RegisterType((*LiquidityPoolEntry)(nil), "kopi.dex.LiquidityPoolEntry")
	proto.RegisterType((*QueryLiquidityPoolResponse)(nil), "kopi.dex.QueryLiquidityPoolResponse")
	proto.RegisterType((*OrdersByPairRequest)(nil), "kopi.dex.OrdersByPairRequest")
	proto.RegisterType((*QueryOrdersByPairResponse)(nil), "kopi.dex.QueryOrdersByPairResponse")
	proto.RegisterType((*QueryReserveFundsRequest)(nil), "kopi.dex.QueryReserveFundsRequest")
	proto.RegisterType((*QueryReserveFundsPerDenomRequest)(nil), "kopi.dex.QueryReserveFundsPerDenomRequest")
	proto.RegisterType((*Denom)(nil), "kopi.dex.Denom")
	proto.RegisterType((*QueryReserveFundsResponse)(nil), "kopi.dex.QueryReserveFundsResponse")
	proto.RegisterType((*QueryPriceRequest)(nil), "kopi.dex.QueryPriceRequest")
	proto.RegisterType((*QueryPriceResponse)(nil), "kopi.dex.QueryPriceResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "kopi.dex.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "kopi.dex.QueryParamsResponse")
	proto.RegisterType((*QueryGetLiquiditySumRequest)(nil), "kopi.dex.QueryGetLiquiditySumRequest")
	proto.RegisterType((*QueryGetLiquiditySumResponse)(nil), "kopi.dex.QueryGetLiquiditySumResponse")
	proto.RegisterType((*QueryGetLiquidityAllRequest)(nil), "kopi.dex.QueryGetLiquidityAllRequest")
	proto.RegisterType((*QueryGetLiquidityAllResponseEntry)(nil), "kopi.dex.QueryGetLiquidityAllResponseEntry")
	proto.RegisterType((*QueryGetLiquidityAllResponse)(nil), "kopi.dex.QueryGetLiquidityAllResponse")
	proto.RegisterType((*QueryGetLiquidityRequest)(nil), "kopi.dex.QueryGetLiquidityRequest")
	proto.RegisterType((*QueryGetLiquidityResponse)(nil), "kopi.dex.QueryGetLiquidityResponse")
	proto.RegisterType((*LiquidityEntry)(nil), "kopi.dex.LiquidityEntry")
	proto.RegisterType((*QueryGetLiquidityQueueRequest)(nil), "kopi.dex.QueryGetLiquidityQueueRequest")
	proto.RegisterType((*QueryGetLiquidityQueueResponse)(nil), "kopi.dex.QueryGetLiquidityQueueResponse")
	proto.RegisterType((*QueryGetLiquidityShareRequest)(nil), "kopi.dex.QueryGetLiquidityShareRequest")
	proto.RegisterType((*QueryGetLiquidityPairRequest)(nil), "kopi.dex.QueryGetLiquidityPairRequest")
	proto.RegisterType((*QueryGetLiquidityPairResponse)(nil), "kopi.dex.QueryGetLiquidityPairResponse")
	proto.RegisterType((*QueryAllLiquidityPairRequest)(nil), "kopi.dex.QueryAllLiquidityPairRequest")
	proto.RegisterType((*QueryAllLiquidityPairResponse)(nil), "kopi.dex.QueryAllLiquidityPairResponse")
	proto.RegisterType((*QueryTradeRequest)(nil), "kopi.dex.QueryTradeRequest")
	proto.RegisterType((*QueryLiquidityForAddressRequest)(nil), "kopi.dex.QueryLiquidityForAddressRequest")
	proto.RegisterType((*AddressLiquidity)(nil), "kopi.dex.AddressLiquidity")
	proto.RegisterType((*QueryLiquidityForAddressResponse)(nil), "kopi.dex.QueryLiquidityForAddressResponse")
	proto.RegisterType((*QueryPriceUsdRequest)(nil), "kopi.dex.QueryPriceUsdRequest")
	proto.RegisterType((*QueryPriceUsdResponse)(nil), "kopi.dex.QueryPriceUsdResponse")
	proto.RegisterType((*QueryGetOrderRequest)(nil), "kopi.dex.QueryGetOrderRequest")
	proto.RegisterType((*QueryGetOrderResponse)(nil), "kopi.dex.QueryGetOrderResponse")
	proto.RegisterType((*QueryOrdersAddressRequest)(nil), "kopi.dex.QueryOrdersAddressRequest")
	proto.RegisterType((*QueryOrdersAddressResponse)(nil), "kopi.dex.QueryOrdersAddressResponse")
	proto.RegisterType((*QueryOrdersNumRequest)(nil), "kopi.dex.QueryOrdersNumRequest")
	proto.RegisterType((*QueryOrdersNumResponse)(nil), "kopi.dex.QueryOrdersNumResponse")
	proto.RegisterType((*QueryOrdersSumRequest)(nil), "kopi.dex.QueryOrdersSumRequest")
	proto.RegisterType((*QueryOrdersSumResponse)(nil), "kopi.dex.QueryOrdersSumResponse")
	proto.RegisterType((*QueryOrdersDenomSumRequest)(nil), "kopi.dex.QueryOrdersDenomSumRequest")
	proto.RegisterType((*OrdersSum)(nil), "kopi.dex.OrdersSum")
	proto.RegisterType((*QueryOrdersDenomSumResponse)(nil), "kopi.dex.QueryOrdersDenomSumResponse")
	proto.RegisterType((*QuerySimulateTradeRequest)(nil), "kopi.dex.QuerySimulateTradeRequest")
	proto.RegisterType((*QuerySimulateTradeResponse)(nil), "kopi.dex.QuerySimulateTradeResponse")
	proto.RegisterType((*OrderBookSum)(nil), "kopi.dex.OrderBookSum")
	proto.RegisterType((*QueryDepthToRequest)(nil), "kopi.dex.QueryDepthToRequest")
	proto.RegisterType((*QueryDepthToResponse)(nil), "kopi.dex.QueryDepthToResponse")
	proto.RegisterType((*QueryDepthFromRequest)(nil), "kopi.dex.QueryDepthFromRequest")
	proto.RegisterType((*QueryDepthFromResponse)(nil), "kopi.dex.QueryDepthFromResponse")
	proto.RegisterType((*QueryOrdersRequest)(nil), "kopi.dex.QueryOrdersRequest")
	proto.RegisterType((*OrderResponse)(nil), "kopi.dex.OrderResponse")
	proto.RegisterType((*QueryOrdersResponse)(nil), "kopi.dex.QueryOrdersResponse")
	proto.RegisterType((*QueryOrderRequest)(nil), "kopi.dex.QueryOrderRequest")
	proto.RegisterType((*QueryOrderResponse)(nil), "kopi.dex.QueryOrderResponse")
	proto.RegisterType((*QueryOrderPoolRequest)(nil), "kopi.dex.QueryOrderPoolRequest")
	proto.RegisterType((*OrderBalance)(nil), "kopi.dex.OrderBalance")
	proto.RegisterType((*QueryOrderPoolResponse)(nil), "kopi.dex.QueryOrderPoolResponse")
	proto.RegisterType((*QueryValueKCoinsRequest)(nil), "kopi.dex.QueryValueKCoinsRequest")
	proto.RegisterType((*QueryValueKCoinsResponse)(nil), "kopi.dex.QueryValueKCoinsResponse")
}

func init() { proto.RegisterFile("kopi/dex/query.proto", fileDescriptor_dcd3c9a4f92ffe4a) }

var fileDescriptor_dcd3c9a4f92ffe4a = []byte{
	// 2441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5b, 0x6f, 0x1c, 0x49,
	0x15, 0x4e, 0xcf, 0xd8, 0x8e, 0xe7, 0xf8, 0x9a, 0xf2, 0x25, 0x93, 0xb1, 0x3d, 0xb6, 0x2b, 0x17,
	0x27, 0x0e, 0x99, 0xd9, 0x78, 0x11, 0x5a, 0x40, 0x42, 0x1b, 0xe7, 0xc6, 0x2e, 0xd1, 0x6e, 0x76,
	0x9c, 0xf0, 0x00, 0x2b, 0x8d, 0x7a, 0x3c, 0x15, 0xa7, 0xe5, 0xbe, 0x8c, 0xfb, 0x62, 0xec, 0x5d,
	0x19, 0x24, 0x04, 0xbc, 0xf0, 0xb0, 0x20, 0x24, 0x24, 0xb4, 0xe2, 0x81, 0x9f, 0xc1, 0x3f, 0x58,
	0xde, 0x56, 0x82, 0x07, 0x9e, 0x10, 0x4a, 0xf8, 0x1d, 0x08, 0xf5, 0xa9, 0xd3, 0xf7, 0xea, 0x19,
	0x2b, 0x0a, 0xda, 0x27, 0xf7, 0x9c, 0xfa, 0xea, 0x9c, 0x53, 0x75, 0xae, 0x55, 0x65, 0x58, 0x3c,
	0x74, 0x06, 0x46, 0xbb, 0x2f, 0x4e, 0xda, 0x47, 0x81, 0x70, 0x4f, 0x5b, 0x03, 0xd7, 0xf1, 0x1d,
	0x36, 0x19, 0x52, 0x5b, 0x7d, 0x71, 0xd2, 0x58, 0x3c, 0x70, 0x0e, 0x1c, 0x24, 0xb6, 0xc3, 0x2f,
	0x39, 0xde, 0x58, 0x3d, 0x70, 0x9c, 0x03, 0x53, 0xb4, 0xf5, 0x81, 0xd1, 0xd6, 0x6d, 0xdb, 0xf1,
	0x75, 0xdf, 0x70, 0x6c, 0x8f, 0x46, 0x97, 0x62, 0x9e, 0x03, 0xdd, 0xd5, 0xad, 0x88, 0xbc, 0xbd,
	0xef, 0x78, 0x96, 0xe3, 0xb5, 0x7b, 0xba, 0x27, 0xa4, 0xb4, 0xf6, 0xf1, 0xdd, 0x9e, 0xf0, 0xf5,
	0xbb, 0xed, 0x81, 0x7e, 0x60, 0xd8, 0xc8, 0x83, 0xb0, 0x6b, 0x31, 0x0b, 0xd3, 0x38, 0x0a, 0x8c,
	0xbe, 0xe1, 0x9f, 0x76, 0x07, 0xba, 0xe1, 0xd2, 0x70, 0xa2, 0xb5, 0xe3, 0xf6, 0x05, 0x51, 0xf9,
	0x0a, 0x5c, 0xf9, 0x24, 0x64, 0xfb, 0x24, 0x9a, 0xf2, 0xd4, 0x71, 0xcc, 0x8e, 0x38, 0x0a, 0x84,
	0xe7, 0xf3, 0xdf, 0x6b, 0xc0, 0x32, 0x03, 0x0f, 0x6d, 0xdf, 0x3d, 0x65, 0x8b, 0x30, 0xde, 0x17,
	0xb6, 0x63, 0xd5, 0xb5, 0x0d, 0xed, 0x66, 0xad, 0x23, 0x7f, 0xb0, 0x75, 0x98, 0x1a, 0x38, 0x8e,
	0xd9, 0xd5, 0x2d, 0x27, 0xb0, 0xfd, 0x7a, 0x05, 0xc7, 0x20, 0x24, 0xdd, 0x43, 0x0a, 0xbb, 0x0a,
	0x33, 0x89, 0x62, 0x5e, 0x60, 0xd5, 0xab, 0x08, 0x99, 0x8e, 0x89, 0x7b, 0x01, 0x72, 0x11, 0xb6,
	0xef, 0x1a, 0xc2, 0x43, 0xc8, 0x98, 0xe4, 0x42, 0xa4, 0xbd, 0xc0, 0xe2, 0xcf, 0xa0, 0xa1, 0x52,
	0xd8, 0x1b, 0x38, 0xb6, 0x27, 0xd8, 0x77, 0xe0, 0x22, 0x61, 0xeb, 0xda, 0x46, 0xf5, 0xe6, 0xd4,
	0xce, 0x6a, 0x2b, 0x32, 0x4b, 0xab, 0xb8, 0x92, 0x4e, 0x04, 0xe6, 0x3a, 0x2c, 0x7c, 0x1c, 0xee,
	0x8a, 0xb7, 0x7b, 0xfa, 0x54, 0x37, 0x5c, 0xda, 0x00, 0xb6, 0x09, 0xd3, 0xb8, 0xb8, 0xee, 0x81,
	0x71, 0x6c, 0xd8, 0x07, 0xb4, 0xe0, 0x29, 0xa4, 0x3d, 0x46, 0x12, 0xdb, 0x82, 0x39, 0x09, 0x71,
	0xc5, 0xbe, 0x90, 0x28, 0xb9, 0xf4, 0x59, 0x24, 0x77, 0x22, 0x2a, 0x0f, 0x68, 0xa7, 0xb3, 0x72,
	0x48, 0xef, 0xdb, 0x30, 0xd6, 0x33, 0xfa, 0x91, 0xd2, 0x97, 0x13, 0xa5, 0x11, 0x1d, 0xc1, 0x3a,
	0x08, 0x0a, 0xc1, 0xba, 0x77, 0xe8, 0xd5, 0x2b, 0x23, 0xc0, 0x21, 0x88, 0x37, 0xa0, 0x8e, 0x62,
	0x3b, 0xc2, 0x13, 0xee, 0xb1, 0x78, 0x14, 0xd8, 0x7d, 0x2f, 0xb2, 0xef, 0x7b, 0xb0, 0x51, 0x18,
	0x7b, 0x2a, 0xdc, 0x07, 0x52, 0x71, 0xb9, 0x05, 0x4a, 0x63, 0xf3, 0x67, 0x30, 0x8e, 0xa8, 0x12,
	0x5f, 0x58, 0x86, 0x89, 0x8c, 0x1b, 0xd0, 0x2f, 0xb6, 0x06, 0x20, 0xbf, 0xba, 0x81, 0xd7, 0x27,
	0xfb, 0xd7, 0x24, 0xe5, 0xb9, 0xd7, 0xe7, 0xbb, 0xb4, 0x45, 0x59, 0x5d, 0x69, 0x8b, 0xae, 0xc3,
	0xf8, 0x8b, 0x90, 0x40, 0x7b, 0x34, 0x97, 0x2c, 0x5b, 0xea, 0x2b, 0x47, 0x79, 0x17, 0x2e, 0x21,
	0x8f, 0xa7, 0xae, 0xb1, 0x2f, 0xfe, 0x1f, 0x76, 0xdc, 0x06, 0x96, 0x16, 0x40, 0xda, 0x2d, 0xc2,
	0xf8, 0x20, 0x24, 0x44, 0xfb, 0x80, 0x3f, 0xf8, 0x62, 0x84, 0xc5, 0x98, 0x8e, 0xb6, 0xfd, 0x21,
	0x2c, 0x64, 0xa8, 0xc4, 0xa2, 0x05, 0x13, 0x32, 0xf6, 0x91, 0xc7, 0xd4, 0xce, 0x7c, 0xb2, 0x42,
	0x89, 0xdc, 0x1d, 0xfb, 0xea, 0x5f, 0xeb, 0x17, 0x3a, 0x84, 0xe2, 0x6b, 0xb0, 0x82, 0x6c, 0x1e,
	0x0b, 0xff, 0x49, 0x2a, 0x84, 0x22, 0x29, 0xdf, 0x87, 0x55, 0xf5, 0x30, 0x89, 0x5b, 0x81, 0xda,
	0xb1, 0x6e, 0x06, 0x02, 0x4d, 0x21, 0xb5, 0x9e, 0x44, 0x42, 0x68, 0x09, 0x15, 0xef, 0x7b, 0x66,
	0x9c, 0x18, 0x06, 0xb0, 0xa9, 0x1e, 0x96, 0xbc, 0x87, 0xa5, 0x89, 0x37, 0x74, 0x8d, 0x7d, 0xc5,
	0x6a, 0x52, 0x12, 0xd9, 0x7d, 0x98, 0x40, 0xfe, 0x91, 0x7b, 0xdc, 0x4e, 0x36, 0x6f, 0xa4, 0xa6,
	0x1d, 0x9a, 0xca, 0xdf, 0xa1, 0x58, 0x49, 0x83, 0x87, 0xc7, 0xc1, 0x5f, 0x34, 0x72, 0xd9, 0xec,
	0x14, 0x52, 0x2a, 0x59, 0xab, 0x96, 0x59, 0xeb, 0x55, 0x98, 0x39, 0x36, 0x5c, 0x3f, 0xd0, 0xcd,
	0xae, 0xe3, 0xbf, 0x14, 0x2e, 0x6d, 0xc5, 0x34, 0x11, 0x3f, 0x0e, 0x69, 0xa1, 0xcf, 0x46, 0xa0,
	0x30, 0xfb, 0xd3, 0x96, 0x4c, 0x11, 0x6d, 0x57, 0xf7, 0x04, 0x9b, 0x87, 0x6a, 0x92, 0x24, 0xc3,
	0x4f, 0xc6, 0x60, 0x2c, 0xcc, 0xb8, 0xf5, 0x71, 0x24, 0xe1, 0x37, 0xdf, 0x85, 0xd9, 0x58, 0x35,
	0x69, 0x99, 0x3a, 0x5c, 0xd4, 0xfb, 0x7d, 0x57, 0x78, 0x1e, 0x29, 0x16, 0xfd, 0x2c, 0xb3, 0x0e,
	0x3f, 0x83, 0xb5, 0xc2, 0x32, 0x3f, 0x09, 0x44, 0x20, 0x86, 0x6e, 0x0f, 0x7b, 0x04, 0x90, 0x94,
	0x29, 0x64, 0x39, 0xb5, 0x73, 0xa3, 0x25, 0x6b, 0x5a, 0x2b, 0x5c, 0x55, 0x4b, 0x56, 0x50, 0xaa,
	0x69, 0xad, 0xa7, 0xfa, 0x41, 0xc4, 0xb1, 0x93, 0x9a, 0xc9, 0xff, 0xac, 0x41, 0xb3, 0x4c, 0x3e,
	0xed, 0xf5, 0x4e, 0x3e, 0xf3, 0xd7, 0x15, 0x99, 0x3f, 0x9b, 0xf5, 0xd9, 0x63, 0x85, 0x7a, 0x5b,
	0x23, 0xd5, 0xa3, 0xf4, 0x9a, 0xd6, 0xef, 0xbb, 0x8a, 0xed, 0xd9, 0x7b, 0xa9, 0xbb, 0xf1, 0xf6,
	0x94, 0xee, 0x38, 0xff, 0xb6, 0xc2, 0xb1, 0xd3, 0x25, 0x48, 0xed, 0x77, 0x7f, 0xd5, 0x14, 0x12,
	0x33, 0x15, 0x45, 0x6d, 0x90, 0xbc, 0x53, 0x55, 0x8a, 0x4e, 0x55, 0x70, 0xce, 0xaa, 0xc2, 0x39,
	0x57, 0xa0, 0xf6, 0x22, 0x30, 0x89, 0x89, 0xf4, 0xbf, 0xc9, 0x90, 0x80, 0x1c, 0xd6, 0x00, 0x70,
	0x50, 0x4e, 0x97, 0xae, 0x88, 0x70, 0x9c, 0xcb, 0x9b, 0xb4, 0xe2, 0x7b, 0xa6, 0xa9, 0x5a, 0x31,
	0x17, 0xb4, 0xb4, 0xe2, 0x38, 0x2d, 0xed, 0x01, 0xcc, 0x66, 0x3b, 0x9c, 0x62, 0xd9, 0xcc, 0x4c,
	0xa4, 0xbc, 0x99, 0x74, 0x1f, 0x21, 0x91, 0x2f, 0x50, 0xa1, 0x78, 0xe6, 0xea, 0x7d, 0x91, 0x24,
	0xcd, 0xf5, 0x6c, 0x77, 0xf1, 0xc8, 0x71, 0xef, 0x49, 0x4b, 0x8d, 0x36, 0xe5, 0xaf, 0x2b, 0x30,
	0x4f, 0xe0, 0x78, 0x7e, 0x79, 0xb3, 0x14, 0x78, 0xc2, 0xcd, 0x35, 0x4b, 0x21, 0x89, 0x9a, 0xa5,
	0x1b, 0x30, 0x97, 0x02, 0xa4, 0x72, 0xe2, 0x4c, 0x02, 0x7a, 0xee, 0xf5, 0x43, 0xf6, 0xbe, 0xe3,
	0xeb, 0x26, 0x19, 0x41, 0xfe, 0x08, 0xcd, 0x83, 0x1f, 0x38, 0x4f, 0x1a, 0x60, 0x12, 0x09, 0xe1,
	0x94, 0xdb, 0x70, 0x49, 0x3f, 0xd6, 0x0d, 0x53, 0xef, 0x99, 0xa2, 0xdb, 0xd3, 0x4d, 0xdd, 0xde,
	0x17, 0xf5, 0x09, 0x04, 0xcd, 0xc7, 0x03, 0xbb, 0x92, 0xce, 0x76, 0x60, 0xa9, 0x00, 0x46, 0xae,
	0x17, 0x71, 0xc2, 0x42, 0x7e, 0x42, 0x98, 0xab, 0x3f, 0xa5, 0xb6, 0x42, 0xb9, 0x89, 0x64, 0xc3,
	0xf7, 0xa0, 0x16, 0x9b, 0x83, 0xcc, 0xd7, 0x48, 0xcc, 0x97, 0xdf, 0xc5, 0x4e, 0x02, 0xe6, 0xdf,
	0x82, 0xc5, 0xa4, 0xfe, 0x3e, 0xf7, 0xfa, 0xc3, 0x03, 0xe5, 0x0e, 0x2c, 0xe5, 0xd0, 0x43, 0x0b,
	0xf6, 0x0d, 0x62, 0xfe, 0x58, 0xf8, 0xd4, 0x4c, 0x49, 0xe6, 0xb3, 0x50, 0x31, 0x64, 0x95, 0x1c,
	0xeb, 0x54, 0x8c, 0x3e, 0x7f, 0x40, 0x6c, 0x13, 0x5c, 0xdc, 0xc8, 0x8d, 0x23, 0x81, 0x6a, 0xf8,
	0x5c, 0xae, 0x39, 0x23, 0x57, 0x94, 0x18, 0xfe, 0x37, 0x2d, 0xd3, 0x13, 0x9e, 0xd7, 0xd1, 0x0a,
	0xed, 0x4c, 0xe5, 0x5c, 0xed, 0x4c, 0x55, 0xd5, 0xce, 0xe4, 0x52, 0xf4, 0xd8, 0x1b, 0xa7, 0xe8,
	0x3f, 0x6a, 0xd4, 0x98, 0xe7, 0xd6, 0x42, 0xfb, 0xd2, 0x86, 0x09, 0x3c, 0x76, 0x8c, 0x6c, 0x71,
	0x09, 0xf6, 0xf6, 0x72, 0xf3, 0x65, 0x32, 0x95, 0xd4, 0xeb, 0xa3, 0xa4, 0x41, 0xda, 0x86, 0xe5,
	0xfc, 0x00, 0x29, 0x3b, 0x0f, 0x55, 0x3b, 0x90, 0x8e, 0x54, 0xed, 0x84, 0x9f, 0x39, 0x26, 0x7b,
	0x65, 0x4c, 0xf6, 0xb2, 0x4c, 0xbc, 0x20, 0xf2, 0xc6, 0xf0, 0x93, 0xaf, 0x66, 0x76, 0x08, 0xbb,
	0xd6, 0x14, 0xa7, 0xf7, 0xa1, 0x16, 0x33, 0x39, 0x4f, 0xc3, 0x4a, 0xfc, 0x2b, 0x09, 0xff, 0x0f,
	0xa9, 0x69, 0xcb, 0xf3, 0x8f, 0x5d, 0x33, 0xdb, 0x22, 0x2d, 0xe4, 0x4c, 0x80, 0xda, 0x47, 0xad,
	0xd0, 0x9f, 0x22, 0xd7, 0xdc, 0x33, 0xac, 0xc0, 0xd4, 0x7d, 0x91, 0x4e, 0x93, 0x6f, 0xb3, 0x9f,
	0x4e, 0xbb, 0x79, 0xb5, 0xac, 0x19, 0x19, 0xcb, 0x34, 0x23, 0xff, 0xa8, 0xd0, 0x46, 0xe6, 0x74,
	0xa3, 0x75, 0x6e, 0xc2, 0x34, 0x65, 0xcd, 0x03, 0xe3, 0x58, 0xd8, 0x64, 0xc6, 0x29, 0x49, 0x7b,
	0x1c, 0x92, 0xd8, 0x1d, 0x58, 0x48, 0x43, 0xba, 0x86, 0x8d, 0x39, 0xad, 0x82, 0xc8, 0xf9, 0x14,
	0xf2, 0x03, 0x3b, 0xcc, 0x98, 0x5b, 0x30, 0x47, 0x70, 0xb9, 0x18, 0x21, 0x93, 0x71, 0xb5, 0x33,
	0x2b, 0xc9, 0x1d, 0xa2, 0xb2, 0x77, 0x61, 0x39, 0x07, 0x8c, 0x58, 0x8f, 0x21, 0x7e, 0x21, 0x8b,
	0x97, 0xdc, 0xe7, 0xa1, 0xfa, 0x42, 0x08, 0x4c, 0xd3, 0xd5, 0x4e, 0xf8, 0x99, 0xe4, 0xa6, 0x89,
	0x54, 0x6e, 0x62, 0xb7, 0x81, 0xe1, 0x47, 0x56, 0x67, 0x99, 0x87, 0xe7, 0x70, 0x24, 0xa5, 0xf2,
	0x5d, 0x58, 0x92, 0xe0, 0xbc, 0x22, 0x93, 0x88, 0x97, 0x9c, 0x32, 0x7a, 0xf0, 0x43, 0x98, 0x96,
	0x39, 0xca, 0x71, 0x0e, 0x43, 0x1f, 0x54, 0x57, 0xae, 0x58, 0xb7, 0x4a, 0x5a, 0xb7, 0x35, 0x00,
	0x29, 0x2e, 0xd5, 0xaa, 0xd6, 0x90, 0xa2, 0x6e, 0x54, 0xf9, 0x0f, 0xe8, 0x0c, 0xf4, 0x40, 0x0c,
	0xfc, 0x97, 0xcf, 0x9c, 0xc8, 0xb1, 0x14, 0x5e, 0xa3, 0x29, 0x4f, 0x61, 0x8f, 0x28, 0x51, 0xc7,
	0xf3, 0x93, 0x43, 0x54, 0x26, 0xcf, 0x2c, 0xe7, 0x13, 0xb0, 0x5c, 0x5c, 0x94, 0x66, 0xf8, 0xf7,
	0x28, 0xb0, 0x91, 0xcf, 0x23, 0x37, 0x39, 0xf7, 0x8e, 0x76, 0x71, 0xfe, 0x43, 0x8a, 0xfd, 0xd4,
	0xdc, 0x37, 0xd4, 0xe2, 0x53, 0x3a, 0x27, 0xca, 0x38, 0x8c, 0x54, 0xc8, 0xa6, 0x66, 0xed, 0x8d,
	0x53, 0xf3, 0x97, 0x63, 0x30, 0x93, 0xad, 0x52, 0x8b, 0x30, 0x6e, 0xd8, 0x7d, 0x71, 0x42, 0x15,
	0x4d, 0xfe, 0x48, 0x47, 0x62, 0x65, 0x78, 0xc1, 0xa9, 0x9e, 0x2b, 0xde, 0xc7, 0x94, 0xf1, 0x9e,
	0x0f, 0x4f, 0xd9, 0x9e, 0x64, 0xc2, 0x73, 0x1d, 0xe8, 0x67, 0xd7, 0x14, 0x2f, 0x7c, 0x8a, 0x02,
	0x3a, 0x1e, 0x3e, 0x11, 0x2f, 0xb0, 0x3b, 0x4a, 0x01, 0x52, 0x71, 0x30, 0x93, 0x80, 0x4a, 0x02,
	0x57, 0xfa, 0x7f, 0x3e, 0x70, 0x5b, 0x71, 0x42, 0x88, 0xe3, 0x25, 0x64, 0x5a, 0x43, 0xf0, 0xa5,
	0x2c, 0x38, 0x64, 0xbc, 0x09, 0xd3, 0x7e, 0x98, 0x74, 0xa2, 0x06, 0x0e, 0xe4, 0x22, 0x90, 0x46,
	0x1d, 0xdc, 0x0a, 0xd4, 0x2c, 0xfd, 0xa4, 0x2b, 0x83, 0x65, 0x4a, 0xf6, 0x60, 0x96, 0x7e, 0x82,
	0x8d, 0x08, 0xe3, 0x30, 0x13, 0x0f, 0xa2, 0xa4, 0x69, 0xc9, 0x20, 0x02, 0x84, 0x32, 0xd6, 0x00,
	0xec, 0xc0, 0xea, 0xf6, 0x4c, 0x67, 0xff, 0xd0, 0xab, 0xcf, 0xa0, 0xa5, 0x6a, 0x76, 0x60, 0xed,
	0x22, 0x21, 0xe4, 0x8f, 0x43, 0x5d, 0x61, 0xf7, 0xeb, 0xb3, 0x38, 0x3a, 0x89, 0x84, 0x87, 0x76,
	0x9f, 0xdd, 0x82, 0x79, 0xdd, 0x34, 0x9d, 0x9f, 0x75, 0x0d, 0x7b, 0xdf, 0xb1, 0x06, 0xa6, 0xf0,
	0x45, 0x7d, 0x6e, 0x43, 0xbb, 0x39, 0xd9, 0x99, 0x43, 0xfa, 0x07, 0x31, 0x99, 0x7f, 0xa1, 0x51,
	0x28, 0x46, 0xce, 0xf7, 0x8d, 0x57, 0xec, 0x5b, 0xd4, 0x99, 0x67, 0x3a, 0x30, 0xa5, 0xcb, 0xf2,
	0xfb, 0xe9, 0xc0, 0x89, 0x55, 0xbf, 0x03, 0xe3, 0x4e, 0xaa, 0x09, 0x2b, 0xd5, 0x5c, 0xa2, 0xb2,
	0xc5, 0x3d, 0x7d, 0xff, 0xd9, 0x8b, 0x32, 0x22, 0x35, 0xc3, 0xea, 0x8c, 0xb8, 0x02, 0x35, 0x2f,
	0xb0, 0xba, 0x52, 0xa2, 0x0c, 0x9c, 0x49, 0x2f, 0xb0, 0x70, 0x66, 0xfe, 0x56, 0xb4, 0x9a, 0xbf,
	0x15, 0xe5, 0x1f, 0xa6, 0x1b, 0x88, 0xcc, 0x5d, 0xe6, 0x3b, 0x70, 0x31, 0xea, 0xce, 0x4b, 0xb2,
	0x88, 0x1c, 0xed, 0x44, 0x30, 0x7e, 0x05, 0x2e, 0x23, 0xaf, 0x1f, 0xeb, 0x66, 0x20, 0x7e, 0x74,
	0xdf, 0x31, 0xec, 0xf8, 0xce, 0x29, 0xba, 0xda, 0xc8, 0x0c, 0x25, 0xd9, 0x00, 0x2f, 0x7e, 0xa2,
	0x65, 0xe1, 0x8f, 0x9d, 0xff, 0x2e, 0xc1, 0x38, 0x4e, 0x61, 0x3e, 0x4c, 0xa5, 0xa6, 0xb1, 0xcd,
	0xdc, 0xd5, 0x4a, 0x51, 0x5a, 0x83, 0x0f, 0x83, 0x48, 0xa9, 0xbc, 0xf9, 0xcb, 0xbf, 0xff, 0xe7,
	0x0f, 0x95, 0x3a, 0x5b, 0x6e, 0xc7, 0x17, 0xd3, 0x87, 0xfb, 0x21, 0xa2, 0x8d, 0xf2, 0xd9, 0x67,
	0x30, 0x9d, 0xbe, 0xb1, 0x61, 0xd7, 0x47, 0xdd, 0xe8, 0x48, 0xd1, 0x37, 0xce, 0x77, 0xf1, 0xc3,
	0x57, 0x50, 0xfc, 0x12, 0x5b, 0x68, 0x17, 0xaf, 0xcd, 0xd9, 0x97, 0x1a, 0x2c, 0x28, 0x4e, 0x2f,
	0xec, 0x56, 0x8e, 0x79, 0xf9, 0x31, 0xb1, 0xb1, 0x7d, 0x1e, 0x28, 0xe9, 0x72, 0x07, 0x75, 0xd9,
	0x62, 0xd7, 0x15, 0xba, 0xb4, 0x29, 0x07, 0xb7, 0x3f, 0xa7, 0x8f, 0x33, 0xf6, 0x19, 0xd4, 0x92,
	0xf3, 0x25, 0x1f, 0xb2, 0xde, 0x48, 0x97, 0xab, 0x43, 0x31, 0xa4, 0xc4, 0x35, 0x54, 0xa2, 0xc9,
	0x56, 0x55, 0x4a, 0xf4, 0x4e, 0xbb, 0xd2, 0xd9, 0xbf, 0xd0, 0x52, 0xb7, 0x49, 0x78, 0x03, 0xc3,
	0xb6, 0x86, 0x70, 0x4f, 0xdf, 0x11, 0x35, 0x6e, 0x8e, 0x06, 0x92, 0x2e, 0xdb, 0xa8, 0xcb, 0x35,
	0xc6, 0x55, 0xba, 0x1c, 0x85, 0xd0, 0x44, 0xa3, 0x9f, 0xa7, 0xfc, 0x24, 0x6c, 0x5b, 0x86, 0xf9,
	0x49, 0xd2, 0x6e, 0x0f, 0xf5, 0x93, 0x54, 0xd7, 0xcc, 0xd7, 0x51, 0x95, 0x2b, 0xec, 0xb2, 0x4a,
	0x15, 0x2f, 0xb0, 0xd8, 0x6f, 0x35, 0x98, 0xc9, 0x5c, 0x37, 0xb0, 0x61, 0xac, 0x53, 0x17, 0x1d,
	0x8d, 0xad, 0x91, 0x38, 0xd2, 0xe1, 0x16, 0xea, 0x70, 0x95, 0x6d, 0xb6, 0x4b, 0x9e, 0x78, 0x92,
	0xdd, 0xe8, 0xc2, 0x84, 0xcc, 0xe3, 0x6c, 0x35, 0xc7, 0x3d, 0xd3, 0x5b, 0x34, 0xd6, 0x4a, 0x46,
	0x49, 0x62, 0x1d, 0x25, 0x32, 0x36, 0xdf, 0xce, 0xbe, 0x1a, 0x79, 0xec, 0x37, 0x1a, 0x35, 0x13,
	0xd1, 0x11, 0x8f, 0x5d, 0x55, 0xb2, 0xca, 0x85, 0xc3, 0xb5, 0xe1, 0xa0, 0x72, 0xbb, 0x4b, 0xb1,
	0x8a, 0x28, 0xb0, 0xe8, 0xa4, 0xcd, 0x56, 0x54, 0xac, 0x23, 0xb9, 0xab, 0xea, 0xc1, 0xf2, 0x8d,
	0x25, 0x79, 0xbd, 0xd3, 0x2e, 0x56, 0x98, 0xf6, 0xe7, 0xf8, 0xe7, 0x8c, 0xf9, 0x54, 0x0b, 0xe8,
	0xe5, 0x86, 0xad, 0xe5, 0x4f, 0x4f, 0x99, 0x97, 0xa3, 0x86, 0x7a, 0x53, 0xb2, 0xaf, 0x3e, 0x7c,
	0x03, 0xc5, 0x37, 0x58, 0x5d, 0x25, 0x3e, 0xb4, 0x2b, 0x33, 0xa3, 0x43, 0xe1, 0x47, 0x81, 0xc5,
	0xd6, 0x95, 0x3c, 0x93, 0x13, 0x6d, 0x63, 0xa3, 0x1c, 0x40, 0x12, 0x57, 0x51, 0xe2, 0x32, 0x5b,
	0x2c, 0x48, 0xb4, 0x03, 0x2b, 0x91, 0xb6, 0x57, 0x2a, 0x6d, 0x6f, 0x94, 0xb4, 0xbd, 0x73, 0x49,
	0x0b, 0x03, 0xe7, 0x57, 0x1a, 0xcc, 0x66, 0x8f, 0xaa, 0x4c, 0xed, 0x25, 0xb9, 0x93, 0x72, 0xe3,
	0xfa, 0x08, 0x14, 0x49, 0xbf, 0x8e, 0xd2, 0xd7, 0xd9, 0x9a, 0x4a, 0x7a, 0x26, 0x62, 0xe4, 0xf3,
	0x4a, 0x21, 0x62, 0x32, 0xaf, 0x36, 0x85, 0x88, 0xc9, 0xbe, 0xde, 0xa8, 0x22, 0x46, 0xbe, 0xd3,
	0xb0, 0xb3, 0x74, 0x7e, 0x70, 0x1c, 0xb3, 0x10, 0x30, 0xaa, 0xb7, 0xd7, 0x42, 0xc0, 0x28, 0xdf,
	0x3b, 0xf9, 0x26, 0x4a, 0x5d, 0x61, 0x57, 0x52, 0x52, 0x1d, 0xc7, 0xf4, 0x52, 0xb5, 0xcc, 0x26,
	0xa3, 0xa2, 0x68, 0xa5, 0x51, 0xd3, 0x62, 0x37, 0xca, 0x01, 0xe5, 0x75, 0x5b, 0x8a, 0xa4, 0x04,
	0xf1, 0x53, 0x18, 0x97, 0x3d, 0x6e, 0x3e, 0x2e, 0xd3, 0x2f, 0x72, 0x85, 0xb8, 0xcc, 0xbc, 0xa6,
	0xf1, 0xcb, 0x28, 0xe3, 0x12, 0x9b, 0x4b, 0xc9, 0x40, 0x9e, 0x47, 0x30, 0x19, 0xf7, 0xc7, 0x4d,
	0x15, 0x8b, 0xe4, 0x42, 0xb0, 0xb1, 0x5e, 0x3a, 0x5e, 0x5e, 0xf1, 0xe2, 0x86, 0x3c, 0xf1, 0x8f,
	0x13, 0x98, 0x4e, 0xbf, 0x47, 0x16, 0x0a, 0xae, 0xe2, 0x61, 0xb5, 0x10, 0xfd, 0xaa, 0x07, 0x4d,
	0x55, 0x65, 0x71, 0x25, 0xae, 0x8d, 0x4f, 0x99, 0xec, 0x0c, 0x16, 0x55, 0x2f, 0xb3, 0x6c, 0x7b,
	0x08, 0xf7, 0xdc, 0xf3, 0x6d, 0x23, 0xff, 0x4c, 0xca, 0x6f, 0xa2, 0x54, 0xce, 0x36, 0x4a, 0xa4,
	0x26, 0x0b, 0xff, 0x05, 0xb5, 0xe1, 0xd1, 0x2d, 0xcb, 0x9e, 0x30, 0x8b, 0xbe, 0xab, 0xba, 0x1e,
	0x2a, 0xf8, 0xae, 0xf2, 0x9e, 0x46, 0xb5, 0x7e, 0x8f, 0x80, 0x6d, 0x2f, 0x94, 0x75, 0x06, 0xf3,
	0x99, 0xe9, 0xbb, 0xc1, 0xe9, 0xdb, 0x94, 0xaf, 0x70, 0xe4, 0x58, 0x7e, 0x2f, 0x38, 0xdd, 0x7d,
	0xff, 0xab, 0x57, 0x4d, 0xed, 0xeb, 0x57, 0x4d, 0xed, 0xdf, 0xaf, 0x9a, 0xda, 0xef, 0x5e, 0x37,
	0x2f, 0x7c, 0xfd, 0xba, 0x79, 0xe1, 0x9f, 0xaf, 0x9b, 0x17, 0x7e, 0x72, 0xe3, 0xc0, 0xf0, 0x5f,
	0x06, 0xbd, 0xd6, 0xbe, 0x63, 0xe1, 0xdc, 0x3b, 0x96, 0x63, 0x8b, 0x53, 0xc9, 0xe6, 0x04, 0x19,
	0xf9, 0xa7, 0x03, 0xe1, 0xf5, 0x26, 0xf0, 0x7f, 0x2c, 0xde, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x72, 0xe3, 0x1e, 0x5c, 0x31, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	ValueKCoins(ctx context.Context, in *QueryValueKCoinsRequest, opts ...grpc.CallOption) (*QueryValueKCoinsResponse, error)
	LiquidityAll(ctx context.Context, in *QueryGetLiquidityAllRequest, opts ...grpc.CallOption) (*QueryGetLiquidityAllResponse, error)
	LiquidityForAddress(ctx context.Context, in *QueryLiquidityForAddressRequest, opts ...grpc.CallOption) (*QueryLiquidityForAddressResponse, error)
	Liquidity(ctx context.Context, in *QueryGetLiquidityRequest, opts ...grpc.CallOption) (*QueryGetLiquidityResponse, error)
	LiquidityQueue(ctx context.Context, in *QueryGetLiquidityQueueRequest, opts ...grpc.CallOption) (*QueryGetLiquidityQueueResponse, error)
	LiquiditySum(ctx context.Context, in *QueryGetLiquiditySumRequest, opts ...grpc.CallOption) (*QueryGetLiquiditySumResponse, error)
	LiquidityPair(ctx context.Context, in *QueryGetLiquidityPairRequest, opts ...grpc.CallOption) (*QueryGetLiquidityPairResponse, error)
	Orders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QueryOrdersResponse, error)
	OrdersAddress(ctx context.Context, in *QueryOrdersAddressRequest, opts ...grpc.CallOption) (*QueryOrdersAddressResponse, error)
	Order(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error)
	OrdersByPair(ctx context.Context, in *OrdersByPairRequest, opts ...grpc.CallOption) (*QueryOrdersByPairResponse, error)
	OrdersNum(ctx context.Context, in *QueryOrdersNumRequest, opts ...grpc.CallOption) (*QueryOrdersNumResponse, error)
	OrdersSum(ctx context.Context, in *QueryOrdersSumRequest, opts ...grpc.CallOption) (*QueryOrdersSumResponse, error)
	OrdersDenomSum(ctx context.Context, in *QueryOrdersDenomSumRequest, opts ...grpc.CallOption) (*QueryOrdersDenomSumResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	LiquidityPool(ctx context.Context, in *QueryLiquidityPoolRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolResponse, error)
	OrderPool(ctx context.Context, in *QueryOrderPoolRequest, opts ...grpc.CallOption) (*QueryOrderPoolResponse, error)
	Price(ctx context.Context, in *QueryPriceRequest, opts ...grpc.CallOption) (*QueryPriceResponse, error)
	PriceUsd(ctx context.Context, in *QueryPriceUsdRequest, opts ...grpc.CallOption) (*QueryPriceUsdResponse, error)
	ReserveFunds(ctx context.Context, in *QueryReserveFundsRequest, opts ...grpc.CallOption) (*QueryReserveFundsResponse, error)
	ReserveFundsPerDenom(ctx context.Context, in *QueryReserveFundsPerDenomRequest, opts ...grpc.CallOption) (*Denom, error)
	QuerySimulateSell(ctx context.Context, in *QuerySimulateTradeRequest, opts ...grpc.CallOption) (*QuerySimulateTradeResponse, error)
	QuerySimulateBuy(ctx context.Context, in *QuerySimulateTradeRequest, opts ...grpc.CallOption) (*QuerySimulateTradeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ValueKCoins(ctx context.Context, in *QueryValueKCoinsRequest, opts ...grpc.CallOption) (*QueryValueKCoinsResponse, error) {
	out := new(QueryValueKCoinsResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/ValueKCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityAll(ctx context.Context, in *QueryGetLiquidityAllRequest, opts ...grpc.CallOption) (*QueryGetLiquidityAllResponse, error) {
	out := new(QueryGetLiquidityAllResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/LiquidityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityForAddress(ctx context.Context, in *QueryLiquidityForAddressRequest, opts ...grpc.CallOption) (*QueryLiquidityForAddressResponse, error) {
	out := new(QueryLiquidityForAddressResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/LiquidityForAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Liquidity(ctx context.Context, in *QueryGetLiquidityRequest, opts ...grpc.CallOption) (*QueryGetLiquidityResponse, error) {
	out := new(QueryGetLiquidityResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/Liquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityQueue(ctx context.Context, in *QueryGetLiquidityQueueRequest, opts ...grpc.CallOption) (*QueryGetLiquidityQueueResponse, error) {
	out := new(QueryGetLiquidityQueueResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/LiquidityQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquiditySum(ctx context.Context, in *QueryGetLiquiditySumRequest, opts ...grpc.CallOption) (*QueryGetLiquiditySumResponse, error) {
	out := new(QueryGetLiquiditySumResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/LiquiditySum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityPair(ctx context.Context, in *QueryGetLiquidityPairRequest, opts ...grpc.CallOption) (*QueryGetLiquidityPairResponse, error) {
	out := new(QueryGetLiquidityPairResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/LiquidityPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Orders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QueryOrdersResponse, error) {
	out := new(QueryOrdersResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/Orders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersAddress(ctx context.Context, in *QueryOrdersAddressRequest, opts ...grpc.CallOption) (*QueryOrdersAddressResponse, error) {
	out := new(QueryOrdersAddressResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/OrdersAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Order(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error) {
	out := new(QueryOrderResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersByPair(ctx context.Context, in *OrdersByPairRequest, opts ...grpc.CallOption) (*QueryOrdersByPairResponse, error) {
	out := new(QueryOrdersByPairResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/OrdersByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersNum(ctx context.Context, in *QueryOrdersNumRequest, opts ...grpc.CallOption) (*QueryOrdersNumResponse, error) {
	out := new(QueryOrdersNumResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/OrdersNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersSum(ctx context.Context, in *QueryOrdersSumRequest, opts ...grpc.CallOption) (*QueryOrdersSumResponse, error) {
	out := new(QueryOrdersSumResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/OrdersSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersDenomSum(ctx context.Context, in *QueryOrdersDenomSumRequest, opts ...grpc.CallOption) (*QueryOrdersDenomSumResponse, error) {
	out := new(QueryOrdersDenomSumResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/OrdersDenomSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityPool(ctx context.Context, in *QueryLiquidityPoolRequest, opts ...grpc.CallOption) (*QueryLiquidityPoolResponse, error) {
	out := new(QueryLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/LiquidityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderPool(ctx context.Context, in *QueryOrderPoolRequest, opts ...grpc.CallOption) (*QueryOrderPoolResponse, error) {
	out := new(QueryOrderPoolResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/OrderPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Price(ctx context.Context, in *QueryPriceRequest, opts ...grpc.CallOption) (*QueryPriceResponse, error) {
	out := new(QueryPriceResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/Price", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceUsd(ctx context.Context, in *QueryPriceUsdRequest, opts ...grpc.CallOption) (*QueryPriceUsdResponse, error) {
	out := new(QueryPriceUsdResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/PriceUsd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReserveFunds(ctx context.Context, in *QueryReserveFundsRequest, opts ...grpc.CallOption) (*QueryReserveFundsResponse, error) {
	out := new(QueryReserveFundsResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/ReserveFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReserveFundsPerDenom(ctx context.Context, in *QueryReserveFundsPerDenomRequest, opts ...grpc.CallOption) (*Denom, error) {
	out := new(Denom)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/ReserveFundsPerDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySimulateSell(ctx context.Context, in *QuerySimulateTradeRequest, opts ...grpc.CallOption) (*QuerySimulateTradeResponse, error) {
	out := new(QuerySimulateTradeResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/QuerySimulateSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySimulateBuy(ctx context.Context, in *QuerySimulateTradeRequest, opts ...grpc.CallOption) (*QuerySimulateTradeResponse, error) {
	out := new(QuerySimulateTradeResponse)
	err := c.cc.Invoke(ctx, "/kopi.dex.Query/QuerySimulateBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	ValueKCoins(context.Context, *QueryValueKCoinsRequest) (*QueryValueKCoinsResponse, error)
	LiquidityAll(context.Context, *QueryGetLiquidityAllRequest) (*QueryGetLiquidityAllResponse, error)
	LiquidityForAddress(context.Context, *QueryLiquidityForAddressRequest) (*QueryLiquidityForAddressResponse, error)
	Liquidity(context.Context, *QueryGetLiquidityRequest) (*QueryGetLiquidityResponse, error)
	LiquidityQueue(context.Context, *QueryGetLiquidityQueueRequest) (*QueryGetLiquidityQueueResponse, error)
	LiquiditySum(context.Context, *QueryGetLiquiditySumRequest) (*QueryGetLiquiditySumResponse, error)
	LiquidityPair(context.Context, *QueryGetLiquidityPairRequest) (*QueryGetLiquidityPairResponse, error)
	Orders(context.Context, *QueryOrdersRequest) (*QueryOrdersResponse, error)
	OrdersAddress(context.Context, *QueryOrdersAddressRequest) (*QueryOrdersAddressResponse, error)
	Order(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error)
	OrdersByPair(context.Context, *OrdersByPairRequest) (*QueryOrdersByPairResponse, error)
	OrdersNum(context.Context, *QueryOrdersNumRequest) (*QueryOrdersNumResponse, error)
	OrdersSum(context.Context, *QueryOrdersSumRequest) (*QueryOrdersSumResponse, error)
	OrdersDenomSum(context.Context, *QueryOrdersDenomSumRequest) (*QueryOrdersDenomSumResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	LiquidityPool(context.Context, *QueryLiquidityPoolRequest) (*QueryLiquidityPoolResponse, error)
	OrderPool(context.Context, *QueryOrderPoolRequest) (*QueryOrderPoolResponse, error)
	Price(context.Context, *QueryPriceRequest) (*QueryPriceResponse, error)
	PriceUsd(context.Context, *QueryPriceUsdRequest) (*QueryPriceUsdResponse, error)
	ReserveFunds(context.Context, *QueryReserveFundsRequest) (*QueryReserveFundsResponse, error)
	ReserveFundsPerDenom(context.Context, *QueryReserveFundsPerDenomRequest) (*Denom, error)
	QuerySimulateSell(context.Context, *QuerySimulateTradeRequest) (*QuerySimulateTradeResponse, error)
	QuerySimulateBuy(context.Context, *QuerySimulateTradeRequest) (*QuerySimulateTradeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ValueKCoins(ctx context.Context, req *QueryValueKCoinsRequest) (*QueryValueKCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueKCoins not implemented")
}
func (*UnimplementedQueryServer) LiquidityAll(ctx context.Context, req *QueryGetLiquidityAllRequest) (*QueryGetLiquidityAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityAll not implemented")
}
func (*UnimplementedQueryServer) LiquidityForAddress(ctx context.Context, req *QueryLiquidityForAddressRequest) (*QueryLiquidityForAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityForAddress not implemented")
}
func (*UnimplementedQueryServer) Liquidity(ctx context.Context, req *QueryGetLiquidityRequest) (*QueryGetLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liquidity not implemented")
}
func (*UnimplementedQueryServer) LiquidityQueue(ctx context.Context, req *QueryGetLiquidityQueueRequest) (*QueryGetLiquidityQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityQueue not implemented")
}
func (*UnimplementedQueryServer) LiquiditySum(ctx context.Context, req *QueryGetLiquiditySumRequest) (*QueryGetLiquiditySumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquiditySum not implemented")
}
func (*UnimplementedQueryServer) LiquidityPair(ctx context.Context, req *QueryGetLiquidityPairRequest) (*QueryGetLiquidityPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPair not implemented")
}
func (*UnimplementedQueryServer) Orders(ctx context.Context, req *QueryOrdersRequest) (*QueryOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Orders not implemented")
}
func (*UnimplementedQueryServer) OrdersAddress(ctx context.Context, req *QueryOrdersAddressRequest) (*QueryOrdersAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersAddress not implemented")
}
func (*UnimplementedQueryServer) Order(ctx context.Context, req *QueryOrderRequest) (*QueryOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (*UnimplementedQueryServer) OrdersByPair(ctx context.Context, req *OrdersByPairRequest) (*QueryOrdersByPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByPair not implemented")
}
func (*UnimplementedQueryServer) OrdersNum(ctx context.Context, req *QueryOrdersNumRequest) (*QueryOrdersNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersNum not implemented")
}
func (*UnimplementedQueryServer) OrdersSum(ctx context.Context, req *QueryOrdersSumRequest) (*QueryOrdersSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersSum not implemented")
}
func (*UnimplementedQueryServer) OrdersDenomSum(ctx context.Context, req *QueryOrdersDenomSumRequest) (*QueryOrdersDenomSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersDenomSum not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LiquidityPool(ctx context.Context, req *QueryLiquidityPoolRequest) (*QueryLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPool not implemented")
}
func (*UnimplementedQueryServer) OrderPool(ctx context.Context, req *QueryOrderPoolRequest) (*QueryOrderPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPool not implemented")
}
func (*UnimplementedQueryServer) Price(ctx context.Context, req *QueryPriceRequest) (*QueryPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Price not implemented")
}
func (*UnimplementedQueryServer) PriceUsd(ctx context.Context, req *QueryPriceUsdRequest) (*QueryPriceUsdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceUsd not implemented")
}
func (*UnimplementedQueryServer) ReserveFunds(ctx context.Context, req *QueryReserveFundsRequest) (*QueryReserveFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveFunds not implemented")
}
func (*UnimplementedQueryServer) ReserveFundsPerDenom(ctx context.Context, req *QueryReserveFundsPerDenomRequest) (*Denom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveFundsPerDenom not implemented")
}
func (*UnimplementedQueryServer) QuerySimulateSell(ctx context.Context, req *QuerySimulateTradeRequest) (*QuerySimulateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySimulateSell not implemented")
}
func (*UnimplementedQueryServer) QuerySimulateBuy(ctx context.Context, req *QuerySimulateTradeRequest) (*QuerySimulateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySimulateBuy not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ValueKCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValueKCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValueKCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/ValueKCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValueKCoins(ctx, req.(*QueryValueKCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidityAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/LiquidityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityAll(ctx, req.(*QueryGetLiquidityAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityForAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/LiquidityForAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityForAddress(ctx, req.(*QueryLiquidityForAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Liquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Liquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/Liquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Liquidity(ctx, req.(*QueryGetLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidityQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/LiquidityQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityQueue(ctx, req.(*QueryGetLiquidityQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquiditySum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquiditySumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquiditySum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/LiquiditySum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquiditySum(ctx, req.(*QueryGetLiquiditySumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidityPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/LiquidityPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPair(ctx, req.(*QueryGetLiquidityPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Orders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Orders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/Orders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Orders(ctx, req.(*QueryOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/OrdersAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersAddress(ctx, req.(*QueryOrdersAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Order(ctx, req.(*QueryOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/OrdersByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersByPair(ctx, req.(*OrdersByPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/OrdersNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersNum(ctx, req.(*QueryOrdersNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/OrdersSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersSum(ctx, req.(*QueryOrdersSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersDenomSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersDenomSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersDenomSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/OrdersDenomSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersDenomSum(ctx, req.(*QueryOrdersDenomSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/LiquidityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPool(ctx, req.(*QueryLiquidityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/OrderPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderPool(ctx, req.(*QueryOrderPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/Price",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Price(ctx, req.(*QueryPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceUsd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceUsdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceUsd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/PriceUsd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceUsd(ctx, req.(*QueryPriceUsdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReserveFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReserveFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReserveFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/ReserveFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReserveFunds(ctx, req.(*QueryReserveFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReserveFundsPerDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReserveFundsPerDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReserveFundsPerDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/ReserveFundsPerDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReserveFundsPerDenom(ctx, req.(*QueryReserveFundsPerDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySimulateSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySimulateSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/QuerySimulateSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySimulateSell(ctx, req.(*QuerySimulateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySimulateBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySimulateBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.dex.Query/QuerySimulateBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySimulateBuy(ctx, req.(*QuerySimulateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.dex.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValueKCoins",
			Handler:    _Query_ValueKCoins_Handler,
		},
		{
			MethodName: "LiquidityAll",
			Handler:    _Query_LiquidityAll_Handler,
		},
		{
			MethodName: "LiquidityForAddress",
			Handler:    _Query_LiquidityForAddress_Handler,
		},
		{
			MethodName: "Liquidity",
			Handler:    _Query_Liquidity_Handler,
		},
		{
			MethodName: "LiquidityQueue",
			Handler:    _Query_LiquidityQueue_Handler,
		},
		{
			MethodName: "LiquiditySum",
			Handler:    _Query_LiquiditySum_Handler,
		},
		{
			MethodName: "LiquidityPair",
			Handler:    _Query_LiquidityPair_Handler,
		},
		{
			MethodName: "Orders",
			Handler:    _Query_Orders_Handler,
		},
		{
			MethodName: "OrdersAddress",
			Handler:    _Query_OrdersAddress_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Query_Order_Handler,
		},
		{
			MethodName: "OrdersByPair",
			Handler:    _Query_OrdersByPair_Handler,
		},
		{
			MethodName: "OrdersNum",
			Handler:    _Query_OrdersNum_Handler,
		},
		{
			MethodName: "OrdersSum",
			Handler:    _Query_OrdersSum_Handler,
		},
		{
			MethodName: "OrdersDenomSum",
			Handler:    _Query_OrdersDenomSum_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LiquidityPool",
			Handler:    _Query_LiquidityPool_Handler,
		},
		{
			MethodName: "OrderPool",
			Handler:    _Query_OrderPool_Handler,
		},
		{
			MethodName: "Price",
			Handler:    _Query_Price_Handler,
		},
		{
			MethodName: "PriceUsd",
			Handler:    _Query_PriceUsd_Handler,
		},
		{
			MethodName: "ReserveFunds",
			Handler:    _Query_ReserveFunds_Handler,
		},
		{
			MethodName: "ReserveFundsPerDenom",
			Handler:    _Query_ReserveFundsPerDenom_Handler,
		},
		{
			MethodName: "QuerySimulateSell",
			Handler:    _Query_QuerySimulateSell_Handler,
		},
		{
			MethodName: "QuerySimulateBuy",
			Handler:    _Query_QuerySimulateBuy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/dex/query.proto",
}

func (m *QueryLiquidityPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LiquidityPoolEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPoolEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPoolEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntriesSum) > 0 {
		i -= len(m.EntriesSum)
		copy(dAtA[i:], m.EntriesSum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EntriesSum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LiquiditySum) > 0 {
		i -= len(m.LiquiditySum)
		copy(dAtA[i:], m.LiquiditySum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LiquiditySum)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolAmount) > 0 {
		i -= len(m.PoolAmount)
		copy(dAtA[i:], m.PoolAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrdersByPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrdersByPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrdersByPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomReceiving) > 0 {
		i -= len(m.DenomReceiving)
		copy(dAtA[i:], m.DenomReceiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomReceiving)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomGiving) > 0 {
		i -= len(m.DenomGiving)
		copy(dAtA[i:], m.DenomGiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomGiving)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersByPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersByPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersByPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asks) > 0 {
		for iNdEx := len(m.Asks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Asks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryReserveFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryReserveFundsPerDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveFundsPerDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveFundsPerDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Denom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Denom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Denom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountUsd) > 0 {
		i -= len(m.AmountUsd)
		copy(dAtA[i:], m.AmountUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReserveFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomReceiving) > 0 {
		i -= len(m.DenomReceiving)
		copy(dAtA[i:], m.DenomReceiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomReceiving)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomGiving) > 0 {
		i -= len(m.DenomGiving)
		copy(dAtA[i:], m.DenomGiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomGiving)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquiditySumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquiditySumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquiditySumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquiditySumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquiditySumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquiditySumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueUsd) > 0 {
		i -= len(m.ValueUsd)
		copy(dAtA[i:], m.ValueUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValueUsd)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityAllResponseEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityAllResponseEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityAllResponseEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountUsd) > 0 {
		i -= len(m.AmountUsd)
		copy(dAtA[i:], m.AmountUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Denoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VirtualBase) > 0 {
		i -= len(m.VirtualBase)
		copy(dAtA[i:], m.VirtualBase)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VirtualBase)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VirtualOther) > 0 {
		i -= len(m.VirtualOther)
		copy(dAtA[i:], m.VirtualOther)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VirtualOther)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidityPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidityPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidityPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FullOther) > 0 {
		i -= len(m.FullOther)
		copy(dAtA[i:], m.FullOther)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FullOther)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FullBase) > 0 {
		i -= len(m.FullBase)
		copy(dAtA[i:], m.FullBase)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FullBase)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VirtualOther) > 0 {
		i -= len(m.VirtualOther)
		copy(dAtA[i:], m.VirtualOther)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VirtualOther)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VirtualBase) > 0 {
		i -= len(m.VirtualBase)
		copy(dAtA[i:], m.VirtualBase)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VirtualBase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidityPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidityPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidityPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidityPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidityPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidityPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidityPair) > 0 {
		for iNdEx := len(m.LiquidityPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityForAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityForAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityForAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailableBalanceUsd) > 0 {
		i -= len(m.AvailableBalanceUsd)
		copy(dAtA[i:], m.AvailableBalanceUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailableBalanceUsd)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AvailableBalance) > 0 {
		i -= len(m.AvailableBalance)
		copy(dAtA[i:], m.AvailableBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailableBalance)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TotalUsd) > 0 {
		i -= len(m.TotalUsd)
		copy(dAtA[i:], m.TotalUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalUsd)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserAmountUsd) > 0 {
		i -= len(m.UserAmountUsd)
		copy(dAtA[i:], m.UserAmountUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAmountUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserAmount) > 0 {
		i -= len(m.UserAmount)
		copy(dAtA[i:], m.UserAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityForAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityForAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityForAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		for iNdEx := len(m.Liquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Liquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceUsdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceUsdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceUsdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceUsdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceUsdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceUsdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOrdersAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DenomReceiving) > 0 {
		i -= len(m.DenomReceiving)
		copy(dAtA[i:], m.DenomReceiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomReceiving)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DenomGiving) > 0 {
		i -= len(m.DenomGiving)
		copy(dAtA[i:], m.DenomGiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomGiving)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersNumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersNumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersNumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOrdersNumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersNumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersNumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersSumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersSumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersSumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOrdersSumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersSumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersSumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersDenomSumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersDenomSumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersDenomSumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrdersSum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrdersSum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrdersSum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomGiving) > 0 {
		i -= len(m.DenomGiving)
		copy(dAtA[i:], m.DenomGiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomGiving)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersDenomSumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersDenomSumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersDenomSumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Denoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DenomReceiving) > 0 {
		i -= len(m.DenomReceiving)
		copy(dAtA[i:], m.DenomReceiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomReceiving)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomGiving) > 0 {
		i -= len(m.DenomGiving)
		copy(dAtA[i:], m.DenomGiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomGiving)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceReceivedInUsd) > 0 {
		i -= len(m.PriceReceivedInUsd)
		copy(dAtA[i:], m.PriceReceivedInUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceReceivedInUsd)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PriceGivenInUsd) > 0 {
		i -= len(m.PriceGivenInUsd)
		copy(dAtA[i:], m.PriceGivenInUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceGivenInUsd)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x32
	}
	if m.Fee != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x28
	}
	if m.AmountReceivedInUsd != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AmountReceivedInUsd))
		i--
		dAtA[i] = 0x20
	}
	if m.AmountReceived != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AmountReceived))
		i--
		dAtA[i] = 0x18
	}
	if m.AmountGivenInUsd != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AmountGivenInUsd))
		i--
		dAtA[i] = 0x10
	}
	if m.AmountGiven != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AmountGiven))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderBookSum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBookSum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBookSum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PriceBase) > 0 {
		i -= len(m.PriceBase)
		copy(dAtA[i:], m.PriceBase)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceBase)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepthToRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepthToRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepthToRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomReceiving) > 0 {
		i -= len(m.DenomReceiving)
		copy(dAtA[i:], m.DenomReceiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomReceiving)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepthToResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepthToResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepthToResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepthFromRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepthFromRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepthFromRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomGiving) > 0 {
		i -= len(m.DenomGiving)
		copy(dAtA[i:], m.DenomGiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomGiving)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepthFromResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepthFromResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepthFromResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowIncomplete {
		i--
		if m.AllowIncomplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.BlockEnd != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockEnd))
		i--
		dAtA[i] = 0x70
	}
	if m.NumBlocks != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumBlocks))
		i--
		dAtA[i] = 0x68
	}
	if len(m.MaxPriceUsd) > 0 {
		i -= len(m.MaxPriceUsd)
		copy(dAtA[i:], m.MaxPriceUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MaxPriceUsd)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MaxPrice) > 0 {
		i -= len(m.MaxPrice)
		copy(dAtA[i:], m.MaxPrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MaxPrice)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TradeAmount) > 0 {
		i -= len(m.TradeAmount)
		copy(dAtA[i:], m.TradeAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TradeAmount)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AmountReceivedUsd) > 0 {
		i -= len(m.AmountReceivedUsd)
		copy(dAtA[i:], m.AmountReceivedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountReceivedUsd)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AmountReceived) > 0 {
		i -= len(m.AmountReceived)
		copy(dAtA[i:], m.AmountReceived)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountReceived)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AmountLeftUsd) > 0 {
		i -= len(m.AmountLeftUsd)
		copy(dAtA[i:], m.AmountLeftUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountLeftUsd)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AmountLeft) > 0 {
		i -= len(m.AmountLeft)
		copy(dAtA[i:], m.AmountLeft)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountLeft)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AmountGiven) > 0 {
		i -= len(m.AmountGiven)
		copy(dAtA[i:], m.AmountGiven)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountGiven)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DenomReceiving) > 0 {
		i -= len(m.DenomReceiving)
		copy(dAtA[i:], m.DenomReceiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomReceiving)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DenomGiving) > 0 {
		i -= len(m.DenomGiving)
		copy(dAtA[i:], m.DenomGiving)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomGiving)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrderBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolAmount) > 0 {
		i -= len(m.PoolAmount)
		copy(dAtA[i:], m.PoolAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SumOrder) > 0 {
		i -= len(m.SumOrder)
		copy(dAtA[i:], m.SumOrder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SumOrder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValueKCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValueKCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValueKCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValueKCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValueKCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValueKCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLiquidityPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LiquidityPoolEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LiquiditySum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EntriesSum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *OrdersByPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomGiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomReceiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrdersByPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Asks) > 0 {
		for _, e := range m.Asks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryReserveFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryReserveFundsPerDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Denom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReserveFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomGiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomReceiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLiquiditySumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetLiquiditySumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValueUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiquidityAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetLiquidityAllResponseEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiquidityAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, e := range m.Denoms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VirtualOther)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VirtualBase)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *LiquidityEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiquidityQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiquidityQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiquidityShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiquidityPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiquidityPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VirtualBase)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VirtualOther)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FullBase)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FullOther)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLiquidityPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllLiquidityPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityPair) > 0 {
		for _, e := range m.LiquidityPair {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLiquidityForAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AddressLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserAmountUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AvailableBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AvailableBalanceUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityForAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		for _, e := range m.Liquidity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPriceUsdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPriceUsdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOrdersAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomGiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomReceiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrdersAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrdersNumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOrdersNumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovQuery(uint64(m.Num))
	}
	return n
}

func (m *QueryOrdersSumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOrdersSumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrdersDenomSumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrdersSum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomGiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrdersDenomSumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, e := range m.Denoms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySimulateTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomGiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomReceiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AmountGiven != 0 {
		n += 1 + sovQuery(uint64(m.AmountGiven))
	}
	if m.AmountGivenInUsd != 0 {
		n += 1 + sovQuery(uint64(m.AmountGivenInUsd))
	}
	if m.AmountReceived != 0 {
		n += 1 + sovQuery(uint64(m.AmountReceived))
	}
	if m.AmountReceivedInUsd != 0 {
		n += 1 + sovQuery(uint64(m.AmountReceivedInUsd))
	}
	if m.Fee != 0 {
		n += 1 + sovQuery(uint64(m.Fee))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceGivenInUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceReceivedInUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OrderBookSum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceBase)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepthToRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomReceiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepthToResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDepthFromRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomGiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepthFromResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomGiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomReceiving)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountGiven)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountLeft)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountLeftUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountReceived)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountReceivedUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TradeAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MaxPrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MaxPriceUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.NumBlocks != 0 {
		n += 1 + sovQuery(uint64(m.NumBlocks))
	}
	if m.BlockEnd != 0 {
		n += 1 + sovQuery(uint64(m.BlockEnd))
	}
	if m.AllowIncomplete {
		n += 2
	}
	return n
}

func (m *QueryOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrderBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SumOrder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValueKCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValueKCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLiquidityPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPoolEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPoolEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPoolEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquiditySum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquiditySum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntriesSum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntriesSum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LiquidityPoolEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrdersByPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrdersByPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrdersByPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomGiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomGiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomReceiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomReceiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersByPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersByPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersByPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &OrderResponse{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asks = append(m.Asks, &OrderResponse{})
			if err := m.Asks[len(m.Asks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveFundsPerDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveFundsPerDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveFundsPerDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Denom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Denom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Denom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, &Denom{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomGiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomGiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomReceiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomReceiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquiditySumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquiditySumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquiditySumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquiditySumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquiditySumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquiditySumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityAllResponseEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityAllResponseEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityAllResponseEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, &QueryGetLiquidityAllResponseEntry{})
			if err := m.Denoms[len(m.Denoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualOther", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualOther = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LiquidityEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidityPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidityPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidityPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualOther", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualOther = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullOther", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullOther = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidityPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidityPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidityPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidityPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidityPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidityPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityPair = append(m.LiquidityPair, LiquidityPair{})
			if err := m.LiquidityPair[len(m.LiquidityPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityForAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityForAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityForAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAmountUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalanceUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableBalanceUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityForAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityForAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityForAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = append(m.Liquidity, &AddressLiquidity{})
			if err := m.Liquidity[len(m.Liquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceUsdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceUsdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceUsdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceUsdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceUsdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceUsdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomGiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomGiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomReceiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomReceiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &OrderResponse{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersNumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersNumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersNumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersNumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersNumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersNumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersSumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersSumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersSumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersSumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersSumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersSumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersDenomSumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersDenomSumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersDenomSumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrdersSum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrdersSum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrdersSum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomGiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomGiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersDenomSumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersDenomSumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersDenomSumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, &OrdersSum{})
			if err := m.Denoms[len(m.Denoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomGiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomGiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomReceiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomReceiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountGiven", wireType)
			}
			m.AmountGiven = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountGiven |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountGivenInUsd", wireType)
			}
			m.AmountGivenInUsd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountGivenInUsd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountReceived", wireType)
			}
			m.AmountReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountReceived |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountReceivedInUsd", wireType)
			}
			m.AmountReceivedInUsd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountReceivedInUsd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceGivenInUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceGivenInUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceReceivedInUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceReceivedInUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBookSum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBookSum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBookSum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepthToRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepthToRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepthToRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomReceiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomReceiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepthToResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepthToResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepthToResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &OrderBookSum{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepthFromRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepthFromRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepthFromRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomGiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomGiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepthFromResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepthFromResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepthFromResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &OrderBookSum{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomGiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomGiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomReceiving", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomReceiving = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountGiven", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountGiven = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountLeft", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountLeft = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountLeftUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountLeftUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountReceived", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountReceived = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountReceivedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountReceivedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriceUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPriceUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockEnd", wireType)
			}
			m.BlockEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowIncomplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowIncomplete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &OrderResponse{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &OrderResponse{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SumOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, &OrderBalance{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValueKCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValueKCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValueKCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValueKCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValueKCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValueKCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
