// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/dex/order.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Order struct {
	Index             uint64                      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Creator           string                      `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	DenomFrom         string                      `protobuf:"bytes,3,opt,name=denom_from,json=denomFrom,proto3" json:"denom_from,omitempty"`
	DenomTo           string                      `protobuf:"bytes,4,opt,name=denom_to,json=denomTo,proto3" json:"denom_to,omitempty"`
	AmountLeft        cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=amount_left,json=amountLeft,proto3,customtype=cosmossdk.io/math.Int" json:"amount_left"`
	TradeAmount       cosmossdk_io_math.Int       `protobuf:"bytes,6,opt,name=trade_amount,json=tradeAmount,proto3,customtype=cosmossdk.io/math.Int" json:"trade_amount"`
	MaxPrice          cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=max_price,json=maxPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_price"`
	AddedAt           int64                       `protobuf:"varint,8,opt,name=added_at,json=addedAt,proto3" json:"added_at,omitempty"`
	NumBlocks         uint64                      `protobuf:"varint,9,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	ExecutionInterval uint64                      `protobuf:"varint,10,opt,name=execution_interval,json=executionInterval,proto3" json:"execution_interval,omitempty"`
	AllowIncomplete   bool                        `protobuf:"varint,11,opt,name=allow_incomplete,json=allowIncomplete,proto3" json:"allow_incomplete,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a3c69e57e509978, []int{0}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Order) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Order) GetDenomFrom() string {
	if m != nil {
		return m.DenomFrom
	}
	return ""
}

func (m *Order) GetDenomTo() string {
	if m != nil {
		return m.DenomTo
	}
	return ""
}

func (m *Order) GetAddedAt() int64 {
	if m != nil {
		return m.AddedAt
	}
	return 0
}

func (m *Order) GetNumBlocks() uint64 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

func (m *Order) GetExecutionInterval() uint64 {
	if m != nil {
		return m.ExecutionInterval
	}
	return 0
}

func (m *Order) GetAllowIncomplete() bool {
	if m != nil {
		return m.AllowIncomplete
	}
	return false
}

func init() {
	proto.RegisterType((*Order)(nil), "kopi.dex.Order")
}

func init() { proto.RegisterFile("kopi/dex/order.proto", fileDescriptor_2a3c69e57e509978) }

var fileDescriptor_2a3c69e57e509978 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0x76, 0xbb, 0x6d, 0xa6, 0x0b, 0xea, 0x50, 0x61, 0x54, 0x36, 0x1b, 0x14, 0x24,
	0x1e, 0x36, 0x39, 0x78, 0x97, 0x6e, 0x11, 0xa1, 0xb0, 0xa0, 0x04, 0x4f, 0x5e, 0xc2, 0x74, 0xe6,
	0xb5, 0x1b, 0x9a, 0x99, 0x17, 0x26, 0x13, 0x4d, 0xbf, 0x85, 0x1f, 0x6b, 0xbd, 0xed, 0x51, 0x3c,
	0x2c, 0xd2, 0x7e, 0x11, 0xc9, 0x64, 0xdd, 0x8b, 0x97, 0xbd, 0xcd, 0xff, 0xf7, 0x7f, 0xbf, 0x40,
	0x1e, 0x8f, 0xce, 0xb6, 0x58, 0x15, 0xa9, 0x82, 0x36, 0x45, 0xab, 0xc0, 0x26, 0x95, 0x45, 0x87,
	0x6c, 0xd2, 0xd1, 0x44, 0x41, 0xfb, 0x62, 0xb6, 0xc1, 0x0d, 0x7a, 0x98, 0x76, 0xaf, 0xbe, 0x7f,
	0xf5, 0x73, 0x48, 0x47, 0x9f, 0xba, 0x79, 0x36, 0xa3, 0xa3, 0xc2, 0x28, 0x68, 0x39, 0x89, 0x48,
	0x7c, 0x94, 0xf5, 0x81, 0x71, 0x3a, 0x96, 0x16, 0x84, 0x43, 0xcb, 0x1f, 0x45, 0x24, 0x0e, 0xb2,
	0x7f, 0x91, 0x9d, 0x52, 0xaa, 0xc0, 0xa0, 0xce, 0xd7, 0x16, 0x35, 0x1f, 0xfa, 0x32, 0xf0, 0xe4,
	0xa3, 0x45, 0xcd, 0x9e, 0xd3, 0x49, 0x5f, 0x3b, 0xe4, 0x47, 0xbd, 0xe9, 0xf3, 0x17, 0x64, 0xef,
	0xe9, 0x54, 0x68, 0x6c, 0x8c, 0xcb, 0x4b, 0x58, 0x3b, 0x3e, 0x8a, 0x48, 0x7c, 0xb2, 0x38, 0xbd,
	0xbe, 0x3d, 0x1b, 0xfc, 0xbe, 0x3d, 0x7b, 0x26, 0xb1, 0xd6, 0x58, 0xd7, 0x6a, 0x9b, 0x14, 0x98,
	0x6a, 0xe1, 0xae, 0x92, 0xa5, 0x71, 0x19, 0xed, 0x8d, 0x4b, 0x58, 0x3b, 0x36, 0xa7, 0x27, 0xce,
	0x0a, 0x05, 0x79, 0xcf, 0xf8, 0xf1, 0x43, 0x3e, 0x30, 0xf5, 0xca, 0x85, 0x37, 0xd8, 0x9c, 0x06,
	0x5a, 0xb4, 0x79, 0x65, 0x0b, 0x09, 0x7c, 0xec, 0xf5, 0xd7, 0x77, 0xfa, 0xcb, 0xff, 0xf5, 0x4b,
	0xd8, 0x08, 0xb9, 0xfb, 0x00, 0x32, 0x9b, 0x68, 0xd1, 0x7e, 0xee, 0xa4, 0xee, 0xf7, 0x84, 0x52,
	0xa0, 0x72, 0xe1, 0xf8, 0x24, 0x22, 0xf1, 0x30, 0x1b, 0xfb, 0x7c, 0xe1, 0xba, 0xc5, 0x98, 0x46,
	0xe7, 0xab, 0x12, 0xe5, 0xb6, 0xe6, 0x81, 0xdf, 0x66, 0x60, 0x1a, 0xbd, 0xf0, 0x80, 0x9d, 0x53,
	0x06, 0x2d, 0xc8, 0xc6, 0x15, 0x68, 0xf2, 0xc2, 0x38, 0xb0, 0xdf, 0x44, 0xc9, 0xa9, 0x1f, 0x7b,
	0x7a, 0xdf, 0x2c, 0xef, 0x0a, 0xf6, 0x96, 0x3e, 0x11, 0x65, 0x89, 0xdf, 0xf3, 0xc2, 0x48, 0xd4,
	0x55, 0x09, 0x0e, 0xf8, 0x34, 0x22, 0xf1, 0x24, 0x7b, 0xec, 0xf9, 0xf2, 0x1e, 0x2f, 0xe6, 0xd7,
	0xfb, 0x90, 0xdc, 0xec, 0x43, 0xf2, 0x67, 0x1f, 0x92, 0x1f, 0x87, 0x70, 0x70, 0x73, 0x08, 0x07,
	0xbf, 0x0e, 0xe1, 0xe0, 0xeb, 0x9b, 0x4d, 0xe1, 0xae, 0x9a, 0x55, 0x22, 0x51, 0xa7, 0xdd, 0x41,
	0x9c, 0x6b, 0x34, 0xb0, 0xf3, 0xcf, 0xb4, 0xf5, 0x37, 0xe3, 0x76, 0x15, 0xd4, 0xab, 0x63, 0x7f,
	0x14, 0xef, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xe4, 0xf6, 0xfa, 0x4c, 0x02, 0x00, 0x00,
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowIncomplete {
		i--
		if m.AllowIncomplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ExecutionInterval != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ExecutionInterval))
		i--
		dAtA[i] = 0x50
	}
	if m.NumBlocks != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.NumBlocks))
		i--
		dAtA[i] = 0x48
	}
	if m.AddedAt != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.AddedAt))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.MaxPrice.Size()
		i -= size
		if _, err := m.MaxPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TradeAmount.Size()
		i -= size
		if _, err := m.TradeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountLeft.Size()
		i -= size
		if _, err := m.AmountLeft.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DenomTo) > 0 {
		i -= len(m.DenomTo)
		copy(dAtA[i:], m.DenomTo)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.DenomTo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DenomFrom) > 0 {
		i -= len(m.DenomFrom)
		copy(dAtA[i:], m.DenomFrom)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.DenomFrom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovOrder(uint64(m.Index))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.DenomFrom)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.DenomTo)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = m.AmountLeft.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.TradeAmount.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.MaxPrice.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.AddedAt != 0 {
		n += 1 + sovOrder(uint64(m.AddedAt))
	}
	if m.NumBlocks != 0 {
		n += 1 + sovOrder(uint64(m.NumBlocks))
	}
	if m.ExecutionInterval != 0 {
		n += 1 + sovOrder(uint64(m.ExecutionInterval))
	}
	if m.AllowIncomplete {
		n += 2
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountLeft", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountLeft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAt", wireType)
			}
			m.AddedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionInterval", wireType)
			}
			m.ExecutionInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowIncomplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowIncomplete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
