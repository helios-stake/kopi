// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/tokenfactory/pool.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidityPool struct {
	KCoin              string                      `protobuf:"bytes,1,opt,name=k_coin,json=kCoin,proto3" json:"k_coin,omitempty"`
	UnlockBlocks       uint64                      `protobuf:"varint,2,opt,name=unlock_blocks,json=unlockBlocks,proto3" json:"unlock_blocks,omitempty"`
	PoolFee            cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=pool_fee,json=poolFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"pool_fee"`
	FactoryDenomAmount cosmossdk_io_math.Int       `protobuf:"bytes,4,opt,name=factory_denom_amount,json=factoryDenomAmount,proto3,customtype=cosmossdk.io/math.Int" json:"factory_denom_amount"`
	KCoinAmount        cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=k_coin_amount,json=kCoinAmount,proto3,customtype=cosmossdk.io/math.Int" json:"k_coin_amount"`
}

func (m *LiquidityPool) Reset()         { *m = LiquidityPool{} }
func (m *LiquidityPool) String() string { return proto.CompactTextString(m) }
func (*LiquidityPool) ProtoMessage()    {}
func (*LiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b3841737adb849, []int{0}
}
func (m *LiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPool.Merge(m, src)
}
func (m *LiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPool proto.InternalMessageInfo

func (m *LiquidityPool) GetKCoin() string {
	if m != nil {
		return m.KCoin
	}
	return ""
}

func (m *LiquidityPool) GetUnlockBlocks() uint64 {
	if m != nil {
		return m.UnlockBlocks
	}
	return 0
}

type GenesisLiquidityPool struct {
	FactoryDenom       string                      `protobuf:"bytes,1,opt,name=factory_denom,json=factoryDenom,proto3" json:"factory_denom,omitempty"`
	KCoin              string                      `protobuf:"bytes,2,opt,name=k_coin,json=kCoin,proto3" json:"k_coin,omitempty"`
	UnlockBlocks       uint64                      `protobuf:"varint,3,opt,name=unlock_blocks,json=unlockBlocks,proto3" json:"unlock_blocks,omitempty"`
	PoolFee            cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=pool_fee,json=poolFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"pool_fee"`
	FactoryDenomAmount cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=factory_denom_amount,json=factoryDenomAmount,proto3,customtype=cosmossdk.io/math.Int" json:"factory_denom_amount"`
	KCoinAmount        cosmossdk_io_math.Int       `protobuf:"bytes,6,opt,name=k_coin_amount,json=kCoinAmount,proto3,customtype=cosmossdk.io/math.Int" json:"k_coin_amount"`
	Shares             []*GenesisProviderShare     `protobuf:"bytes,7,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (m *GenesisLiquidityPool) Reset()         { *m = GenesisLiquidityPool{} }
func (m *GenesisLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*GenesisLiquidityPool) ProtoMessage()    {}
func (*GenesisLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b3841737adb849, []int{1}
}
func (m *GenesisLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisLiquidityPool.Merge(m, src)
}
func (m *GenesisLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *GenesisLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisLiquidityPool proto.InternalMessageInfo

func (m *GenesisLiquidityPool) GetFactoryDenom() string {
	if m != nil {
		return m.FactoryDenom
	}
	return ""
}

func (m *GenesisLiquidityPool) GetKCoin() string {
	if m != nil {
		return m.KCoin
	}
	return ""
}

func (m *GenesisLiquidityPool) GetUnlockBlocks() uint64 {
	if m != nil {
		return m.UnlockBlocks
	}
	return 0
}

func (m *GenesisLiquidityPool) GetShares() []*GenesisProviderShare {
	if m != nil {
		return m.Shares
	}
	return nil
}

type ProviderShare struct {
	Share cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=share,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share"`
}

func (m *ProviderShare) Reset()         { *m = ProviderShare{} }
func (m *ProviderShare) String() string { return proto.CompactTextString(m) }
func (*ProviderShare) ProtoMessage()    {}
func (*ProviderShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b3841737adb849, []int{2}
}
func (m *ProviderShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderShare.Merge(m, src)
}
func (m *ProviderShare) XXX_Size() int {
	return m.Size()
}
func (m *ProviderShare) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderShare.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderShare proto.InternalMessageInfo

type GenesisProviderShare struct {
	Address string                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Share   cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=share,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share"`
}

func (m *GenesisProviderShare) Reset()         { *m = GenesisProviderShare{} }
func (m *GenesisProviderShare) String() string { return proto.CompactTextString(m) }
func (*GenesisProviderShare) ProtoMessage()    {}
func (*GenesisProviderShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b3841737adb849, []int{3}
}
func (m *GenesisProviderShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisProviderShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisProviderShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisProviderShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisProviderShare.Merge(m, src)
}
func (m *GenesisProviderShare) XXX_Size() int {
	return m.Size()
}
func (m *GenesisProviderShare) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisProviderShare.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisProviderShare proto.InternalMessageInfo

func (m *GenesisProviderShare) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*LiquidityPool)(nil), "kopi.tokenfactory.LiquidityPool")
	proto.RegisterType((*GenesisLiquidityPool)(nil), "kopi.tokenfactory.GenesisLiquidityPool")
	proto.RegisterType((*ProviderShare)(nil), "kopi.tokenfactory.ProviderShare")
	proto.RegisterType((*GenesisProviderShare)(nil), "kopi.tokenfactory.GenesisProviderShare")
}

func init() { proto.RegisterFile("kopi/tokenfactory/pool.proto", fileDescriptor_90b3841737adb849) }

var fileDescriptor_90b3841737adb849 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0xfe, 0x49, 0xc1, 0x6b, 0x0e, 0x58, 0x9d, 0x14, 0xf1, 0x27, 0x8b, 0xd2, 0x03,
	0xb9, 0x90, 0x48, 0x70, 0xe2, 0x02, 0x5a, 0x99, 0x40, 0x43, 0x93, 0x98, 0xc2, 0x8d, 0x4b, 0x94,
	0x26, 0x5e, 0x6a, 0xa5, 0xf1, 0x1b, 0x62, 0x07, 0x91, 0xef, 0xc0, 0x81, 0x6f, 0xc0, 0xd7, 0xd9,
	0x71, 0x47, 0xc4, 0x61, 0x42, 0xed, 0x17, 0x41, 0x76, 0x32, 0x68, 0x34, 0x89, 0x6d, 0x52, 0x2f,
	0x91, 0xe3, 0xc7, 0xcf, 0xe3, 0xd7, 0x3f, 0xfb, 0x45, 0x8f, 0x33, 0x28, 0xa8, 0x2f, 0x20, 0x23,
	0xec, 0x2c, 0x8a, 0x05, 0x94, 0xb5, 0x5f, 0x00, 0xac, 0xbc, 0xa2, 0x04, 0x01, 0xf8, 0x81, 0x54,
	0xbd, 0x6d, 0xf5, 0xe1, 0x34, 0x85, 0x14, 0x94, 0xea, 0xcb, 0x51, 0xb3, 0xd0, 0xf9, 0xd1, 0x47,
	0xc6, 0x09, 0xfd, 0x5c, 0xd1, 0x84, 0x8a, 0xfa, 0x14, 0x60, 0x85, 0xf7, 0x91, 0x9e, 0x85, 0x31,
	0x50, 0x66, 0x6a, 0xb6, 0xe6, 0xde, 0x0f, 0x46, 0xd9, 0x1b, 0xa0, 0x0c, 0xcf, 0x90, 0x51, 0xb1,
	0x15, 0xc4, 0x59, 0xb8, 0x90, 0x5f, 0x6e, 0xf6, 0x6d, 0xcd, 0x1d, 0x06, 0x93, 0x66, 0x72, 0xae,
	0xe6, 0xf0, 0x2b, 0x74, 0x4f, 0x16, 0x11, 0x9e, 0x11, 0x62, 0x0e, 0x6c, 0xcd, 0x9d, 0xcc, 0x67,
	0xe7, 0x97, 0x07, 0xbd, 0x5f, 0x97, 0x07, 0x8f, 0x62, 0xe0, 0x39, 0x70, 0x9e, 0x64, 0x1e, 0x05,
	0x3f, 0x8f, 0xc4, 0xd2, 0x3b, 0x21, 0x69, 0x14, 0xd7, 0x47, 0x24, 0x0e, 0xc6, 0xd2, 0xf4, 0x96,
	0x10, 0xfc, 0x01, 0x4d, 0xdb, 0x72, 0xc3, 0x84, 0x30, 0xc8, 0xc3, 0x28, 0x87, 0x8a, 0x09, 0x73,
	0xa8, 0xb2, 0x9e, 0xb4, 0x59, 0xfb, 0xd7, 0xb3, 0x8e, 0x99, 0x08, 0x70, 0x6b, 0x3d, 0x92, 0xce,
	0x43, 0x65, 0xc4, 0x87, 0xc8, 0x68, 0x0e, 0x73, 0x95, 0x34, 0xba, 0x4d, 0xd2, 0x9e, 0x3a, 0x72,
	0x13, 0xe1, 0x7c, 0x1b, 0xa0, 0xe9, 0x3b, 0xc2, 0x08, 0xa7, 0xbc, 0x0b, 0x6a, 0x86, 0x8c, 0x4e,
	0xb1, 0x2d, 0xaf, 0xc9, 0x76, 0x19, 0x5b, 0x34, 0xfb, 0xff, 0xa5, 0x39, 0xb8, 0x81, 0xe6, 0x70,
	0x87, 0x34, 0x47, 0x3b, 0xa3, 0xa9, 0xdf, 0x95, 0x26, 0x7e, 0x8d, 0x74, 0xbe, 0x8c, 0x4a, 0xc2,
	0xcd, 0xb1, 0x3d, 0x70, 0xf7, 0x9e, 0x3f, 0xf5, 0xae, 0xbd, 0x54, 0xaf, 0xa5, 0x7d, 0x5a, 0xc2,
	0x17, 0x9a, 0x90, 0xf2, 0xa3, 0x5c, 0x1f, 0xb4, 0x36, 0xe7, 0x3d, 0x32, 0x3a, 0x02, 0x7e, 0x89,
	0x46, 0x4a, 0x52, 0xf8, 0x6f, 0x89, 0xa8, 0x71, 0x38, 0xd9, 0xdf, 0x9b, 0xed, 0x46, 0x9a, 0x68,
	0x1c, 0x25, 0x49, 0x49, 0x38, 0x6f, 0xef, 0xf4, 0xea, 0xf7, 0xdf, 0x66, 0xfd, 0xbb, 0x6e, 0x36,
	0x3f, 0x3e, 0x5f, 0x5b, 0xda, 0xc5, 0xda, 0xd2, 0x7e, 0xaf, 0x2d, 0xed, 0xfb, 0xc6, 0xea, 0x5d,
	0x6c, 0xac, 0xde, 0xcf, 0x8d, 0xd5, 0xfb, 0xe4, 0xa7, 0x54, 0x2c, 0xab, 0x85, 0x17, 0x43, 0xee,
	0x4b, 0x1a, 0xcf, 0x72, 0x60, 0xa4, 0x56, 0x43, 0xff, 0x6b, 0xb7, 0xc5, 0x45, 0x5d, 0x10, 0xbe,
	0xd0, 0x55, 0xef, 0xbe, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0xde, 0x70, 0x08, 0x04, 0x04, 0x04,
	0x00, 0x00,
}

func (m *LiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.KCoinAmount.Size()
		i -= size
		if _, err := m.KCoinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.FactoryDenomAmount.Size()
		i -= size
		if _, err := m.FactoryDenomAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.PoolFee.Size()
		i -= size
		if _, err := m.PoolFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.UnlockBlocks != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.UnlockBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KCoin) > 0 {
		i -= len(m.KCoin)
		copy(dAtA[i:], m.KCoin)
		i = encodeVarintPool(dAtA, i, uint64(len(m.KCoin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.KCoinAmount.Size()
		i -= size
		if _, err := m.KCoinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.FactoryDenomAmount.Size()
		i -= size
		if _, err := m.FactoryDenomAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.PoolFee.Size()
		i -= size
		if _, err := m.PoolFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.UnlockBlocks != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.UnlockBlocks))
		i--
		dAtA[i] = 0x18
	}
	if len(m.KCoin) > 0 {
		i -= len(m.KCoin)
		copy(dAtA[i:], m.KCoin)
		i = encodeVarintPool(dAtA, i, uint64(len(m.KCoin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FactoryDenom) > 0 {
		i -= len(m.FactoryDenom)
		copy(dAtA[i:], m.FactoryDenom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.FactoryDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProviderShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Share.Size()
		i -= size
		if _, err := m.Share.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisProviderShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisProviderShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisProviderShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Share.Size()
		i -= size
		if _, err := m.Share.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KCoin)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.UnlockBlocks != 0 {
		n += 1 + sovPool(uint64(m.UnlockBlocks))
	}
	l = m.PoolFee.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.FactoryDenomAmount.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.KCoinAmount.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func (m *GenesisLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FactoryDenom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.KCoin)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.UnlockBlocks != 0 {
		n += 1 + sovPool(uint64(m.UnlockBlocks))
	}
	l = m.PoolFee.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.FactoryDenomAmount.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.KCoinAmount.Size()
	n += 1 + l + sovPool(uint64(l))
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovPool(uint64(l))
		}
	}
	return n
}

func (m *ProviderShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Share.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func (m *GenesisProviderShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.Share.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockBlocks", wireType)
			}
			m.UnlockBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryDenomAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FactoryDenomAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KCoinAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KCoinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoryDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockBlocks", wireType)
			}
			m.UnlockBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryDenomAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FactoryDenomAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KCoinAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KCoinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, &GenesisProviderShare{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisProviderShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisProviderShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisProviderShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
