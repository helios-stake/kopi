// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/mm/redemptions.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Redemption struct {
	Address string                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddedAt int64                       `protobuf:"varint,2,opt,name=added_at,json=addedAt,proto3" json:"added_at,omitempty"`
	Amount  cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Fee     cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=fee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee"`
}

func (m *Redemption) Reset()         { *m = Redemption{} }
func (m *Redemption) String() string { return proto.CompactTextString(m) }
func (*Redemption) ProtoMessage()    {}
func (*Redemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_be6148da065b694a, []int{0}
}
func (m *Redemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redemption.Merge(m, src)
}
func (m *Redemption) XXX_Size() int {
	return m.Size()
}
func (m *Redemption) XXX_DiscardUnknown() {
	xxx_messageInfo_Redemption.DiscardUnknown(m)
}

var xxx_messageInfo_Redemption proto.InternalMessageInfo

func (m *Redemption) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Redemption) GetAddedAt() int64 {
	if m != nil {
		return m.AddedAt
	}
	return 0
}

type DenomRedemption struct {
	Denom       string        `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Redemptions []*Redemption `protobuf:"bytes,2,rep,name=redemptions,proto3" json:"redemptions,omitempty"`
}

func (m *DenomRedemption) Reset()         { *m = DenomRedemption{} }
func (m *DenomRedemption) String() string { return proto.CompactTextString(m) }
func (*DenomRedemption) ProtoMessage()    {}
func (*DenomRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_be6148da065b694a, []int{1}
}
func (m *DenomRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomRedemption.Merge(m, src)
}
func (m *DenomRedemption) XXX_Size() int {
	return m.Size()
}
func (m *DenomRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_DenomRedemption proto.InternalMessageInfo

func (m *DenomRedemption) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomRedemption) GetRedemptions() []*Redemption {
	if m != nil {
		return m.Redemptions
	}
	return nil
}

func init() {
	proto.RegisterType((*Redemption)(nil), "kopi.mm.Redemption")
	proto.RegisterType((*DenomRedemption)(nil), "kopi.mm.DenomRedemption")
}

func init() { proto.RegisterFile("kopi/mm/redemptions.proto", fileDescriptor_be6148da065b694a) }

var fileDescriptor_be6148da065b694a = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x33, 0xcd, 0xff, 0xb7, 0x3a, 0x15, 0x84, 0x58, 0x21, 0x55, 0x4c, 0x43, 0x45, 0xc8,
	0xc6, 0x19, 0x50, 0xba, 0x16, 0x4b, 0x37, 0x82, 0xab, 0x2c, 0x5d, 0x28, 0xd3, 0xcc, 0x35, 0x0d,
	0x65, 0x72, 0x43, 0x67, 0x0a, 0xf6, 0x2d, 0x7c, 0x13, 0x5f, 0xa3, 0xcb, 0x2e, 0xc5, 0x45, 0x91,
	0xf6, 0x45, 0x64, 0xd2, 0xa8, 0x01, 0x77, 0xf7, 0xde, 0x73, 0xbe, 0xcb, 0xe1, 0xd0, 0xee, 0x14,
	0x8b, 0x8c, 0x2b, 0xc5, 0x67, 0x20, 0x41, 0x15, 0x26, 0xc3, 0x5c, 0xb3, 0x62, 0x86, 0x06, 0xbd,
	0x96, 0x95, 0x98, 0x52, 0x27, 0x9d, 0x14, 0x53, 0x2c, 0x6f, 0xdc, 0x4e, 0x3b, 0xb9, 0xff, 0x46,
	0x28, 0x8d, 0x7f, 0x20, 0xcf, 0xa7, 0x2d, 0x21, 0xe5, 0x0c, 0xb4, 0xf6, 0x49, 0x48, 0xa2, 0xfd,
	0xf8, 0x7b, 0xf5, 0xba, 0x74, 0x4f, 0x48, 0x09, 0xf2, 0x49, 0x18, 0xbf, 0x11, 0x92, 0xc8, 0x2d,
	0x25, 0x90, 0xb7, 0xc6, 0x1b, 0xd0, 0xa6, 0x50, 0x38, 0xcf, 0x8d, 0xef, 0x86, 0x24, 0x3a, 0x18,
	0x9e, 0x2d, 0xd7, 0x3d, 0xe7, 0x63, 0xdd, 0x3b, 0x4e, 0x50, 0x2b, 0xd4, 0x5a, 0x4e, 0x59, 0x86,
	0x5c, 0x09, 0x33, 0x61, 0x77, 0xb9, 0x89, 0x2b, 0xb3, 0x37, 0xa0, 0xee, 0x33, 0x80, 0xff, 0xaf,
	0x64, 0xce, 0x2b, 0xe6, 0xf4, 0x2f, 0x73, 0x0f, 0xa9, 0x48, 0x16, 0x23, 0x48, 0x62, 0xeb, 0xef,
	0x3f, 0xd2, 0xc3, 0x11, 0xe4, 0xa8, 0x6a, 0xa9, 0x3b, 0xf4, 0xbf, 0xb4, 0xa7, 0x2a, 0xf3, 0x6e,
	0xf1, 0x06, 0xb4, 0x5d, 0xab, 0xc3, 0x6f, 0x84, 0x6e, 0xd4, 0xbe, 0x3a, 0x62, 0x55, 0x1f, 0xec,
	0x97, 0x8f, 0xeb, 0xbe, 0xe1, 0xcd, 0x72, 0x13, 0x90, 0xd5, 0x26, 0x20, 0x9f, 0x9b, 0x80, 0xbc,
	0x6e, 0x03, 0x67, 0xb5, 0x0d, 0x9c, 0xf7, 0x6d, 0xe0, 0x3c, 0x5c, 0xa4, 0x99, 0x99, 0xcc, 0xc7,
	0x2c, 0x41, 0xc5, 0xed, 0x97, 0x4b, 0x85, 0x39, 0x2c, 0xca, 0x91, 0xbf, 0xd8, 0xf6, 0xcd, 0xa2,
	0x00, 0x3d, 0x6e, 0x96, 0xcd, 0x5e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x09, 0x79, 0x45, 0xdc,
	0x95, 0x01, 0x00, 0x00,
}

func (m *Redemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRedemptions(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRedemptions(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AddedAt != 0 {
		i = encodeVarintRedemptions(dAtA, i, uint64(m.AddedAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRedemptions(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Redemptions) > 0 {
		for iNdEx := len(m.Redemptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Redemptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRedemptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRedemptions(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedemptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedemptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Redemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRedemptions(uint64(l))
	}
	if m.AddedAt != 0 {
		n += 1 + sovRedemptions(uint64(m.AddedAt))
	}
	l = m.Amount.Size()
	n += 1 + l + sovRedemptions(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovRedemptions(uint64(l))
	return n
}

func (m *DenomRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRedemptions(uint64(l))
	}
	if len(m.Redemptions) > 0 {
		for _, e := range m.Redemptions {
			l = e.Size()
			n += 1 + l + sovRedemptions(uint64(l))
		}
	}
	return n
}

func sovRedemptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedemptions(x uint64) (n int) {
	return sovRedemptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Redemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedemptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAt", wireType)
			}
			m.AddedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedemptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedemptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedemptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redemptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedemptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedemptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redemptions = append(m.Redemptions, &Redemption{})
			if err := m.Redemptions[len(m.Redemptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedemptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedemptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedemptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedemptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedemptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedemptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedemptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedemptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedemptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedemptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedemptions = fmt.Errorf("proto: unexpected end of group")
)
