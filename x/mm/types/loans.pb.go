// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/mm/loans.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Loan struct {
	Index  uint64                      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Weight cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=weight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight"`
}

func (m *Loan) Reset()         { *m = Loan{} }
func (m *Loan) String() string { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()    {}
func (*Loan) Descriptor() ([]byte, []int) {
	return fileDescriptor_83af339b64d6baef, []int{0}
}
func (m *Loan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loan.Merge(m, src)
}
func (m *Loan) XXX_Size() int {
	return m.Size()
}
func (m *Loan) XXX_DiscardUnknown() {
	xxx_messageInfo_Loan.DiscardUnknown(m)
}

var xxx_messageInfo_Loan proto.InternalMessageInfo

func (m *Loan) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type GenesisLoan struct {
	Index   uint64                      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Address string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Weight  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=weight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight"`
}

func (m *GenesisLoan) Reset()         { *m = GenesisLoan{} }
func (m *GenesisLoan) String() string { return proto.CompactTextString(m) }
func (*GenesisLoan) ProtoMessage()    {}
func (*GenesisLoan) Descriptor() ([]byte, []int) {
	return fileDescriptor_83af339b64d6baef, []int{1}
}
func (m *GenesisLoan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisLoan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisLoan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisLoan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisLoan.Merge(m, src)
}
func (m *GenesisLoan) XXX_Size() int {
	return m.Size()
}
func (m *GenesisLoan) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisLoan.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisLoan proto.InternalMessageInfo

func (m *GenesisLoan) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GenesisLoan) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Used inside the genesis to store loan data per denom inlcuding all loans
type Loans struct {
	Denom     string                      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	LoanSum   cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=loan_sum,json=loanSum,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"loan_sum"`
	WeightSum cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=weight_sum,json=weightSum,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_sum"`
	Loans     []*GenesisLoan              `protobuf:"bytes,4,rep,name=loans,proto3" json:"loans,omitempty"`
}

func (m *Loans) Reset()         { *m = Loans{} }
func (m *Loans) String() string { return proto.CompactTextString(m) }
func (*Loans) ProtoMessage()    {}
func (*Loans) Descriptor() ([]byte, []int) {
	return fileDescriptor_83af339b64d6baef, []int{2}
}
func (m *Loans) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loans) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loans.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loans) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loans.Merge(m, src)
}
func (m *Loans) XXX_Size() int {
	return m.Size()
}
func (m *Loans) XXX_DiscardUnknown() {
	xxx_messageInfo_Loans.DiscardUnknown(m)
}

var xxx_messageInfo_Loans proto.InternalMessageInfo

func (m *Loans) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Loans) GetLoans() []*GenesisLoan {
	if m != nil {
		return m.Loans
	}
	return nil
}

// Used in production, loans are stored seperately with a different key
type LoanSum struct {
	Denom     string                      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	NumLoans  uint64                      `protobuf:"varint,2,opt,name=num_loans,json=numLoans,proto3" json:"num_loans,omitempty"`
	LoanSum   cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=loan_sum,json=loanSum,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"loan_sum"`
	WeightSum cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=weight_sum,json=weightSum,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_sum"`
}

func (m *LoanSum) Reset()         { *m = LoanSum{} }
func (m *LoanSum) String() string { return proto.CompactTextString(m) }
func (*LoanSum) ProtoMessage()    {}
func (*LoanSum) Descriptor() ([]byte, []int) {
	return fileDescriptor_83af339b64d6baef, []int{3}
}
func (m *LoanSum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoanSum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoanSum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoanSum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoanSum.Merge(m, src)
}
func (m *LoanSum) XXX_Size() int {
	return m.Size()
}
func (m *LoanSum) XXX_DiscardUnknown() {
	xxx_messageInfo_LoanSum.DiscardUnknown(m)
}

var xxx_messageInfo_LoanSum proto.InternalMessageInfo

func (m *LoanSum) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *LoanSum) GetNumLoans() uint64 {
	if m != nil {
		return m.NumLoans
	}
	return 0
}

func init() {
	proto.RegisterType((*Loan)(nil), "kopi.mm.Loan")
	proto.RegisterType((*GenesisLoan)(nil), "kopi.mm.GenesisLoan")
	proto.RegisterType((*Loans)(nil), "kopi.mm.Loans")
	proto.RegisterType((*LoanSum)(nil), "kopi.mm.LoanSum")
}

func init() { proto.RegisterFile("kopi/mm/loans.proto", fileDescriptor_83af339b64d6baef) }

var fileDescriptor_83af339b64d6baef = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x33, 0x6d, 0xda, 0x34, 0xd3, 0x7f, 0x95, 0xbf, 0x8b, 0x60, 0x21, 0x0d, 0x15, 0x21,
	0x08, 0x4e, 0x40, 0x97, 0x82, 0x42, 0x11, 0xdc, 0x74, 0x15, 0x57, 0xba, 0x29, 0x69, 0x32, 0xa4,
	0xa1, 0xce, 0xdc, 0xd2, 0x49, 0xb0, 0xf5, 0x29, 0x7c, 0x24, 0x97, 0xdd, 0x08, 0x5d, 0x8a, 0x8b,
	0x22, 0xed, 0x8b, 0xc8, 0xcc, 0x54, 0xe8, 0x42, 0x44, 0xed, 0x6e, 0xee, 0x24, 0xf7, 0x7c, 0x73,
	0xce, 0xbd, 0xf8, 0xff, 0x18, 0x26, 0x79, 0xc8, 0x58, 0x78, 0x0f, 0x31, 0x17, 0x64, 0x32, 0x85,
	0x02, 0x1c, 0x4b, 0x5e, 0x12, 0xc6, 0x0e, 0x5a, 0x19, 0x64, 0xa0, 0xee, 0x42, 0x79, 0xd2, 0x9f,
	0xbb, 0xb7, 0xd8, 0xec, 0x43, 0xcc, 0x9d, 0x16, 0xae, 0xe5, 0x3c, 0xa5, 0x33, 0x17, 0xf9, 0x28,
	0x30, 0x23, 0x5d, 0x38, 0xe7, 0xb8, 0xfe, 0x40, 0xf3, 0x6c, 0x54, 0xb8, 0x55, 0x1f, 0x05, 0xff,
	0x7a, 0x87, 0x8b, 0x55, 0xc7, 0x78, 0x5b, 0x75, 0xda, 0x09, 0x08, 0x06, 0x42, 0xa4, 0x63, 0x92,
	0x43, 0xc8, 0xe2, 0x62, 0x44, 0xfa, 0x34, 0x8b, 0x93, 0xf9, 0x15, 0x4d, 0xa2, 0x6d, 0x4b, 0xf7,
	0x11, 0x37, 0xaf, 0x29, 0xa7, 0x22, 0x17, 0xdf, 0x10, 0x5c, 0x6c, 0xc5, 0x69, 0x3a, 0xa5, 0x42,
	0xb8, 0x15, 0x1f, 0x05, 0x76, 0xf4, 0x59, 0xee, 0xc7, 0x7e, 0x41, 0xb8, 0x26, 0xa9, 0x42, 0x62,
	0x53, 0xca, 0x81, 0x29, 0xac, 0x1d, 0xe9, 0xc2, 0xb9, 0xc0, 0x0d, 0x19, 0xd2, 0x40, 0x94, 0x4c,
	0x71, 0x7f, 0x28, 0x6f, 0xc9, 0xa6, 0x9b, 0x92, 0x39, 0x3d, 0x8c, 0x35, 0x49, 0x29, 0xfc, 0xe2,
	0x81, 0xb6, 0x6e, 0x93, 0x1a, 0xc7, 0xb8, 0xa6, 0x06, 0xe5, 0x9a, 0x7e, 0x35, 0x68, 0x9e, 0xb6,
	0xc8, 0x76, 0x52, 0x64, 0x27, 0xb5, 0x48, 0xff, 0xd2, 0x7d, 0x46, 0xd8, 0xea, 0x6f, 0xd9, 0x5f,
	0x3b, 0x6a, 0x63, 0x9b, 0x97, 0x6c, 0xa0, 0x15, 0x2b, 0x2a, 0xe2, 0x06, 0x2f, 0x99, 0x0e, 0x61,
	0xd7, 0x6e, 0x75, 0x6f, 0xbb, 0xe6, 0x5f, 0xec, 0xf6, 0x2e, 0x17, 0x6b, 0x0f, 0x2d, 0xd7, 0x1e,
	0x7a, 0x5f, 0x7b, 0xe8, 0x69, 0xe3, 0x19, 0xcb, 0x8d, 0x67, 0xbc, 0x6e, 0x3c, 0xe3, 0xee, 0x28,
	0xcb, 0x8b, 0x51, 0x39, 0x24, 0x09, 0xb0, 0x50, 0x66, 0x70, 0xc2, 0x80, 0xd3, 0xb9, 0x3a, 0x86,
	0x33, 0xb9, 0xcf, 0xc5, 0x7c, 0x42, 0xc5, 0xb0, 0xae, 0x36, 0xf6, 0xec, 0x23, 0x00, 0x00, 0xff,
	0xff, 0x8c, 0x3d, 0x37, 0xf2, 0xe7, 0x02, 0x00, 0x00,
}

func (m *Loan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLoans(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Index != 0 {
		i = encodeVarintLoans(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisLoan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisLoan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisLoan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLoans(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLoans(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintLoans(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Loans) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loans) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loans) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLoans(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.WeightSum.Size()
		i -= size
		if _, err := m.WeightSum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLoans(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.LoanSum.Size()
		i -= size
		if _, err := m.LoanSum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLoans(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLoans(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoanSum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoanSum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoanSum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WeightSum.Size()
		i -= size
		if _, err := m.WeightSum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLoans(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.LoanSum.Size()
		i -= size
		if _, err := m.LoanSum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLoans(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.NumLoans != 0 {
		i = encodeVarintLoans(dAtA, i, uint64(m.NumLoans))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLoans(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoans(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoans(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Loan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovLoans(uint64(m.Index))
	}
	l = m.Weight.Size()
	n += 1 + l + sovLoans(uint64(l))
	return n
}

func (m *GenesisLoan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovLoans(uint64(m.Index))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLoans(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovLoans(uint64(l))
	return n
}

func (m *Loans) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLoans(uint64(l))
	}
	l = m.LoanSum.Size()
	n += 1 + l + sovLoans(uint64(l))
	l = m.WeightSum.Size()
	n += 1 + l + sovLoans(uint64(l))
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 1 + l + sovLoans(uint64(l))
		}
	}
	return n
}

func (m *LoanSum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLoans(uint64(l))
	}
	if m.NumLoans != 0 {
		n += 1 + sovLoans(uint64(m.NumLoans))
	}
	l = m.LoanSum.Size()
	n += 1 + l + sovLoans(uint64(l))
	l = m.WeightSum.Size()
	n += 1 + l + sovLoans(uint64(l))
	return n
}

func sovLoans(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoans(x uint64) (n int) {
	return sovLoans(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Loan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisLoan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisLoan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisLoan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loans) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loans: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loans: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanSum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LoanSum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightSum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightSum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, &GenesisLoan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoanSum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoanSum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoanSum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLoans", wireType)
			}
			m.NumLoans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLoans |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanSum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LoanSum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightSum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLoans
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLoans
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightSum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoans(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoans
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoans
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoans
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoans
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoans
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoans        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoans          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoans = fmt.Errorf("proto: unexpected end of group")
)
